/* Copyright 2017 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package model

import (
	"fmt"
	"reflect"
	"sort"

	"github.com/neoul/gnxi/gnmi/model/gostruct"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
)

// JSONUnmarshaler is the signature of the Unmarshal() function in the GoStruct code generated by openconfig ygot library.
type JSONUnmarshaler func([]byte, ygot.GoStruct, ...ytypes.UnmarshalOpt) error

// GoStructEnumData is the data type to maintain GoStruct enum type.
type GoStructEnumData map[string]map[int64]ygot.EnumDefinition

// Model contains the model data and GoStruct information for the device.
type Model struct {
	name            string
	modelData       []*gpb.ModelData
	StructRootType  reflect.Type
	SchemaTree      map[string]*yang.Entry
	SchemaTreeRoot  *yang.Entry
	JSONUnmarshaler JSONUnmarshaler
	EnumData        GoStructEnumData
}

// NewModel returns an instance of Model struct.
func NewModel() *Model {
	var name string
	var schemaTreeRoot *yang.Entry
	for key, entry := range gostruct.SchemaTree {
		if entry.Parent == nil {
			name = key
			schemaTreeRoot = entry
			break
		}
	}
	return &Model{
		name:            name,
		modelData:       gostruct.ΓModelData,
		StructRootType:  reflect.TypeOf((*gostruct.Device)(nil)),
		SchemaTree:      gostruct.SchemaTree,
		SchemaTreeRoot:  schemaTreeRoot,
		JSONUnmarshaler: gostruct.Unmarshal,
		EnumData:        gostruct.ΛEnum,
	}
}

// NewCustomModel returns an instance of Model struct.
func NewCustomModel(
	modelData []*gpb.ModelData,
	structRootType reflect.Type,
	schemaTree map[string]*yang.Entry,
	jSONUnmarshaler JSONUnmarshaler,
	enumData GoStructEnumData,
) *Model {
	var name string
	var schemaTreeRoot *yang.Entry
	for key, entry := range gostruct.SchemaTree {
		if entry.Parent == nil {
			name = key
			schemaTreeRoot = entry
			break
		}
	}
	return &Model{
		name:            name,
		modelData:       modelData,
		StructRootType:  structRootType,
		SchemaTreeRoot:  schemaTreeRoot,
		JSONUnmarshaler: jSONUnmarshaler,
		EnumData:        enumData,
	}
}

// SupportedModels returns a list of supported models.
func (m *Model) SupportedModels() []string {
	mDesc := make([]string, len(m.modelData))
	for i, m := range m.modelData {
		mDesc[i] = fmt.Sprintf("%s %s", m.Name, m.Version)
	}
	sort.Strings(mDesc)
	return mDesc
}

// CheckModels checks whether models are supported by the model. Return error if anything is unsupported.
func (m *Model) CheckModels(models []*gpb.ModelData) error {
	for _, mo := range models {
		isSupported := false
		for _, supportedModel := range m.modelData {
			if reflect.DeepEqual(mo, supportedModel) {
				isSupported = true
				break
			}
		}
		if !isSupported {
			return fmt.Errorf("unsupported model: %v", m)
		}
	}
	return nil
}

// GetModelData - returns ModelData of the model.
func (m *Model) GetModelData() []*gpb.ModelData {
	return m.modelData
}

// FindSchemaData - find the yang.Entry for schema info.
func (m *Model) FindSchemaData(v reflect.Value) *yang.Entry {
	if !v.IsValid() {
		return nil
	}
	for v.Kind() == reflect.Ptr {
		v = v.Elem()
		if !v.IsValid() {
			return nil
		}
	}
	return m.SchemaTree[v.Type().Name()]
}
