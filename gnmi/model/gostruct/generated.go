/*
Package gostruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/neoul/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- github.com/openconfig/public/release/models/interfaces/openconfig-interfaces.yang
	- github.com/openconfig/public/release/models/system/openconfig-messages.yang
	- github.com/YangModels/yang/standard/ietf/RFC/iana-if-type@2017-01-19.yang
	- github.com/openconfig/public/release/models/telemetry/openconfig-telemetry.yang
	- github.com/openconfig/public/release/models/openflow/openconfig-openflow.yang
	- github.com/openconfig/public/release/models/platform/openconfig-platform.yang
	- github.com/openconfig/public/release/models/system/openconfig-system.yang
	- github.com/neoul/gnxi/gnmi/model/data/sample.yang
Imported modules were sourced from:
	- github.com/openconfig/public/...
	- github.com/YangModels/yang/...
*/
package gostruct

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
	gpb "github.com/openconfig/gnmi/proto/gnmi"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}
// ΓModelData contains the catalogue information corresponding to the modules for
// which Go code was generated.
var ΓModelData = []*gpb.ModelData{
    {
		Name: "iana-if-type",
		Organization: "IANA",
	},
    {
		Name: "ietf-interfaces",
		Organization: "IETF NETMOD (Network Modeling) Working Group",
	},
    {
		Name: "ietf-yang-types",
		Organization: "IETF NETMOD (NETCONF Data Modeling Language) Working Group",
	},
    {
		Name: "openconfig-aaa",
		Organization: "OpenConfig working group",
		Version: "0.5.0",
	},
    {
		Name: "openconfig-aaa-types",
		Organization: "OpenConfig working group",
		Version: "0.4.1",
	},
    {
		Name: "openconfig-alarm-types",
		Organization: "OpenConfig working group",
		Version: "0.2.1",
	},
    {
		Name: "openconfig-alarms",
		Organization: "OpenConfig working group",
		Version: "0.3.2",
	},
    {
		Name: "openconfig-extensions",
		Organization: "OpenConfig working group",
	},
    {
		Name: "openconfig-inet-types",
		Organization: "OpenConfig working group",
		Version: "0.3.5",
	},
    {
		Name: "openconfig-interfaces",
		Organization: "OpenConfig working group",
		Version: "2.4.3",
	},
    {
		Name: "openconfig-license",
		Organization: "OpenConfig working group",
		Version: "0.2.0",
	},
    {
		Name: "openconfig-messages",
		Organization: "OpenConfig working group",
		Version: "0.0.1",
	},
    {
		Name: "openconfig-openflow",
		Organization: "OpenConfig working group",
		Version: "0.1.2",
	},
    {
		Name: "openconfig-openflow-types",
		Organization: "OpenConfig working group",
		Version: "0.1.3",
	},
    {
		Name: "openconfig-platform",
		Organization: "OpenConfig working group",
		Version: "0.12.2",
	},
    {
		Name: "openconfig-platform-types",
		Organization: "OpenConfig working group",
		Version: "1.0.0",
	},
    {
		Name: "openconfig-procmon",
		Organization: "OpenConfig working group",
		Version: "0.4.0",
	},
    {
		Name: "openconfig-system",
		Organization: "OpenConfig working group",
		Version: "0.9.1",
	},
    {
		Name: "openconfig-system-logging",
		Organization: "OpenConfig working group",
		Version: "0.3.1",
	},
    {
		Name: "openconfig-system-management",
		Organization: "OpenConfig working group",
		Version: "0.3.0",
	},
    {
		Name: "openconfig-system-terminal",
		Organization: "OpenConfig working group",
		Version: "0.3.1",
	},
    {
		Name: "openconfig-telemetry",
		Organization: "OpenConfig working group",
		Version: "0.5.1",
	},
    {
		Name: "openconfig-telemetry-types",
		Organization: "OpenConfig working group",
		Version: "0.4.2",
	},
    {
		Name: "openconfig-types",
		Organization: "OpenConfig working group",
		Version: "0.6.0",
	},
    {
		Name: "openconfig-yang-types",
		Organization: "OpenConfig working group",
		Version: "0.2.2",
	},
    {
		Name: "sample",
		Organization: "sample model",
	},
}

// Device represents the /device YANG schema element.
type Device struct {
	Components	*OpenconfigPlatform_Components	`path:"components" module:"openconfig-platform"`
	Interfaces	*OpenconfigInterfaces_Interfaces	`path:"interfaces" module:"openconfig-interfaces"`
	Messages	*OpenconfigMessages_Messages	`path:"messages" module:"openconfig-messages"`
	Sample	*Sample_Sample	`path:"sample" module:"sample"`
	System	*OpenconfigSystem_System	`path:"system" module:"openconfig-system"`
	TelemetrySystem	*OpenconfigTelemetry_TelemetrySystem	`path:"telemetry-system" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces represents the /openconfig-interfaces/interfaces YANG schema element.
type OpenconfigInterfaces_Interfaces struct {
	Interface	map[string]*OpenconfigInterfaces_Interfaces_Interface	`path:"interface" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces) NewInterface(Name string) (*OpenconfigInterfaces_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface struct {
	Config	*OpenconfigInterfaces_Interfaces_Interface_Config	`path:"config" module:"openconfig-interfaces"`
	HoldTime	*OpenconfigInterfaces_Interfaces_Interface_HoldTime	`path:"hold-time" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	State	*OpenconfigInterfaces_Interfaces_Interface_State	`path:"state" module:"openconfig-interfaces"`
	Subinterfaces	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces	`path:"subinterfaces" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Config represents the /openconfig-interfaces/interfaces/interface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Config struct {
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	LoopbackMode	*bool	`path:"loopback-mode" module:"openconfig-interfaces"`
	Mtu	*uint16	`path:"mtu" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime struct {
	Config	*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config	`path:"config" module:"openconfig-interfaces"`
	State	*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State	`path:"state" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config represents the /openconfig-interfaces/interfaces/interface/hold-time/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config struct {
	Down	*uint32	`path:"down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_HoldTime_State represents the /openconfig-interfaces/interfaces/interface/hold-time/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_State struct {
	Down	*uint32	`path:"down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_State represents the /openconfig-interfaces/interfaces/interface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State struct {
	AdminStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus	`path:"admin-status" module:"openconfig-interfaces"`
	Counters	*OpenconfigInterfaces_Interfaces_Interface_State_Counters	`path:"counters" module:"openconfig-interfaces"`
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"last-change" module:"openconfig-interfaces"`
	Logical	*bool	`path:"logical" module:"openconfig-interfaces"`
	LoopbackMode	*bool	`path:"loopback-mode" module:"openconfig-interfaces"`
	Mtu	*uint16	`path:"mtu" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	OperStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus	`path:"oper-status" module:"openconfig-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_State_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces represents the /openconfig-interfaces/interfaces/interface/subinterfaces YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct {
	Subinterface	map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface	`path:"subinterface" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) NewSubinterface(Index uint32) (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct {
	Config	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config	`path:"config" module:"openconfig-interfaces"`
	Index	*uint32	`path:"index" module:"openconfig-interfaces"`
	State	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State	`path:"state" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config struct {
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	Index	*uint32	`path:"index" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State struct {
	AdminStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus	`path:"admin-status" module:"openconfig-interfaces"`
	Counters	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters	`path:"counters" module:"openconfig-interfaces"`
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"openconfig-interfaces"`
	Index	*uint32	`path:"index" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"last-change" module:"openconfig-interfaces"`
	Logical	*bool	`path:"logical" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	OperStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus	`path:"oper-status" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages represents the /openconfig-messages/messages YANG schema element.
type OpenconfigMessages_Messages struct {
	Config	*OpenconfigMessages_Messages_Config	`path:"config" module:"openconfig-messages"`
	DebugEntries	*OpenconfigMessages_Messages_DebugEntries	`path:"debug-entries" module:"openconfig-messages"`
	State	*OpenconfigMessages_Messages_State	`path:"state" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_Config represents the /openconfig-messages/messages/config YANG schema element.
type OpenconfigMessages_Messages_Config struct {
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries represents the /openconfig-messages/messages/debug-entries YANG schema element.
type OpenconfigMessages_Messages_DebugEntries struct {
	DebugService	map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigMessages_Messages_DebugEntries_DebugService	`path:"debug-service" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// OpenconfigMessages_Messages_DebugEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigMessages_Messages_DebugEntries) NewDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) (*OpenconfigMessages_Messages_DebugEntries_DebugService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigMessages_Messages_DebugEntries_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &OpenconfigMessages_Messages_DebugEntries_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries_DebugService represents the /openconfig-messages/messages/debug-entries/debug-service YANG schema element.
type OpenconfigMessages_Messages_DebugEntries_DebugService struct {
	Config	*OpenconfigMessages_Messages_DebugEntries_DebugService_Config	`path:"config" module:"openconfig-messages"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-messages"`
	State	*OpenconfigMessages_Messages_DebugEntries_DebugService_State	`path:"state" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries_DebugService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigMessages_Messages_DebugEntries_DebugService struct, which is a YANG list entry.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries_DebugService_Config represents the /openconfig-messages/messages/debug-entries/debug-service/config YANG schema element.
type OpenconfigMessages_Messages_DebugEntries_DebugService_Config struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-messages"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries_DebugService_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries_DebugService_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries_DebugService_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries_DebugService_State represents the /openconfig-messages/messages/debug-entries/debug-service/state YANG schema element.
type OpenconfigMessages_Messages_DebugEntries_DebugService_State struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-messages"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries_DebugService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries_DebugService_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries_DebugService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_State represents the /openconfig-messages/messages/state YANG schema element.
type OpenconfigMessages_Messages_State struct {
	Message	*OpenconfigMessages_Messages_State_Message	`path:"message" module:"openconfig-messages"`
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_State_Message represents the /openconfig-messages/messages/state/message YANG schema element.
type OpenconfigMessages_Messages_State_Message struct {
	AppName	*string	`path:"app-name" module:"openconfig-messages"`
	Msg	*string	`path:"msg" module:"openconfig-messages"`
	Msgid	*string	`path:"msgid" module:"openconfig-messages"`
	Priority	*uint8	`path:"priority" module:"openconfig-messages"`
	Procid	*string	`path:"procid" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_State_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_State_Message) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_State_Message) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_State_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_State_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components represents the /openconfig-platform/components YANG schema element.
type OpenconfigPlatform_Components struct {
	Component	map[string]*OpenconfigPlatform_Components_Component	`path:"component" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// OpenconfigPlatform_Components struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components) NewComponent(Name string) (*OpenconfigPlatform_Components_Component, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &OpenconfigPlatform_Components_Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component represents the /openconfig-platform/components/component YANG schema element.
type OpenconfigPlatform_Components_Component struct {
	Backplane	*OpenconfigPlatform_Components_Component_Backplane	`path:"backplane" module:"openconfig-platform"`
	Chassis	*OpenconfigPlatform_Components_Component_Chassis	`path:"chassis" module:"openconfig-platform"`
	Config	*OpenconfigPlatform_Components_Component_Config	`path:"config" module:"openconfig-platform"`
	Cpu	*OpenconfigPlatform_Components_Component_Cpu	`path:"cpu" module:"openconfig-platform"`
	Fabric	*OpenconfigPlatform_Components_Component_Fabric	`path:"fabric" module:"openconfig-platform"`
	Fan	*OpenconfigPlatform_Components_Component_Fan	`path:"fan" module:"openconfig-platform"`
	IntegratedCircuit	*OpenconfigPlatform_Components_Component_IntegratedCircuit	`path:"integrated-circuit" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	Port	*OpenconfigPlatform_Components_Component_Port	`path:"port" module:"openconfig-platform"`
	PowerSupply	*OpenconfigPlatform_Components_Component_PowerSupply	`path:"power-supply" module:"openconfig-platform"`
	Properties	*OpenconfigPlatform_Components_Component_Properties	`path:"properties" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_State	`path:"state" module:"openconfig-platform"`
	Storage	*OpenconfigPlatform_Components_Component_Storage	`path:"storage" module:"openconfig-platform"`
	Subcomponents	*OpenconfigPlatform_Components_Component_Subcomponents	`path:"subcomponents" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane struct {
	Config	*OpenconfigPlatform_Components_Component_Backplane_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Backplane_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Backplane_Config represents the /openconfig-platform/components/component/backplane/config YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Backplane_State represents the /openconfig-platform/components/component/backplane/state YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis struct {
	Config	*OpenconfigPlatform_Components_Component_Chassis_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Chassis_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Chassis_Config represents the /openconfig-platform/components/component/chassis/config YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Chassis_State represents the /openconfig-platform/components/component/chassis/state YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Config represents the /openconfig-platform/components/component/config YANG schema element.
type OpenconfigPlatform_Components_Component_Config struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu struct {
	Config	*OpenconfigPlatform_Components_Component_Cpu_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Cpu_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Cpu_Config represents the /openconfig-platform/components/component/cpu/config YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Cpu_State represents the /openconfig-platform/components/component/cpu/state YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric struct {
	Config	*OpenconfigPlatform_Components_Component_Fabric_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Fabric_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fabric_Config represents the /openconfig-platform/components/component/fabric/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fabric_State represents the /openconfig-platform/components/component/fabric/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type OpenconfigPlatform_Components_Component_Fan struct {
	Config	*OpenconfigPlatform_Components_Component_Fan_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Fan_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fan_Config represents the /openconfig-platform/components/component/fan/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fan_State represents the /openconfig-platform/components/component/fan/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit struct {
	Config	*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_IntegratedCircuit_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_IntegratedCircuit_Config represents the /openconfig-platform/components/component/integrated-circuit/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_IntegratedCircuit_State represents the /openconfig-platform/components/component/integrated-circuit/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type OpenconfigPlatform_Components_Component_Port struct {
	Config	*OpenconfigPlatform_Components_Component_Port_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Port_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Port_Config represents the /openconfig-platform/components/component/port/config YANG schema element.
type OpenconfigPlatform_Components_Component_Port_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Port_State represents the /openconfig-platform/components/component/port/state YANG schema element.
type OpenconfigPlatform_Components_Component_Port_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply struct {
	Config	*OpenconfigPlatform_Components_Component_PowerSupply_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_PowerSupply_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_PowerSupply_Config represents the /openconfig-platform/components/component/power-supply/config YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_PowerSupply_State represents the /openconfig-platform/components/component/power-supply/state YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Properties represents the /openconfig-platform/components/component/properties YANG schema element.
type OpenconfigPlatform_Components_Component_Properties struct {
	Property	map[string]*OpenconfigPlatform_Components_Component_Properties_Property	`path:"property" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// OpenconfigPlatform_Components_Component_Properties struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Properties) NewProperty(Name string) (*OpenconfigPlatform_Components_Component_Properties_Property, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &OpenconfigPlatform_Components_Component_Properties_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Properties_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property struct {
	Config	*OpenconfigPlatform_Components_Component_Properties_Property_Config	`path:"config" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Properties_Property_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Properties_Property struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Properties_Property_Config represents the /openconfig-platform/components/component/properties/property/config YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_Config struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
	Value	OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union	`path:"value" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool struct {
	Bool	bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 struct {
	Float64	float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 struct {
	Int64	int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String struct {
	String	string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 struct {
	Uint64	uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}


// OpenconfigPlatform_Components_Component_Properties_Property_State represents the /openconfig-platform/components/component/properties/property/state YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_State struct {
	Configurable	*bool	`path:"configurable" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	Value	OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union	`path:"value" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/state/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool struct {
	Bool	bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 struct {
	Float64	float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 struct {
	Int64	int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String struct {
	String	string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 struct {
	Uint64	uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}


// OpenconfigPlatform_Components_Component_State represents the /openconfig-platform/components/component/state YANG schema element.
type OpenconfigPlatform_Components_Component_State struct {
	AllocatedPower	*uint32	`path:"allocated-power" module:"openconfig-platform"`
	Description	*string	`path:"description" module:"openconfig-platform"`
	Empty	*bool	`path:"empty" module:"openconfig-platform"`
	EquipmentFailure	*bool	`path:"equipment-failure" module:"openconfig-alarms"`
	EquipmentMismatch	*bool	`path:"equipment-mismatch" module:"openconfig-alarms"`
	FirmwareVersion	*string	`path:"firmware-version" module:"openconfig-platform"`
	HardwareVersion	*string	`path:"hardware-version" module:"openconfig-platform"`
	Id	*string	`path:"id" module:"openconfig-platform"`
	Location	*string	`path:"location" module:"openconfig-platform"`
	Memory	*OpenconfigPlatform_Components_Component_State_Memory	`path:"memory" module:"openconfig-platform"`
	MfgDate	*string	`path:"mfg-date" module:"openconfig-platform"`
	MfgName	*string	`path:"mfg-name" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	OperStatus	E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS	`path:"oper-status" module:"openconfig-platform"`
	Parent	*string	`path:"parent" module:"openconfig-platform"`
	PartNo	*string	`path:"part-no" module:"openconfig-platform"`
	Removable	*bool	`path:"removable" module:"openconfig-platform"`
	SerialNo	*string	`path:"serial-no" module:"openconfig-platform"`
	SoftwareVersion	*string	`path:"software-version" module:"openconfig-platform"`
	Temperature	*OpenconfigPlatform_Components_Component_State_Temperature	`path:"temperature" module:"openconfig-platform"`
	Type	OpenconfigPlatform_Components_Component_State_Type_Union	`path:"type" module:"openconfig-platform"`
	UsedPower	*uint32	`path:"used-power" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
type OpenconfigPlatform_Components_Component_State_Type_Union interface {
	Is_OpenconfigPlatform_Components_Component_State_Type_Union()
}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {}

// To_OpenconfigPlatform_Components_Component_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_State) To_OpenconfigPlatform_Components_Component_State_Type_Union(i interface{}) (OpenconfigPlatform_Components_Component_State_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT{v}, nil
	case E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
	}
}


// OpenconfigPlatform_Components_Component_State_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type OpenconfigPlatform_Components_Component_State_Memory struct {
	Available	*uint64	`path:"available" module:"openconfig-platform"`
	Utilized	*uint64	`path:"utilized" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_State_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type OpenconfigPlatform_Components_Component_State_Temperature struct {
	AlarmSeverity	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY	`path:"alarm-severity" module:"openconfig-platform"`
	AlarmStatus	*bool	`path:"alarm-status" module:"openconfig-platform"`
	AlarmThreshold	*uint32	`path:"alarm-threshold" module:"openconfig-platform"`
	Avg	*float64	`path:"avg" module:"openconfig-platform"`
	Instant	*float64	`path:"instant" module:"openconfig-platform"`
	Interval	*uint64	`path:"interval" module:"openconfig-platform"`
	Max	*float64	`path:"max" module:"openconfig-platform"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-platform"`
	Min	*float64	`path:"min" module:"openconfig-platform"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Temperature) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type OpenconfigPlatform_Components_Component_Storage struct {
	Config	*OpenconfigPlatform_Components_Component_Storage_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Storage_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Storage_Config represents the /openconfig-platform/components/component/storage/config YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Storage_State represents the /openconfig-platform/components/component/storage/state YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents represents the /openconfig-platform/components/component/subcomponents YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents struct {
	Subcomponent	map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent	`path:"subcomponent" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents) IsYANGGoStruct() {}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// OpenconfigPlatform_Components_Component_Subcomponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) NewSubcomponent(Name string) (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct {
	Config	*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config	`path:"config" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config represents the /openconfig-platform/components/component/subcomponents/subcomponent/config YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State represents the /openconfig-platform/components/component/subcomponents/subcomponent/state YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System represents the /openconfig-system/system YANG schema element.
type OpenconfigSystem_System struct {
	Aaa	*OpenconfigSystem_System_Aaa	`path:"aaa" module:"openconfig-system"`
	Alarms	*OpenconfigSystem_System_Alarms	`path:"alarms" module:"openconfig-system"`
	Clock	*OpenconfigSystem_System_Clock	`path:"clock" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Config	`path:"config" module:"openconfig-system"`
	Cpus	*OpenconfigSystem_System_Cpus	`path:"cpus" module:"openconfig-system"`
	Dns	*OpenconfigSystem_System_Dns	`path:"dns" module:"openconfig-system"`
	GrpcServer	*OpenconfigSystem_System_GrpcServer	`path:"grpc-server" module:"openconfig-system"`
	License	*OpenconfigSystem_System_License	`path:"license" module:"openconfig-system"`
	Logging	*OpenconfigSystem_System_Logging	`path:"logging" module:"openconfig-system"`
	Memory	*OpenconfigSystem_System_Memory	`path:"memory" module:"openconfig-system"`
	Messages	*OpenconfigSystem_System_Messages	`path:"messages" module:"openconfig-system"`
	Ntp	*OpenconfigSystem_System_Ntp	`path:"ntp" module:"openconfig-system"`
	Openflow	*OpenconfigSystem_System_Openflow	`path:"openflow" module:"openconfig-openflow"`
	Processes	*OpenconfigSystem_System_Processes	`path:"processes" module:"openconfig-system"`
	SshServer	*OpenconfigSystem_System_SshServer	`path:"ssh-server" module:"openconfig-system"`
	State	*OpenconfigSystem_System_State	`path:"state" module:"openconfig-system"`
	TelnetServer	*OpenconfigSystem_System_TelnetServer	`path:"telnet-server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type OpenconfigSystem_System_Aaa struct {
	Accounting	*OpenconfigSystem_System_Aaa_Accounting	`path:"accounting" module:"openconfig-system"`
	Authentication	*OpenconfigSystem_System_Aaa_Authentication	`path:"authentication" module:"openconfig-system"`
	Authorization	*OpenconfigSystem_System_Aaa_Authorization	`path:"authorization" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Aaa_Config	`path:"config" module:"openconfig-system"`
	ServerGroups	*OpenconfigSystem_System_Aaa_ServerGroups	`path:"server-groups" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting struct {
	Config	*OpenconfigSystem_System_Aaa_Accounting_Config	`path:"config" module:"openconfig-system"`
	Events	*OpenconfigSystem_System_Aaa_Accounting_Events	`path:"events" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Accounting_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Config represents the /openconfig-system/system/aaa/accounting/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Config struct {
	AccountingMethod	[]OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union	`path:"accounting-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/config/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Accounting_Events represents the /openconfig-system/system/aaa/accounting/events YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events struct {
	Event	map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event	`path:"event" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Accounting_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Accounting_Events_Event, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Accounting_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Events_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event struct {
	Config	*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config	`path:"config" module:"openconfig-system"`
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Accounting_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config represents the /openconfig-system/system/aaa/accounting/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config struct {
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	Record	E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record	`path:"record" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Events_Event_State represents the /openconfig-system/system/aaa/accounting/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_State struct {
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	Record	E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record	`path:"record" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_State represents the /openconfig-system/system/aaa/accounting/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_State struct {
	AccountingMethod	[]OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union	`path:"accounting-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/state/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication struct {
	AdminUser	*OpenconfigSystem_System_Aaa_Authentication_AdminUser	`path:"admin-user" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Aaa_Authentication_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authentication_State	`path:"state" module:"openconfig-system"`
	Users	*OpenconfigSystem_System_Aaa_Authentication_Users	`path:"users" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser struct {
	Config	*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config represents the /openconfig-system/system/aaa/authentication/admin-user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config struct {
	AdminPassword	*string	`path:"admin-password" module:"openconfig-system"`
	AdminPasswordHashed	*string	`path:"admin-password-hashed" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_AdminUser_State represents the /openconfig-system/system/aaa/authentication/admin-user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_State struct {
	AdminPassword	*string	`path:"admin-password" module:"openconfig-system"`
	AdminPasswordHashed	*string	`path:"admin-password-hashed" module:"openconfig-system"`
	AdminUsername	*string	`path:"admin-username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_Config represents the /openconfig-system/system/aaa/authentication/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Config struct {
	AuthenticationMethod	[]OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union	`path:"authentication-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/config/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication_State represents the /openconfig-system/system/aaa/authentication/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_State struct {
	AuthenticationMethod	[]OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union	`path:"authentication-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/state/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication_Users represents the /openconfig-system/system/aaa/authentication/users YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users struct {
	User	map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User	`path:"user" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// OpenconfigSystem_System_Aaa_Authentication_Users struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) NewUser(Username string) (*OpenconfigSystem_System_Aaa_Authentication_Users_User, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &OpenconfigSystem_System_Aaa_Authentication_Users_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_Users_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User struct {
	Config	*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authentication_Users_User_State	`path:"state" module:"openconfig-system"`
	Username	*string	`path:"username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authentication_Users_User struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config represents the /openconfig-system/system/aaa/authentication/users/user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config struct {
	Password	*string	`path:"password" module:"openconfig-system"`
	PasswordHashed	*string	`path:"password-hashed" module:"openconfig-system"`
	Role	OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union	`path:"role" module:"openconfig-system"`
	SshKey	*string	`path:"ssh-key" module:"openconfig-system"`
	Username	*string	`path:"username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/config/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication_Users_User_State represents the /openconfig-system/system/aaa/authentication/users/user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State struct {
	Password	*string	`path:"password" module:"openconfig-system"`
	PasswordHashed	*string	`path:"password-hashed" module:"openconfig-system"`
	Role	OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union	`path:"role" module:"openconfig-system"`
	SshKey	*string	`path:"ssh-key" module:"openconfig-system"`
	Username	*string	`path:"username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/state/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization struct {
	Config	*OpenconfigSystem_System_Aaa_Authorization_Config	`path:"config" module:"openconfig-system"`
	Events	*OpenconfigSystem_System_Aaa_Authorization_Events	`path:"events" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authorization_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Config represents the /openconfig-system/system/aaa/authorization/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Config struct {
	AuthorizationMethod	[]OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union	`path:"authorization-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/config/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authorization_Events represents the /openconfig-system/system/aaa/authorization/events YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events struct {
	Event	map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event	`path:"event" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Authorization_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Authorization_Events_Event, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Authorization_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Events_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event struct {
	Config	*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config	`path:"config" module:"openconfig-system"`
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authorization_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config represents the /openconfig-system/system/aaa/authorization/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config struct {
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Events_Event_State represents the /openconfig-system/system/aaa/authorization/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_State struct {
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_State represents the /openconfig-system/system/aaa/authorization/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_State struct {
	AuthorizationMethod	[]OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union	`path:"authorization-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/state/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Config represents the /openconfig-system/system/aaa/config YANG schema element.
type OpenconfigSystem_System_Aaa_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups represents the /openconfig-system/system/aaa/server-groups YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups struct {
	ServerGroup	map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup	`path:"server-group" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// OpenconfigSystem_System_Aaa_ServerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) NewServerGroup(Name string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct {
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config	`path:"config" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Servers	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers	`path:"servers" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config represents the /openconfig-system/system/aaa/server-groups/server-group/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config struct {
	Name	*string	`path:"name" module:"openconfig-system"`
	Type	E_OpenconfigAaaTypes_AAA_SERVER_TYPE	`path:"type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers represents the /openconfig-system/system/aaa/server-groups/server-group/servers YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	Server	map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server	`path:"server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) NewServer(Address string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config	`path:"config" module:"openconfig-system"`
	Radius	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius	`path:"radius" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State	`path:"state" module:"openconfig-system"`
	Tacacs	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs	`path:"tacacs" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	AcctPort	*uint16	`path:"acct-port" module:"openconfig-system"`
	AuthPort	*uint16	`path:"auth-port" module:"openconfig-system"`
	RetransmitAttempts	*uint8	`path:"retransmit-attempts" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	AcctPort	*uint16	`path:"acct-port" module:"openconfig-system"`
	AuthPort	*uint16	`path:"auth-port" module:"openconfig-system"`
	Counters	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters	`path:"counters" module:"openconfig-system"`
	RetransmitAttempts	*uint8	`path:"retransmit-attempts" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	AccessAccepts	*uint64	`path:"access-accepts" module:"openconfig-system"`
	AccessRejects	*uint64	`path:"access-rejects" module:"openconfig-system"`
	RetriedAccessRequests	*uint64	`path:"retried-access-requests" module:"openconfig-system"`
	TimeoutAccessRequests	*uint64	`path:"timeout-access-requests" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	ConnectionAborts	*uint64	`path:"connection-aborts" module:"openconfig-system"`
	ConnectionCloses	*uint64	`path:"connection-closes" module:"openconfig-system"`
	ConnectionFailures	*uint64	`path:"connection-failures" module:"openconfig-system"`
	ConnectionOpens	*uint64	`path:"connection-opens" module:"openconfig-system"`
	ConnectionTimeouts	*uint64	`path:"connection-timeouts" module:"openconfig-system"`
	ErrorsReceived	*uint64	`path:"errors-received" module:"openconfig-system"`
	MessagesReceived	*uint64	`path:"messages-received" module:"openconfig-system"`
	MessagesSent	*uint64	`path:"messages-sent" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	Port	*uint16	`path:"port" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	Port	*uint16	`path:"port" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State represents the /openconfig-system/system/aaa/server-groups/server-group/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State struct {
	Name	*string	`path:"name" module:"openconfig-system"`
	Type	E_OpenconfigAaaTypes_AAA_SERVER_TYPE	`path:"type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_State represents the /openconfig-system/system/aaa/state YANG schema element.
type OpenconfigSystem_System_Aaa_State struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms represents the /openconfig-system/system/alarms YANG schema element.
type OpenconfigSystem_System_Alarms struct {
	Alarm	map[string]*OpenconfigSystem_System_Alarms_Alarm	`path:"alarm" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// OpenconfigSystem_System_Alarms struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Alarms) NewAlarm(Id string) (*OpenconfigSystem_System_Alarms_Alarm, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &OpenconfigSystem_System_Alarms_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm struct {
	Config	*OpenconfigSystem_System_Alarms_Alarm_Config	`path:"config" module:"openconfig-system"`
	Id	*string	`path:"id" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Alarms_Alarm_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Alarms_Alarm struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms_Alarm_Config represents the /openconfig-system/system/alarms/alarm/config YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms_Alarm_State represents the /openconfig-system/system/alarms/alarm/state YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_State struct {
	Id	*string	`path:"id" module:"openconfig-system"`
	Resource	*string	`path:"resource" module:"openconfig-system"`
	Severity	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY	`path:"severity" module:"openconfig-system"`
	Text	*string	`path:"text" module:"openconfig-system"`
	TimeCreated	*uint64	`path:"time-created" module:"openconfig-system"`
	TypeId	OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union	`path:"type-id" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/alarms/alarm/state/type-id within the YANG schema.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface {
	Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union()
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID struct {
	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a string value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {}

// To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union(i interface{}) (OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID{v}, nil
	case string:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
	}
}


// OpenconfigSystem_System_Clock represents the /openconfig-system/system/clock YANG schema element.
type OpenconfigSystem_System_Clock struct {
	Config	*OpenconfigSystem_System_Clock_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Clock_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Clock_Config represents the /openconfig-system/system/clock/config YANG schema element.
type OpenconfigSystem_System_Clock_Config struct {
	TimezoneName	*string	`path:"timezone-name" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Clock_State represents the /openconfig-system/system/clock/state YANG schema element.
type OpenconfigSystem_System_Clock_State struct {
	TimezoneName	*string	`path:"timezone-name" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Config represents the /openconfig-system/system/config YANG schema element.
type OpenconfigSystem_System_Config struct {
	DomainName	*string	`path:"domain-name" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	LoginBanner	*string	`path:"login-banner" module:"openconfig-system"`
	MotdBanner	*string	`path:"motd-banner" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus represents the /openconfig-system/system/cpus YANG schema element.
type OpenconfigSystem_System_Cpus struct {
	Cpu	map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu	`path:"cpu" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus) IsYANGGoStruct() {}

// NewCpu creates a new entry in the Cpu list of the
// OpenconfigSystem_System_Cpus struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Cpus) NewCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) (*OpenconfigSystem_System_Cpus_Cpu, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &OpenconfigSystem_System_Cpus_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu struct {
	Index	OpenconfigSystem_System_Cpus_Cpu_State_Index_Union	`path:"index" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Cpus_Cpu_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Cpus_Cpu struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/cpus/cpu/index within the YANG schema.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface {
	Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union()
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a E_OpenconfigSystem_System_Cpus_Cpu_State_Index value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index struct {
	E_OpenconfigSystem_System_Cpus_Cpu_State_Index	E_OpenconfigSystem_System_Cpus_Cpu_State_Index
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a uint32 value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 struct {
	Uint32	uint32
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}


// OpenconfigSystem_System_Cpus_Cpu_State represents the /openconfig-system/system/cpus/cpu/state YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State struct {
	HardwareInterrupt	*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt	`path:"hardware-interrupt" module:"openconfig-system"`
	Idle	*OpenconfigSystem_System_Cpus_Cpu_State_Idle	`path:"idle" module:"openconfig-system"`
	Index	OpenconfigSystem_System_Cpus_Cpu_State_Index_Union	`path:"index" module:"openconfig-system"`
	Kernel	*OpenconfigSystem_System_Cpus_Cpu_State_Kernel	`path:"kernel" module:"openconfig-system"`
	Nice	*OpenconfigSystem_System_Cpus_Cpu_State_Nice	`path:"nice" module:"openconfig-system"`
	SoftwareInterrupt	*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt	`path:"software-interrupt" module:"openconfig-system"`
	Total	*OpenconfigSystem_System_Cpus_Cpu_State_Total	`path:"total" module:"openconfig-system"`
	User	*OpenconfigSystem_System_Cpus_Cpu_State_User	`path:"user" module:"openconfig-system"`
	Wait	*OpenconfigSystem_System_Cpus_Cpu_State_Wait	`path:"wait" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}


// OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Idle struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Idle) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Kernel struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Kernel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Nice struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Nice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Total struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Total) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_User struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_User) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Wait struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Wait) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns represents the /openconfig-system/system/dns YANG schema element.
type OpenconfigSystem_System_Dns struct {
	Config	*OpenconfigSystem_System_Dns_Config	`path:"config" module:"openconfig-system"`
	HostEntries	*OpenconfigSystem_System_Dns_HostEntries	`path:"host-entries" module:"openconfig-system"`
	Servers	*OpenconfigSystem_System_Dns_Servers	`path:"servers" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Dns_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Config represents the /openconfig-system/system/dns/config YANG schema element.
type OpenconfigSystem_System_Dns_Config struct {
	Search	[]string	`path:"search" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries represents the /openconfig-system/system/dns/host-entries YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries struct {
	HostEntry	map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry	`path:"host-entry" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// OpenconfigSystem_System_Dns_HostEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_HostEntries) NewHostEntry(Hostname string) (*OpenconfigSystem_System_Dns_HostEntries_HostEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &OpenconfigSystem_System_Dns_HostEntries_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry struct {
	Config	*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config	`path:"config" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_HostEntries_HostEntry struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config represents the /openconfig-system/system/dns/host-entries/host-entry/config YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config struct {
	Alias	[]string	`path:"alias" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-system"`
	Ipv6Address	[]string	`path:"ipv6-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries_HostEntry_State represents the /openconfig-system/system/dns/host-entries/host-entry/state YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_State struct {
	Alias	[]string	`path:"alias" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-system"`
	Ipv6Address	[]string	`path:"ipv6-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers represents the /openconfig-system/system/dns/servers YANG schema element.
type OpenconfigSystem_System_Dns_Servers struct {
	Server	map[string]*OpenconfigSystem_System_Dns_Servers_Server	`path:"server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Dns_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_Servers) NewServer(Address string) (*OpenconfigSystem_System_Dns_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Dns_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Dns_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Dns_Servers_Server_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Dns_Servers_Server_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers_Server_Config represents the /openconfig-system/system/dns/servers/server/config YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers_Server_State represents the /openconfig-system/system/dns/servers/server/state YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_State represents the /openconfig-system/system/dns/state YANG schema element.
type OpenconfigSystem_System_Dns_State struct {
	Search	[]string	`path:"search" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_GrpcServer represents the /openconfig-system/system/grpc-server YANG schema element.
type OpenconfigSystem_System_GrpcServer struct {
	Config	*OpenconfigSystem_System_GrpcServer_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_GrpcServer_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_GrpcServer_Config represents the /openconfig-system/system/grpc-server/config YANG schema element.
type OpenconfigSystem_System_GrpcServer_Config struct {
	CertificateId	*string	`path:"certificate-id" module:"openconfig-system"`
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	ListenAddresses	[]OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union	`path:"listen-addresses" module:"openconfig-system"`
	MetadataAuthentication	*bool	`path:"metadata-authentication" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
	TransportSecurity	*bool	`path:"transport-security" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/grpc-server/config/listen-addresses within the YANG schema.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface {
	Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union()
}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is used when /openconfig-system/system/grpc-server/config/listen-addresses
// is to be set to a E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses value.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses struct {
	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
}

// Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
// implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union() {}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String is used when /openconfig-system/system/grpc-server/config/listen-addresses
// is to be set to a string value.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String
// implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String) Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union() {}

// To_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_GrpcServer_Config) To_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union(i interface{}) (OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses:
		return &OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses{v}, nil
	case string:
		return &OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses, string]", i, i)
	}
}


// OpenconfigSystem_System_GrpcServer_State represents the /openconfig-system/system/grpc-server/state YANG schema element.
type OpenconfigSystem_System_GrpcServer_State struct {
	CertificateId	*string	`path:"certificate-id" module:"openconfig-system"`
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	ListenAddresses	[]OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union	`path:"listen-addresses" module:"openconfig-system"`
	MetadataAuthentication	*bool	`path:"metadata-authentication" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
	TransportSecurity	*bool	`path:"transport-security" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/grpc-server/state/listen-addresses within the YANG schema.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface {
	Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union()
}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is used when /openconfig-system/system/grpc-server/state/listen-addresses
// is to be set to a E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses value.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses struct {
	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
}

// Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
// implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union() {}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String is used when /openconfig-system/system/grpc-server/state/listen-addresses
// is to be set to a string value.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String
// implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String) Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union() {}

// To_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_GrpcServer_State) To_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union(i interface{}) (OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses:
		return &OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses{v}, nil
	case string:
		return &OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses, string]", i, i)
	}
}


// OpenconfigSystem_System_License represents the /openconfig-system/system/license YANG schema element.
type OpenconfigSystem_System_License struct {
	Licenses	*OpenconfigSystem_System_License_Licenses	`path:"licenses" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_License_Licenses represents the /openconfig-system/system/license/licenses YANG schema element.
type OpenconfigSystem_System_License_Licenses struct {
	License	map[string]*OpenconfigSystem_System_License_Licenses_License	`path:"license" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// OpenconfigSystem_System_License_Licenses struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_License_Licenses) NewLicense(LicenseId string) (*OpenconfigSystem_System_License_Licenses_License, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*OpenconfigSystem_System_License_Licenses_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &OpenconfigSystem_System_License_Licenses_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_License_Licenses_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type OpenconfigSystem_System_License_Licenses_License struct {
	Config	*OpenconfigSystem_System_License_Licenses_License_Config	`path:"config" module:"openconfig-system"`
	LicenseId	*string	`path:"license-id" module:"openconfig-system"`
	State	*OpenconfigSystem_System_License_Licenses_License_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_License_Licenses_License struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_License_Licenses_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_License_Licenses_License_Config represents the /openconfig-system/system/license/licenses/license/config YANG schema element.
type OpenconfigSystem_System_License_Licenses_License_Config struct {
	Active	*bool	`path:"active" module:"openconfig-system"`
	LicenseData	OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union	`path:"license-data" module:"openconfig-system"`
	LicenseId	*string	`path:"license-id" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/license/licenses/license/config/license-data within the YANG schema.
type OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface {
	Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union()
}

// OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary is used when /openconfig-system/system/license/licenses/license/config/license-data
// is to be set to a Binary value.
type OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary struct {
	Binary	Binary
}

// Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary
// implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary) Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union() {}

// OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String is used when /openconfig-system/system/license/licenses/license/config/license-data
// is to be set to a string value.
type OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String
// implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String) Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union() {}

// To_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) To_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union(i interface{}) (OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary{v}, nil
	case string:
		return &OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}


// OpenconfigSystem_System_License_Licenses_License_State represents the /openconfig-system/system/license/licenses/license/state YANG schema element.
type OpenconfigSystem_System_License_Licenses_License_State struct {
	Active	*bool	`path:"active" module:"openconfig-system"`
	Description	*string	`path:"description" module:"openconfig-system"`
	ExpirationDate	*uint64	`path:"expiration-date" module:"openconfig-system"`
	Expired	*bool	`path:"expired" module:"openconfig-system"`
	InUse	*bool	`path:"in-use" module:"openconfig-system"`
	IssueDate	*uint64	`path:"issue-date" module:"openconfig-system"`
	LicenseData	OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union	`path:"license-data" module:"openconfig-system"`
	LicenseId	*string	`path:"license-id" module:"openconfig-system"`
	Valid	*bool	`path:"valid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/license/licenses/license/state/license-data within the YANG schema.
type OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface {
	Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union()
}

// OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary is used when /openconfig-system/system/license/licenses/license/state/license-data
// is to be set to a Binary value.
type OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary struct {
	Binary	Binary
}

// Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary
// implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary) Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union() {}

// OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String is used when /openconfig-system/system/license/licenses/license/state/license-data
// is to be set to a string value.
type OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String
// implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String) Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union() {}

// To_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_License_Licenses_License_State) To_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union(i interface{}) (OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary{v}, nil
	case string:
		return &OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}


// OpenconfigSystem_System_Logging represents the /openconfig-system/system/logging YANG schema element.
type OpenconfigSystem_System_Logging struct {
	Console	*OpenconfigSystem_System_Logging_Console	`path:"console" module:"openconfig-system"`
	RemoteServers	*OpenconfigSystem_System_Logging_RemoteServers	`path:"remote-servers" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type OpenconfigSystem_System_Logging_Console struct {
	Config	*OpenconfigSystem_System_Logging_Console_Config	`path:"config" module:"openconfig-system"`
	Selectors	*OpenconfigSystem_System_Logging_Console_Selectors	`path:"selectors" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_Console_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Config represents the /openconfig-system/system/logging/console/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors represents the /openconfig-system/system/logging/console/selectors YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors struct {
	Selector	map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector	`path:"selector" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console/selectors.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_Console_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_Console_Selectors_Selector, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_Console_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector struct {
	Config	*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config	`path:"config" module:"openconfig-system"`
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Console_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {


	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config represents the /openconfig-system/system/logging/console/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors_Selector_State represents the /openconfig-system/system/logging/console/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_State struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_State represents the /openconfig-system/system/logging/console/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_State struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers represents the /openconfig-system/system/logging/remote-servers YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers struct {
	RemoteServer	map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer	`path:"remote-server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// OpenconfigSystem_System_Logging_RemoteServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers) NewRemoteServer(Host string) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct {
	Config	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config	`path:"config" module:"openconfig-system"`
	Host	*string	`path:"host" module:"openconfig-system"`
	Selectors	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors	`path:"selectors" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config struct {
	Host	*string	`path:"host" module:"openconfig-system"`
	RemotePort	*uint16	`path:"remote-port" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	Selector	map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector	`path:"selector" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server/selectors.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	Config	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config	`path:"config" module:"openconfig-system"`
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {


	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State represents the /openconfig-system/system/logging/remote-servers/remote-server/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State struct {
	Host	*string	`path:"host" module:"openconfig-system"`
	RemotePort	*uint16	`path:"remote-port" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Memory represents the /openconfig-system/system/memory YANG schema element.
type OpenconfigSystem_System_Memory struct {
	Config	*OpenconfigSystem_System_Memory_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Memory_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Memory_Config represents the /openconfig-system/system/memory/config YANG schema element.
type OpenconfigSystem_System_Memory_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Memory_State represents the /openconfig-system/system/memory/state YANG schema element.
type OpenconfigSystem_System_Memory_State struct {
	Physical	*uint64	`path:"physical" module:"openconfig-system"`
	Reserved	*uint64	`path:"reserved" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages represents the /openconfig-system/system/messages YANG schema element.
type OpenconfigSystem_System_Messages struct {
	Config	*OpenconfigSystem_System_Messages_Config	`path:"config" module:"openconfig-system"`
	DebugEntries	*OpenconfigSystem_System_Messages_DebugEntries	`path:"debug-entries" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Messages_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_Config represents the /openconfig-system/system/messages/config YANG schema element.
type OpenconfigSystem_System_Messages_Config struct {
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries represents the /openconfig-system/system/messages/debug-entries YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries struct {
	DebugService	map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService	`path:"debug-service" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// OpenconfigSystem_System_Messages_DebugEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Messages_DebugEntries) NewDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) (*OpenconfigSystem_System_Messages_DebugEntries_DebugService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &OpenconfigSystem_System_Messages_DebugEntries_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService struct {
	Config	*OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config	`path:"config" module:"openconfig-system"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Messages_DebugEntries_DebugService_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Messages_DebugEntries_DebugService struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config represents the /openconfig-system/system/messages/debug-entries/debug-service/config YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries_DebugService_State represents the /openconfig-system/system/messages/debug-entries/debug-service/state YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService_State struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_State represents the /openconfig-system/system/messages/state YANG schema element.
type OpenconfigSystem_System_Messages_State struct {
	Message	*OpenconfigSystem_System_Messages_State_Message	`path:"message" module:"openconfig-system"`
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_State_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type OpenconfigSystem_System_Messages_State_Message struct {
	AppName	*string	`path:"app-name" module:"openconfig-system"`
	Msg	*string	`path:"msg" module:"openconfig-system"`
	Msgid	*string	`path:"msgid" module:"openconfig-system"`
	Priority	*uint8	`path:"priority" module:"openconfig-system"`
	Procid	*string	`path:"procid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_State_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_State_Message) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State_Message) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_State_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_State_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type OpenconfigSystem_System_Ntp struct {
	Config	*OpenconfigSystem_System_Ntp_Config	`path:"config" module:"openconfig-system"`
	NtpKeys	*OpenconfigSystem_System_Ntp_NtpKeys	`path:"ntp-keys" module:"openconfig-system"`
	Servers	*OpenconfigSystem_System_Ntp_Servers	`path:"servers" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Ntp_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Config represents the /openconfig-system/system/ntp/config YANG schema element.
type OpenconfigSystem_System_Ntp_Config struct {
	EnableNtpAuth	*bool	`path:"enable-ntp-auth" module:"openconfig-system"`
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	NtpSourceAddress	*string	`path:"ntp-source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys represents the /openconfig-system/system/ntp/ntp-keys YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys struct {
	NtpKey	map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey	`path:"ntp-key" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// OpenconfigSystem_System_Ntp_NtpKeys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) NewNtpKey(KeyId uint16) (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct {
	Config	*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config	`path:"config" module:"openconfig-system"`
	KeyId	*uint16	`path:"key-id" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config struct {
	KeyId	*uint16	`path:"key-id" module:"openconfig-system"`
	KeyType	E_OpenconfigSystem_NTP_AUTH_TYPE	`path:"key-type" module:"openconfig-system"`
	KeyValue	*string	`path:"key-value" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State struct {
	KeyId	*uint16	`path:"key-id" module:"openconfig-system"`
	KeyType	E_OpenconfigSystem_NTP_AUTH_TYPE	`path:"key-type" module:"openconfig-system"`
	KeyValue	*string	`path:"key-value" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers represents the /openconfig-system/system/ntp/servers YANG schema element.
type OpenconfigSystem_System_Ntp_Servers struct {
	Server	map[string]*OpenconfigSystem_System_Ntp_Servers_Server	`path:"server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Ntp_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_Servers) NewServer(Address string) (*OpenconfigSystem_System_Ntp_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Ntp_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Ntp_Servers_Server_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Ntp_Servers_Server_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers_Server_Config represents the /openconfig-system/system/ntp/servers/server/config YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	AssociationType	E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType	`path:"association-type" module:"openconfig-system"`
	Iburst	*bool	`path:"iburst" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
	Prefer	*bool	`path:"prefer" module:"openconfig-system"`
	Version	*uint8	`path:"version" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers_Server_State represents the /openconfig-system/system/ntp/servers/server/state YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	AssociationType	E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType	`path:"association-type" module:"openconfig-system"`
	Iburst	*bool	`path:"iburst" module:"openconfig-system"`
	Offset	*uint64	`path:"offset" module:"openconfig-system"`
	PollInterval	*uint32	`path:"poll-interval" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
	Prefer	*bool	`path:"prefer" module:"openconfig-system"`
	RootDelay	*uint32	`path:"root-delay" module:"openconfig-system"`
	RootDispersion	*uint64	`path:"root-dispersion" module:"openconfig-system"`
	Stratum	*uint8	`path:"stratum" module:"openconfig-system"`
	Version	*uint8	`path:"version" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_State represents the /openconfig-system/system/ntp/state YANG schema element.
type OpenconfigSystem_System_Ntp_State struct {
	AuthMismatch	*uint64	`path:"auth-mismatch" module:"openconfig-system"`
	EnableNtpAuth	*bool	`path:"enable-ntp-auth" module:"openconfig-system"`
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	NtpSourceAddress	*string	`path:"ntp-source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow represents the /openconfig-system/system/openflow YANG schema element.
type OpenconfigSystem_System_Openflow struct {
	Agent	*OpenconfigSystem_System_Openflow_Agent	`path:"agent" module:"openconfig-openflow"`
	Controllers	*OpenconfigSystem_System_Openflow_Controllers	`path:"controllers" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Agent represents the /openconfig-system/system/openflow/agent YANG schema element.
type OpenconfigSystem_System_Openflow_Agent struct {
	Config	*OpenconfigSystem_System_Openflow_Agent_Config	`path:"config" module:"openconfig-openflow"`
	State	*OpenconfigSystem_System_Openflow_Agent_State	`path:"state" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Agent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Agent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Agent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Agent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Agent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Agent_Config represents the /openconfig-system/system/openflow/agent/config YANG schema element.
type OpenconfigSystem_System_Openflow_Agent_Config struct {
	BackoffInterval	*uint32	`path:"backoff-interval" module:"openconfig-openflow"`
	DatapathId	*string	`path:"datapath-id" module:"openconfig-openflow"`
	FailureMode	E_OpenconfigOpenflow_FailureMode	`path:"failure-mode" module:"openconfig-openflow"`
	InactivityProbe	*uint32	`path:"inactivity-probe" module:"openconfig-openflow"`
	MaxBackoff	*uint32	`path:"max-backoff" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Agent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Agent_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Agent_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Agent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Agent_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Agent_State represents the /openconfig-system/system/openflow/agent/state YANG schema element.
type OpenconfigSystem_System_Openflow_Agent_State struct {
	BackoffInterval	*uint32	`path:"backoff-interval" module:"openconfig-openflow"`
	DatapathId	*string	`path:"datapath-id" module:"openconfig-openflow"`
	FailureMode	E_OpenconfigOpenflow_FailureMode	`path:"failure-mode" module:"openconfig-openflow"`
	InactivityProbe	*uint32	`path:"inactivity-probe" module:"openconfig-openflow"`
	MaxBackoff	*uint32	`path:"max-backoff" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Agent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Agent_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Agent_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Agent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Agent_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers represents the /openconfig-system/system/openflow/controllers YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers struct {
	Controller	map[string]*OpenconfigSystem_System_Openflow_Controllers_Controller	`path:"controller" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers) IsYANGGoStruct() {}

// NewController creates a new entry in the Controller list of the
// OpenconfigSystem_System_Openflow_Controllers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Openflow_Controllers) NewController(Name string) (*OpenconfigSystem_System_Openflow_Controllers_Controller, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[string]*OpenconfigSystem_System_Openflow_Controllers_Controller)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Controller[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Controller", key)
	}

	t.Controller[key] = &OpenconfigSystem_System_Openflow_Controllers_Controller{
		Name: &Name,
	}

	return t.Controller[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers_Controller represents the /openconfig-system/system/openflow/controllers/controller YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers_Controller struct {
	Config	*OpenconfigSystem_System_Openflow_Controllers_Controller_Config	`path:"config" module:"openconfig-openflow"`
	Connections	*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections	`path:"connections" module:"openconfig-openflow"`
	Name	*string	`path:"name" module:"openconfig-openflow"`
	State	*OpenconfigSystem_System_Openflow_Controllers_Controller_State	`path:"state" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers_Controller implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers_Controller) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Openflow_Controllers_Controller struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers_Controller"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers_Controller_Config represents the /openconfig-system/system/openflow/controllers/controller/config YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers_Controller_Config struct {
	Name	*string	`path:"name" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers_Controller_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers_Controller_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers_Controller_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers_Controller_Connections represents the /openconfig-system/system/openflow/controllers/controller/connections YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers_Controller_Connections struct {
	Connection	map[uint8]*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection	`path:"connection" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers_Controller_Connections implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections) IsYANGGoStruct() {}

// NewConnection creates a new entry in the Connection list of the
// OpenconfigSystem_System_Openflow_Controllers_Controller_Connections struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections) NewConnection(AuxId uint8) (*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Connection == nil {
		t.Connection = make(map[uint8]*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection)
	}

	key := AuxId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Connection[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Connection", key)
	}

	t.Connection[key] = &OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection{
		AuxId: &AuxId,
	}

	return t.Connection[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers_Controller_Connections"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection represents the /openconfig-system/system/openflow/controllers/controller/connections/connection YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection struct {
	AuxId	*uint8	`path:"aux-id" module:"openconfig-openflow"`
	Config	*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config	`path:"config" module:"openconfig-openflow"`
	State	*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State	`path:"state" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AuxId == nil {
		return nil, fmt.Errorf("nil value for key AuxId")
	}

	return map[string]interface{}{
		"aux-id": *t.AuxId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config represents the /openconfig-system/system/openflow/controllers/controller/connections/connection/config YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config struct {
	Address	*string	`path:"address" module:"openconfig-openflow"`
	AuxId	*uint8	`path:"aux-id" module:"openconfig-openflow"`
	CertificateId	*string	`path:"certificate-id" module:"openconfig-openflow"`
	Port	*uint16	`path:"port" module:"openconfig-openflow"`
	Priority	*uint8	`path:"priority" module:"openconfig-openflow"`
	SourceInterface	*string	`path:"source-interface" module:"openconfig-openflow"`
	Transport	E_OpenconfigOpenflow_Transport	`path:"transport" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State represents the /openconfig-system/system/openflow/controllers/controller/connections/connection/state YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State struct {
	Address	*string	`path:"address" module:"openconfig-openflow"`
	AuxId	*uint8	`path:"aux-id" module:"openconfig-openflow"`
	CertificateId	*string	`path:"certificate-id" module:"openconfig-openflow"`
	Connected	*bool	`path:"connected" module:"openconfig-openflow"`
	Port	*uint16	`path:"port" module:"openconfig-openflow"`
	Priority	*uint8	`path:"priority" module:"openconfig-openflow"`
	SourceInterface	*string	`path:"source-interface" module:"openconfig-openflow"`
	Transport	E_OpenconfigOpenflow_Transport	`path:"transport" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_Connections_Connection_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Openflow_Controllers_Controller_State represents the /openconfig-system/system/openflow/controllers/controller/state YANG schema element.
type OpenconfigSystem_System_Openflow_Controllers_Controller_State struct {
	Name	*string	`path:"name" module:"openconfig-openflow"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Openflow_Controllers_Controller_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Openflow_Controllers_Controller_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Openflow_Controllers_Controller_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Openflow_Controllers_Controller_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Processes represents the /openconfig-system/system/processes YANG schema element.
type OpenconfigSystem_System_Processes struct {
	Process	map[uint64]*OpenconfigSystem_System_Processes_Process	`path:"process" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes) IsYANGGoStruct() {}

// NewProcess creates a new entry in the Process list of the
// OpenconfigSystem_System_Processes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Processes) NewProcess(Pid uint64) (*OpenconfigSystem_System_Processes_Process, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &OpenconfigSystem_System_Processes_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Processes_Process represents the /openconfig-system/system/processes/process YANG schema element.
type OpenconfigSystem_System_Processes_Process struct {
	Pid	*uint64	`path:"pid" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Processes_Process_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Processes_Process struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Processes_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Processes_Process_State represents the /openconfig-system/system/processes/process/state YANG schema element.
type OpenconfigSystem_System_Processes_Process_State struct {
	Args	[]string	`path:"args" module:"openconfig-system"`
	CpuUsageSystem	*uint64	`path:"cpu-usage-system" module:"openconfig-system"`
	CpuUsageUser	*uint64	`path:"cpu-usage-user" module:"openconfig-system"`
	CpuUtilization	*uint8	`path:"cpu-utilization" module:"openconfig-system"`
	MemoryUsage	*uint64	`path:"memory-usage" module:"openconfig-system"`
	MemoryUtilization	*uint8	`path:"memory-utilization" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Pid	*uint64	`path:"pid" module:"openconfig-system"`
	StartTime	*uint64	`path:"start-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type OpenconfigSystem_System_SshServer struct {
	Config	*OpenconfigSystem_System_SshServer_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_SshServer_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_SshServer_Config represents the /openconfig-system/system/ssh-server/config YANG schema element.
type OpenconfigSystem_System_SshServer_Config struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	ProtocolVersion	E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion	`path:"protocol-version" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_SshServer_State represents the /openconfig-system/system/ssh-server/state YANG schema element.
type OpenconfigSystem_System_SshServer_State struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	ProtocolVersion	E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion	`path:"protocol-version" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_State represents the /openconfig-system/system/state YANG schema element.
type OpenconfigSystem_System_State struct {
	BootTime	*uint64	`path:"boot-time" module:"openconfig-system"`
	CurrentDatetime	*string	`path:"current-datetime" module:"openconfig-system"`
	DomainName	*string	`path:"domain-name" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	LoginBanner	*string	`path:"login-banner" module:"openconfig-system"`
	MotdBanner	*string	`path:"motd-banner" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type OpenconfigSystem_System_TelnetServer struct {
	Config	*OpenconfigSystem_System_TelnetServer_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_TelnetServer_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_TelnetServer_Config represents the /openconfig-system/system/telnet-server/config YANG schema element.
type OpenconfigSystem_System_TelnetServer_Config struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_TelnetServer_State represents the /openconfig-system/system/telnet-server/state YANG schema element.
type OpenconfigSystem_System_TelnetServer_State struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem represents the /openconfig-telemetry/telemetry-system YANG schema element.
type OpenconfigTelemetry_TelemetrySystem struct {
	DestinationGroups	*OpenconfigTelemetry_TelemetrySystem_DestinationGroups	`path:"destination-groups" module:"openconfig-telemetry"`
	SensorGroups	*OpenconfigTelemetry_TelemetrySystem_SensorGroups	`path:"sensor-groups" module:"openconfig-telemetry"`
	Subscriptions	*OpenconfigTelemetry_TelemetrySystem_Subscriptions	`path:"subscriptions" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups represents the /openconfig-telemetry/telemetry-system/destination-groups YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups struct {
	DestinationGroup	map[string]*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup	`path:"destination-group" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// OpenconfigTelemetry_TelemetrySystem_DestinationGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups) NewDestinationGroup(GroupId string) (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup{
		GroupId: &GroupId,
	}

	return t.DestinationGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup struct {
	Config	*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config	`path:"config" module:"openconfig-telemetry"`
	Destinations	*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations	`path:"destinations" module:"openconfig-telemetry"`
	GroupId	*string	`path:"group-id" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/config YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config struct {
	GroupId	*string	`path:"group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations struct {
	Destination	map[OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Key]*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination	`path:"destination" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) IsYANGGoStruct() {}

// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Key represents the key for list Destination of element /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Key struct {
	DestinationAddress	string	`path:"destination-address"`
	DestinationPort	uint16	`path:"destination-port"`
}

// NewDestination creates a new entry in the Destination list of the
// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) NewDestination(DestinationAddress string, DestinationPort uint16) (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Key]*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination)
	}

	key := OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Key{
		DestinationAddress: DestinationAddress,
		DestinationPort: DestinationPort,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination{
		DestinationAddress: &DestinationAddress,
		DestinationPort: &DestinationPort,
	}

	return t.Destination[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination struct {
	Config	*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config	`path:"config" module:"openconfig-telemetry"`
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-telemetry"`
	DestinationPort	*uint16	`path:"destination-port" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	if t.DestinationPort == nil {
		return nil, fmt.Errorf("nil value for key DestinationPort")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
		"destination-port": *t.DestinationPort,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination/config YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config struct {
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-telemetry"`
	DestinationPort	*uint16	`path:"destination-port" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State struct {
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-telemetry"`
	DestinationPort	*uint16	`path:"destination-port" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State struct {
	GroupId	*string	`path:"group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_DestinationGroups_DestinationGroup_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups represents the /openconfig-telemetry/telemetry-system/sensor-groups YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups struct {
	SensorGroup	map[string]*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup	`path:"sensor-group" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups) IsYANGGoStruct() {}

// NewSensorGroup creates a new entry in the SensorGroup list of the
// OpenconfigTelemetry_TelemetrySystem_SensorGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups) NewSensorGroup(SensorGroupId string) (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup)
	}

	key := SensorGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorGroup", key)
	}

	t.SensorGroup[key] = &OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup{
		SensorGroupId: &SensorGroupId,
	}

	return t.SensorGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup struct {
	Config	*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config	`path:"config" module:"openconfig-telemetry"`
	SensorGroupId	*string	`path:"sensor-group-id" module:"openconfig-telemetry"`
	SensorPaths	*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths	`path:"sensor-paths" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SensorGroupId == nil {
		return nil, fmt.Errorf("nil value for key SensorGroupId")
	}

	return map[string]interface{}{
		"sensor-group-id": *t.SensorGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/config YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config struct {
	SensorGroupId	*string	`path:"sensor-group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths struct {
	SensorPath	map[string]*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath	`path:"sensor-path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) IsYANGGoStruct() {}

// NewSensorPath creates a new entry in the SensorPath list of the
// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) NewSensorPath(Path string) (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorPath", key)
	}

	t.SensorPath[key] = &OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath{
		Path: &Path,
	}

	return t.SensorPath[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath struct {
	Config	*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config	`path:"config" module:"openconfig-telemetry"`
	Path	*string	`path:"path" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"path": *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config struct {
	ExcludeFilter	*string	`path:"exclude-filter" module:"openconfig-telemetry"`
	Path	*string	`path:"path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State struct {
	ExcludeFilter	*string	`path:"exclude-filter" module:"openconfig-telemetry"`
	Path	*string	`path:"path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State struct {
	SensorGroupId	*string	`path:"sensor-group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_SensorGroups_SensorGroup_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions represents the /openconfig-telemetry/telemetry-system/subscriptions YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions struct {
	DynamicSubscriptions	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions	`path:"dynamic-subscriptions" module:"openconfig-telemetry"`
	PersistentSubscriptions	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions	`path:"persistent-subscriptions" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions struct {
	DynamicSubscription	map[uint64]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription	`path:"dynamic-subscription" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions) IsYANGGoStruct() {}

// NewDynamicSubscription creates a new entry in the DynamicSubscription list of the
// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions) NewDynamicSubscription(Id uint64) (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DynamicSubscription == nil {
		t.DynamicSubscription = make(map[uint64]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DynamicSubscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DynamicSubscription", key)
	}

	t.DynamicSubscription[key] = &OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription{
		Id: &Id,
	}

	return t.DynamicSubscription[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription struct {
	Id	*uint64	`path:"id" module:"openconfig-telemetry"`
	SensorPaths	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths	`path:"sensor-paths" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths struct {
	SensorPath	map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath	`path:"sensor-path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) IsYANGGoStruct() {}

// NewSensorPath creates a new entry in the SensorPath list of the
// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) NewSensorPath(Path string) (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorPath", key)
	}

	t.SensorPath[key] = &OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath{
		Path: &Path,
	}

	return t.SensorPath[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath struct {
	Path	*string	`path:"path" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"path": *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State struct {
	ExcludeFilter	*string	`path:"exclude-filter" module:"openconfig-telemetry"`
	Path	*string	`path:"path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_SensorPaths_SensorPath_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State struct {
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-telemetry"`
	DestinationPort	*uint16	`path:"destination-port" module:"openconfig-telemetry"`
	Encoding	E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD	`path:"encoding" module:"openconfig-telemetry"`
	HeartbeatInterval	*uint64	`path:"heartbeat-interval" module:"openconfig-telemetry"`
	Id	*uint64	`path:"id" module:"openconfig-telemetry"`
	OriginatedQosMarking	*uint8	`path:"originated-qos-marking" module:"openconfig-telemetry"`
	Protocol	E_OpenconfigTelemetryTypes_STREAM_PROTOCOL	`path:"protocol" module:"openconfig-telemetry"`
	SampleInterval	*uint64	`path:"sample-interval" module:"openconfig-telemetry"`
	SuppressRedundant	*bool	`path:"suppress-redundant" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_DynamicSubscriptions_DynamicSubscription_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions struct {
	PersistentSubscription	map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription	`path:"persistent-subscription" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions) IsYANGGoStruct() {}

// NewPersistentSubscription creates a new entry in the PersistentSubscription list of the
// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions) NewPersistentSubscription(Name string) (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PersistentSubscription == nil {
		t.PersistentSubscription = make(map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PersistentSubscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PersistentSubscription", key)
	}

	t.PersistentSubscription[key] = &OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription{
		Name: &Name,
	}

	return t.PersistentSubscription[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription struct {
	Config	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config	`path:"config" module:"openconfig-telemetry"`
	DestinationGroups	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups	`path:"destination-groups" module:"openconfig-telemetry"`
	Name	*string	`path:"name" module:"openconfig-telemetry"`
	SensorProfiles	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles	`path:"sensor-profiles" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config struct {
	Encoding	E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD	`path:"encoding" module:"openconfig-telemetry"`
	LocalSourceAddress	*string	`path:"local-source-address" module:"openconfig-telemetry"`
	Name	*string	`path:"name" module:"openconfig-telemetry"`
	OriginatedQosMarking	*uint8	`path:"originated-qos-marking" module:"openconfig-telemetry"`
	Protocol	E_OpenconfigTelemetryTypes_STREAM_PROTOCOL	`path:"protocol" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups struct {
	DestinationGroup	map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup	`path:"destination-group" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) NewDestinationGroup(GroupId string) (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup{
		GroupId: &GroupId,
	}

	return t.DestinationGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup struct {
	Config	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config	`path:"config" module:"openconfig-telemetry"`
	GroupId	*string	`path:"group-id" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group/config YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config struct {
	GroupId	*string	`path:"group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State struct {
	GroupId	*string	`path:"group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_DestinationGroups_DestinationGroup_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles struct {
	SensorProfile	map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile	`path:"sensor-profile" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) IsYANGGoStruct() {}

// NewSensorProfile creates a new entry in the SensorProfile list of the
// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) NewSensorProfile(SensorGroup string) (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorProfile == nil {
		t.SensorProfile = make(map[string]*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile)
	}

	key := SensorGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorProfile", key)
	}

	t.SensorProfile[key] = &OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile{
		SensorGroup: &SensorGroup,
	}

	return t.SensorProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile struct {
	Config	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config	`path:"config" module:"openconfig-telemetry"`
	SensorGroup	*string	`path:"sensor-group" module:"openconfig-telemetry"`
	State	*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State	`path:"state" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile struct, which is a YANG list entry.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SensorGroup == nil {
		return nil, fmt.Errorf("nil value for key SensorGroup")
	}

	return map[string]interface{}{
		"sensor-group": *t.SensorGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config struct {
	HeartbeatInterval	*uint64	`path:"heartbeat-interval" module:"openconfig-telemetry"`
	SampleInterval	*uint64	`path:"sample-interval" module:"openconfig-telemetry"`
	SensorGroup	*string	`path:"sensor-group" module:"openconfig-telemetry"`
	SuppressRedundant	*bool	`path:"suppress-redundant" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State struct {
	HeartbeatInterval	*uint64	`path:"heartbeat-interval" module:"openconfig-telemetry"`
	SampleInterval	*uint64	`path:"sample-interval" module:"openconfig-telemetry"`
	SensorGroup	*string	`path:"sensor-group" module:"openconfig-telemetry"`
	SuppressRedundant	*bool	`path:"suppress-redundant" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_SensorProfiles_SensorProfile_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state YANG schema element.
type OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State struct {
	Encoding	E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD	`path:"encoding" module:"openconfig-telemetry"`
	Id	*uint64	`path:"id" module:"openconfig-telemetry"`
	LocalSourceAddress	*string	`path:"local-source-address" module:"openconfig-telemetry"`
	Name	*string	`path:"name" module:"openconfig-telemetry"`
	OriginatedQosMarking	*uint8	`path:"originated-qos-marking" module:"openconfig-telemetry"`
	Protocol	E_OpenconfigTelemetryTypes_STREAM_PROTOCOL	`path:"protocol" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTelemetry_TelemetrySystem_Subscriptions_PersistentSubscriptions_PersistentSubscription_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Sample_Sample represents the /sample/sample YANG schema element.
type Sample_Sample struct {
	ContainerVal	*Sample_Sample_ContainerVal	`path:"container-val" module:"sample"`
	EmptyVal	YANGEmpty	`path:"empty-val" module:"sample"`
	MultipleKeyList	map[Sample_Sample_MultipleKeyList_Key]*Sample_Sample_MultipleKeyList	`path:"multiple-key-list" module:"sample"`
	SingleKeyList	map[string]*Sample_Sample_SingleKeyList	`path:"single-key-list" module:"sample"`
	StrVal	*string	`path:"str-val" module:"sample"`
}

// IsYANGGoStruct ensures that Sample_Sample implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sample_Sample) IsYANGGoStruct() {}

// Sample_Sample_MultipleKeyList_Key represents the key for list MultipleKeyList of element /sample/sample.
type Sample_Sample_MultipleKeyList_Key struct {
	Str	string	`path:"str"`
	Integer	uint32	`path:"integer"`
}

// NewMultipleKeyList creates a new entry in the MultipleKeyList list of the
// Sample_Sample struct. The keys of the list are populated from the input
// arguments.
func (t *Sample_Sample) NewMultipleKeyList(Str string, Integer uint32) (*Sample_Sample_MultipleKeyList, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultipleKeyList == nil {
		t.MultipleKeyList = make(map[Sample_Sample_MultipleKeyList_Key]*Sample_Sample_MultipleKeyList)
	}

	key := Sample_Sample_MultipleKeyList_Key{
		Str: Str,
		Integer: Integer,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultipleKeyList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultipleKeyList", key)
	}

	t.MultipleKeyList[key] = &Sample_Sample_MultipleKeyList{
		Str: &Str,
		Integer: &Integer,
	}

	return t.MultipleKeyList[key], nil
}

// NewSingleKeyList creates a new entry in the SingleKeyList list of the
// Sample_Sample struct. The keys of the list are populated from the input
// arguments.
func (t *Sample_Sample) NewSingleKeyList(ListKey string) (*Sample_Sample_SingleKeyList, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKeyList == nil {
		t.SingleKeyList = make(map[string]*Sample_Sample_SingleKeyList)
	}

	key := ListKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SingleKeyList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SingleKeyList", key)
	}

	t.SingleKeyList[key] = &Sample_Sample_SingleKeyList{
		ListKey: &ListKey,
	}

	return t.SingleKeyList[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sample_Sample) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sample_Sample"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sample_Sample) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Sample_Sample_ContainerVal represents the /sample/sample/container-val YANG schema element.
type Sample_Sample_ContainerVal struct {
	EnumVal	E_Sample_Sample_ContainerVal_EnumVal	`path:"enum-val" module:"sample"`
	LeafListVal	[]string	`path:"leaf-list-val" module:"sample"`
}

// IsYANGGoStruct ensures that Sample_Sample_ContainerVal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sample_Sample_ContainerVal) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sample_Sample_ContainerVal) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sample_Sample_ContainerVal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sample_Sample_ContainerVal) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Sample_Sample_MultipleKeyList represents the /sample/sample/multiple-key-list YANG schema element.
type Sample_Sample_MultipleKeyList struct {
	Integer	*uint32	`path:"integer" module:"sample"`
	Ok	*bool	`path:"ok" module:"sample"`
	Str	*string	`path:"str" module:"sample"`
}

// IsYANGGoStruct ensures that Sample_Sample_MultipleKeyList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sample_Sample_MultipleKeyList) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Sample_Sample_MultipleKeyList struct, which is a YANG list entry.
func (t *Sample_Sample_MultipleKeyList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Integer == nil {
		return nil, fmt.Errorf("nil value for key Integer")
	}

	if t.Str == nil {
		return nil, fmt.Errorf("nil value for key Str")
	}

	return map[string]interface{}{
		"integer": *t.Integer,
		"str": *t.Str,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sample_Sample_MultipleKeyList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sample_Sample_MultipleKeyList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sample_Sample_MultipleKeyList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Sample_Sample_SingleKeyList represents the /sample/sample/single-key-list YANG schema element.
type Sample_Sample_SingleKeyList struct {
	CountryCode	*string	`path:"country-code" module:"sample"`
	DialCode	*uint32	`path:"dial-code" module:"sample"`
	ListKey	*string	`path:"list-key" module:"sample"`
}

// IsYANGGoStruct ensures that Sample_Sample_SingleKeyList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sample_Sample_SingleKeyList) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Sample_Sample_SingleKeyList struct, which is a YANG list entry.
func (t *Sample_Sample_SingleKeyList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ListKey == nil {
		return nil, fmt.Errorf("nil value for key ListKey")
	}

	return map[string]interface{}{
		"list-key": *t.ListKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sample_Sample_SingleKeyList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sample_Sample_SingleKeyList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sample_Sample_SingleKeyList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
	// IETFInterfaces_InterfaceType_a12MppSwitch corresponds to the value a12MppSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_a12MppSwitch E_IETFInterfaces_InterfaceType = 1
	// IETFInterfaces_InterfaceType_aal2 corresponds to the value aal2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal2 E_IETFInterfaces_InterfaceType = 2
	// IETFInterfaces_InterfaceType_aal5 corresponds to the value aal5 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal5 E_IETFInterfaces_InterfaceType = 3
	// IETFInterfaces_InterfaceType_actelisMetaLOOP corresponds to the value actelisMetaLOOP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_actelisMetaLOOP E_IETFInterfaces_InterfaceType = 4
	// IETFInterfaces_InterfaceType_adsl corresponds to the value adsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl E_IETFInterfaces_InterfaceType = 5
	// IETFInterfaces_InterfaceType_adsl2 corresponds to the value adsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2 E_IETFInterfaces_InterfaceType = 6
	// IETFInterfaces_InterfaceType_adsl2plus corresponds to the value adsl2plus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2plus E_IETFInterfaces_InterfaceType = 7
	// IETFInterfaces_InterfaceType_aflane8023 corresponds to the value aflane8023 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8023 E_IETFInterfaces_InterfaceType = 8
	// IETFInterfaces_InterfaceType_aflane8025 corresponds to the value aflane8025 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8025 E_IETFInterfaces_InterfaceType = 9
	// IETFInterfaces_InterfaceType_aluELP corresponds to the value aluELP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluELP E_IETFInterfaces_InterfaceType = 10
	// IETFInterfaces_InterfaceType_aluEpon corresponds to the value aluEpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEpon E_IETFInterfaces_InterfaceType = 11
	// IETFInterfaces_InterfaceType_aluEponLogicalLink corresponds to the value aluEponLogicalLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponLogicalLink E_IETFInterfaces_InterfaceType = 12
	// IETFInterfaces_InterfaceType_aluEponOnu corresponds to the value aluEponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponOnu E_IETFInterfaces_InterfaceType = 13
	// IETFInterfaces_InterfaceType_aluEponPhysicalUni corresponds to the value aluEponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponPhysicalUni E_IETFInterfaces_InterfaceType = 14
	// IETFInterfaces_InterfaceType_aluGponOnu corresponds to the value aluGponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponOnu E_IETFInterfaces_InterfaceType = 15
	// IETFInterfaces_InterfaceType_aluGponPhysicalUni corresponds to the value aluGponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponPhysicalUni E_IETFInterfaces_InterfaceType = 16
	// IETFInterfaces_InterfaceType_arap corresponds to the value arap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arap E_IETFInterfaces_InterfaceType = 17
	// IETFInterfaces_InterfaceType_arcnet corresponds to the value arcnet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnet E_IETFInterfaces_InterfaceType = 18
	// IETFInterfaces_InterfaceType_arcnetPlus corresponds to the value arcnetPlus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnetPlus E_IETFInterfaces_InterfaceType = 19
	// IETFInterfaces_InterfaceType_async corresponds to the value async of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_async E_IETFInterfaces_InterfaceType = 20
	// IETFInterfaces_InterfaceType_atm corresponds to the value atm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atm E_IETFInterfaces_InterfaceType = 21
	// IETFInterfaces_InterfaceType_atmDxi corresponds to the value atmDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmDxi E_IETFInterfaces_InterfaceType = 22
	// IETFInterfaces_InterfaceType_atmFuni corresponds to the value atmFuni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmFuni E_IETFInterfaces_InterfaceType = 23
	// IETFInterfaces_InterfaceType_atmIma corresponds to the value atmIma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmIma E_IETFInterfaces_InterfaceType = 24
	// IETFInterfaces_InterfaceType_atmLogical corresponds to the value atmLogical of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmLogical E_IETFInterfaces_InterfaceType = 25
	// IETFInterfaces_InterfaceType_atmRadio corresponds to the value atmRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmRadio E_IETFInterfaces_InterfaceType = 26
	// IETFInterfaces_InterfaceType_atmSubInterface corresponds to the value atmSubInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmSubInterface E_IETFInterfaces_InterfaceType = 27
	// IETFInterfaces_InterfaceType_atmVciEndPt corresponds to the value atmVciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVciEndPt E_IETFInterfaces_InterfaceType = 28
	// IETFInterfaces_InterfaceType_atmVirtual corresponds to the value atmVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVirtual E_IETFInterfaces_InterfaceType = 29
	// IETFInterfaces_InterfaceType_atmbond corresponds to the value atmbond of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmbond E_IETFInterfaces_InterfaceType = 30
	// IETFInterfaces_InterfaceType_aviciOpticalEther corresponds to the value aviciOpticalEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aviciOpticalEther E_IETFInterfaces_InterfaceType = 31
	// IETFInterfaces_InterfaceType_basicISDN corresponds to the value basicISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_basicISDN E_IETFInterfaces_InterfaceType = 32
	// IETFInterfaces_InterfaceType_bgppolicyaccounting corresponds to the value bgppolicyaccounting of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bgppolicyaccounting E_IETFInterfaces_InterfaceType = 33
	// IETFInterfaces_InterfaceType_bits corresponds to the value bits of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bits E_IETFInterfaces_InterfaceType = 34
	// IETFInterfaces_InterfaceType_bridge corresponds to the value bridge of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bridge E_IETFInterfaces_InterfaceType = 35
	// IETFInterfaces_InterfaceType_bsc corresponds to the value bsc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bsc E_IETFInterfaces_InterfaceType = 36
	// IETFInterfaces_InterfaceType_cableDownstreamRfPort corresponds to the value cableDownstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cableDownstreamRfPort E_IETFInterfaces_InterfaceType = 37
	// IETFInterfaces_InterfaceType_capwapDot11Bss corresponds to the value capwapDot11Bss of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Bss E_IETFInterfaces_InterfaceType = 38
	// IETFInterfaces_InterfaceType_capwapDot11Profile corresponds to the value capwapDot11Profile of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Profile E_IETFInterfaces_InterfaceType = 39
	// IETFInterfaces_InterfaceType_capwapWtpVirtualRadio corresponds to the value capwapWtpVirtualRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapWtpVirtualRadio E_IETFInterfaces_InterfaceType = 40
	// IETFInterfaces_InterfaceType_cblVectaStar corresponds to the value cblVectaStar of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cblVectaStar E_IETFInterfaces_InterfaceType = 41
	// IETFInterfaces_InterfaceType_cctEmul corresponds to the value cctEmul of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cctEmul E_IETFInterfaces_InterfaceType = 42
	// IETFInterfaces_InterfaceType_ces corresponds to the value ces of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ces E_IETFInterfaces_InterfaceType = 43
	// IETFInterfaces_InterfaceType_channel corresponds to the value channel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_channel E_IETFInterfaces_InterfaceType = 44
	// IETFInterfaces_InterfaceType_ciscoISLvlan corresponds to the value ciscoISLvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ciscoISLvlan E_IETFInterfaces_InterfaceType = 45
	// IETFInterfaces_InterfaceType_cnr corresponds to the value cnr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cnr E_IETFInterfaces_InterfaceType = 46
	// IETFInterfaces_InterfaceType_coffee corresponds to the value coffee of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_coffee E_IETFInterfaces_InterfaceType = 47
	// IETFInterfaces_InterfaceType_compositeLink corresponds to the value compositeLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_compositeLink E_IETFInterfaces_InterfaceType = 48
	// IETFInterfaces_InterfaceType_dcn corresponds to the value dcn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dcn E_IETFInterfaces_InterfaceType = 49
	// IETFInterfaces_InterfaceType_ddnX25 corresponds to the value ddnX25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ddnX25 E_IETFInterfaces_InterfaceType = 50
	// IETFInterfaces_InterfaceType_digitalPowerline corresponds to the value digitalPowerline of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalPowerline E_IETFInterfaces_InterfaceType = 51
	// IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel corresponds to the value digitalWrapperOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel E_IETFInterfaces_InterfaceType = 52
	// IETFInterfaces_InterfaceType_dlsw corresponds to the value dlsw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dlsw E_IETFInterfaces_InterfaceType = 53
	// IETFInterfaces_InterfaceType_docsCableDownstream corresponds to the value docsCableDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableDownstream E_IETFInterfaces_InterfaceType = 54
	// IETFInterfaces_InterfaceType_docsCableMCmtsDownstream corresponds to the value docsCableMCmtsDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMCmtsDownstream E_IETFInterfaces_InterfaceType = 55
	// IETFInterfaces_InterfaceType_docsCableMaclayer corresponds to the value docsCableMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMaclayer E_IETFInterfaces_InterfaceType = 56
	// IETFInterfaces_InterfaceType_docsCableNdf corresponds to the value docsCableNdf of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableNdf E_IETFInterfaces_InterfaceType = 57
	// IETFInterfaces_InterfaceType_docsCableNdr corresponds to the value docsCableNdr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableNdr E_IETFInterfaces_InterfaceType = 58
	// IETFInterfaces_InterfaceType_docsCableScte55d1FwdOob corresponds to the value docsCableScte55d1FwdOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d1FwdOob E_IETFInterfaces_InterfaceType = 59
	// IETFInterfaces_InterfaceType_docsCableScte55d1RetOob corresponds to the value docsCableScte55d1RetOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d1RetOob E_IETFInterfaces_InterfaceType = 60
	// IETFInterfaces_InterfaceType_docsCableScte55d2DsOob corresponds to the value docsCableScte55d2DsOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d2DsOob E_IETFInterfaces_InterfaceType = 61
	// IETFInterfaces_InterfaceType_docsCableScte55d2UsOob corresponds to the value docsCableScte55d2UsOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d2UsOob E_IETFInterfaces_InterfaceType = 62
	// IETFInterfaces_InterfaceType_docsCableUpstream corresponds to the value docsCableUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstream E_IETFInterfaces_InterfaceType = 63
	// IETFInterfaces_InterfaceType_docsCableUpstreamChannel corresponds to the value docsCableUpstreamChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamChannel E_IETFInterfaces_InterfaceType = 64
	// IETFInterfaces_InterfaceType_docsCableUpstreamRfPort corresponds to the value docsCableUpstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamRfPort E_IETFInterfaces_InterfaceType = 65
	// IETFInterfaces_InterfaceType_docsOfdmDownstream corresponds to the value docsOfdmDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsOfdmDownstream E_IETFInterfaces_InterfaceType = 66
	// IETFInterfaces_InterfaceType_docsOfdmaUpstream corresponds to the value docsOfdmaUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsOfdmaUpstream E_IETFInterfaces_InterfaceType = 67
	// IETFInterfaces_InterfaceType_ds0 corresponds to the value ds0 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0 E_IETFInterfaces_InterfaceType = 68
	// IETFInterfaces_InterfaceType_ds0Bundle corresponds to the value ds0Bundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0Bundle E_IETFInterfaces_InterfaceType = 69
	// IETFInterfaces_InterfaceType_ds1 corresponds to the value ds1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1 E_IETFInterfaces_InterfaceType = 70
	// IETFInterfaces_InterfaceType_ds1FDL corresponds to the value ds1FDL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1FDL E_IETFInterfaces_InterfaceType = 71
	// IETFInterfaces_InterfaceType_ds3 corresponds to the value ds3 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds3 E_IETFInterfaces_InterfaceType = 72
	// IETFInterfaces_InterfaceType_dtm corresponds to the value dtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dtm E_IETFInterfaces_InterfaceType = 73
	// IETFInterfaces_InterfaceType_dvbAsiIn corresponds to the value dvbAsiIn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiIn E_IETFInterfaces_InterfaceType = 74
	// IETFInterfaces_InterfaceType_dvbAsiOut corresponds to the value dvbAsiOut of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiOut E_IETFInterfaces_InterfaceType = 75
	// IETFInterfaces_InterfaceType_dvbRccDownstream corresponds to the value dvbRccDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccDownstream E_IETFInterfaces_InterfaceType = 76
	// IETFInterfaces_InterfaceType_dvbRccMacLayer corresponds to the value dvbRccMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccMacLayer E_IETFInterfaces_InterfaceType = 77
	// IETFInterfaces_InterfaceType_dvbRccUpstream corresponds to the value dvbRccUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccUpstream E_IETFInterfaces_InterfaceType = 78
	// IETFInterfaces_InterfaceType_dvbRcsMacLayer corresponds to the value dvbRcsMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsMacLayer E_IETFInterfaces_InterfaceType = 79
	// IETFInterfaces_InterfaceType_dvbRcsTdma corresponds to the value dvbRcsTdma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsTdma E_IETFInterfaces_InterfaceType = 80
	// IETFInterfaces_InterfaceType_dvbTdm corresponds to the value dvbTdm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbTdm E_IETFInterfaces_InterfaceType = 81
	// IETFInterfaces_InterfaceType_e1 corresponds to the value e1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_e1 E_IETFInterfaces_InterfaceType = 82
	// IETFInterfaces_InterfaceType_econet corresponds to the value econet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_econet E_IETFInterfaces_InterfaceType = 83
	// IETFInterfaces_InterfaceType_eon corresponds to the value eon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eon E_IETFInterfaces_InterfaceType = 84
	// IETFInterfaces_InterfaceType_eplrs corresponds to the value eplrs of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eplrs E_IETFInterfaces_InterfaceType = 85
	// IETFInterfaces_InterfaceType_escon corresponds to the value escon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_escon E_IETFInterfaces_InterfaceType = 86
	// IETFInterfaces_InterfaceType_ethernet3Mbit corresponds to the value ethernet3Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernet3Mbit E_IETFInterfaces_InterfaceType = 87
	// IETFInterfaces_InterfaceType_ethernetCsmacd corresponds to the value ethernetCsmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernetCsmacd E_IETFInterfaces_InterfaceType = 88
	// IETFInterfaces_InterfaceType_fast corresponds to the value fast of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fast E_IETFInterfaces_InterfaceType = 89
	// IETFInterfaces_InterfaceType_fastEther corresponds to the value fastEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEther E_IETFInterfaces_InterfaceType = 90
	// IETFInterfaces_InterfaceType_fastEtherFX corresponds to the value fastEtherFX of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEtherFX E_IETFInterfaces_InterfaceType = 91
	// IETFInterfaces_InterfaceType_fastdsl corresponds to the value fastdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastdsl E_IETFInterfaces_InterfaceType = 92
	// IETFInterfaces_InterfaceType_fcipLink corresponds to the value fcipLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fcipLink E_IETFInterfaces_InterfaceType = 93
	// IETFInterfaces_InterfaceType_fddi corresponds to the value fddi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fddi E_IETFInterfaces_InterfaceType = 94
	// IETFInterfaces_InterfaceType_fibreChannel corresponds to the value fibreChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fibreChannel E_IETFInterfaces_InterfaceType = 95
	// IETFInterfaces_InterfaceType_frDlciEndPt corresponds to the value frDlciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frDlciEndPt E_IETFInterfaces_InterfaceType = 96
	// IETFInterfaces_InterfaceType_frForward corresponds to the value frForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frForward E_IETFInterfaces_InterfaceType = 97
	// IETFInterfaces_InterfaceType_frameRelay corresponds to the value frameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelay E_IETFInterfaces_InterfaceType = 98
	// IETFInterfaces_InterfaceType_frameRelayInterconnect corresponds to the value frameRelayInterconnect of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayInterconnect E_IETFInterfaces_InterfaceType = 99
	// IETFInterfaces_InterfaceType_frameRelayMPI corresponds to the value frameRelayMPI of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayMPI E_IETFInterfaces_InterfaceType = 100
	// IETFInterfaces_InterfaceType_frameRelayService corresponds to the value frameRelayService of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayService E_IETFInterfaces_InterfaceType = 101
	// IETFInterfaces_InterfaceType_frf16MfrBundle corresponds to the value frf16MfrBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frf16MfrBundle E_IETFInterfaces_InterfaceType = 102
	// IETFInterfaces_InterfaceType_g703at2mb corresponds to the value g703at2mb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at2mb E_IETFInterfaces_InterfaceType = 103
	// IETFInterfaces_InterfaceType_g703at64k corresponds to the value g703at64k of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at64k E_IETFInterfaces_InterfaceType = 104
	// IETFInterfaces_InterfaceType_g9981 corresponds to the value g9981 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9981 E_IETFInterfaces_InterfaceType = 105
	// IETFInterfaces_InterfaceType_g9982 corresponds to the value g9982 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9982 E_IETFInterfaces_InterfaceType = 106
	// IETFInterfaces_InterfaceType_g9983 corresponds to the value g9983 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9983 E_IETFInterfaces_InterfaceType = 107
	// IETFInterfaces_InterfaceType_gfast corresponds to the value gfast of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gfast E_IETFInterfaces_InterfaceType = 108
	// IETFInterfaces_InterfaceType_gfp corresponds to the value gfp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gfp E_IETFInterfaces_InterfaceType = 109
	// IETFInterfaces_InterfaceType_gigabitEthernet corresponds to the value gigabitEthernet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gigabitEthernet E_IETFInterfaces_InterfaceType = 110
	// IETFInterfaces_InterfaceType_gpon corresponds to the value gpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gpon E_IETFInterfaces_InterfaceType = 111
	// IETFInterfaces_InterfaceType_gr303IDT corresponds to the value gr303IDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303IDT E_IETFInterfaces_InterfaceType = 112
	// IETFInterfaces_InterfaceType_gr303RDT corresponds to the value gr303RDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303RDT E_IETFInterfaces_InterfaceType = 113
	// IETFInterfaces_InterfaceType_gtp corresponds to the value gtp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gtp E_IETFInterfaces_InterfaceType = 114
	// IETFInterfaces_InterfaceType_h323Gatekeeper corresponds to the value h323Gatekeeper of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Gatekeeper E_IETFInterfaces_InterfaceType = 115
	// IETFInterfaces_InterfaceType_h323Proxy corresponds to the value h323Proxy of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Proxy E_IETFInterfaces_InterfaceType = 116
	// IETFInterfaces_InterfaceType_hdh1822 corresponds to the value hdh1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdh1822 E_IETFInterfaces_InterfaceType = 117
	// IETFInterfaces_InterfaceType_hdlc corresponds to the value hdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdlc E_IETFInterfaces_InterfaceType = 118
	// IETFInterfaces_InterfaceType_hdsl2 corresponds to the value hdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdsl2 E_IETFInterfaces_InterfaceType = 119
	// IETFInterfaces_InterfaceType_hiperlan2 corresponds to the value hiperlan2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hiperlan2 E_IETFInterfaces_InterfaceType = 120
	// IETFInterfaces_InterfaceType_hippi corresponds to the value hippi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippi E_IETFInterfaces_InterfaceType = 121
	// IETFInterfaces_InterfaceType_hippiInterface corresponds to the value hippiInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippiInterface E_IETFInterfaces_InterfaceType = 122
	// IETFInterfaces_InterfaceType_homepna corresponds to the value homepna of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_homepna E_IETFInterfaces_InterfaceType = 123
	// IETFInterfaces_InterfaceType_hostPad corresponds to the value hostPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hostPad E_IETFInterfaces_InterfaceType = 124
	// IETFInterfaces_InterfaceType_hssi corresponds to the value hssi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hssi E_IETFInterfaces_InterfaceType = 125
	// IETFInterfaces_InterfaceType_hyperchannel corresponds to the value hyperchannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hyperchannel E_IETFInterfaces_InterfaceType = 126
	// IETFInterfaces_InterfaceType_iana_interface_type corresponds to the value iana_interface_type of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iana_interface_type E_IETFInterfaces_InterfaceType = 127
	// IETFInterfaces_InterfaceType_ibm370parChan corresponds to the value ibm370parChan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ibm370parChan E_IETFInterfaces_InterfaceType = 128
	// IETFInterfaces_InterfaceType_idsl corresponds to the value idsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_idsl E_IETFInterfaces_InterfaceType = 129
	// IETFInterfaces_InterfaceType_ieee1394 corresponds to the value ieee1394 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee1394 E_IETFInterfaces_InterfaceType = 130
	// IETFInterfaces_InterfaceType_ieee80211 corresponds to the value ieee80211 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80211 E_IETFInterfaces_InterfaceType = 131
	// IETFInterfaces_InterfaceType_ieee80212 corresponds to the value ieee80212 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80212 E_IETFInterfaces_InterfaceType = 132
	// IETFInterfaces_InterfaceType_ieee802154 corresponds to the value ieee802154 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee802154 E_IETFInterfaces_InterfaceType = 133
	// IETFInterfaces_InterfaceType_ieee80216WMAN corresponds to the value ieee80216WMAN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80216WMAN E_IETFInterfaces_InterfaceType = 134
	// IETFInterfaces_InterfaceType_ieee8023adLag corresponds to the value ieee8023adLag of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee8023adLag E_IETFInterfaces_InterfaceType = 135
	// IETFInterfaces_InterfaceType_if_gsn corresponds to the value if_gsn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_if_gsn E_IETFInterfaces_InterfaceType = 136
	// IETFInterfaces_InterfaceType_ifPwType corresponds to the value ifPwType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifPwType E_IETFInterfaces_InterfaceType = 137
	// IETFInterfaces_InterfaceType_ifVfiType corresponds to the value ifVfiType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifVfiType E_IETFInterfaces_InterfaceType = 138
	// IETFInterfaces_InterfaceType_ilan corresponds to the value ilan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ilan E_IETFInterfaces_InterfaceType = 139
	// IETFInterfaces_InterfaceType_imt corresponds to the value imt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_imt E_IETFInterfaces_InterfaceType = 140
	// IETFInterfaces_InterfaceType_infiniband corresponds to the value infiniband of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_infiniband E_IETFInterfaces_InterfaceType = 141
	// IETFInterfaces_InterfaceType_interleave corresponds to the value interleave of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_interleave E_IETFInterfaces_InterfaceType = 142
	// IETFInterfaces_InterfaceType_ip corresponds to the value ip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ip E_IETFInterfaces_InterfaceType = 143
	// IETFInterfaces_InterfaceType_ipForward corresponds to the value ipForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipForward E_IETFInterfaces_InterfaceType = 144
	// IETFInterfaces_InterfaceType_ipOverAtm corresponds to the value ipOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverAtm E_IETFInterfaces_InterfaceType = 145
	// IETFInterfaces_InterfaceType_ipOverCdlc corresponds to the value ipOverCdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverCdlc E_IETFInterfaces_InterfaceType = 146
	// IETFInterfaces_InterfaceType_ipOverClaw corresponds to the value ipOverClaw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverClaw E_IETFInterfaces_InterfaceType = 147
	// IETFInterfaces_InterfaceType_ipSwitch corresponds to the value ipSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipSwitch E_IETFInterfaces_InterfaceType = 148
	// IETFInterfaces_InterfaceType_isdn corresponds to the value isdn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdn E_IETFInterfaces_InterfaceType = 149
	// IETFInterfaces_InterfaceType_isdns corresponds to the value isdns of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdns E_IETFInterfaces_InterfaceType = 150
	// IETFInterfaces_InterfaceType_isdnu corresponds to the value isdnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdnu E_IETFInterfaces_InterfaceType = 151
	// IETFInterfaces_InterfaceType_iso88022llc corresponds to the value iso88022llc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88022llc E_IETFInterfaces_InterfaceType = 152
	// IETFInterfaces_InterfaceType_iso88023Csmacd corresponds to the value iso88023Csmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88023Csmacd E_IETFInterfaces_InterfaceType = 153
	// IETFInterfaces_InterfaceType_iso88024TokenBus corresponds to the value iso88024TokenBus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88024TokenBus E_IETFInterfaces_InterfaceType = 154
	// IETFInterfaces_InterfaceType_iso88025CRFPInt corresponds to the value iso88025CRFPInt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025CRFPInt E_IETFInterfaces_InterfaceType = 155
	// IETFInterfaces_InterfaceType_iso88025Dtr corresponds to the value iso88025Dtr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Dtr E_IETFInterfaces_InterfaceType = 156
	// IETFInterfaces_InterfaceType_iso88025Fiber corresponds to the value iso88025Fiber of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Fiber E_IETFInterfaces_InterfaceType = 157
	// IETFInterfaces_InterfaceType_iso88025TokenRing corresponds to the value iso88025TokenRing of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025TokenRing E_IETFInterfaces_InterfaceType = 158
	// IETFInterfaces_InterfaceType_iso88026Man corresponds to the value iso88026Man of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88026Man E_IETFInterfaces_InterfaceType = 159
	// IETFInterfaces_InterfaceType_isup corresponds to the value isup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isup E_IETFInterfaces_InterfaceType = 160
	// IETFInterfaces_InterfaceType_l2vlan corresponds to the value l2vlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l2vlan E_IETFInterfaces_InterfaceType = 161
	// IETFInterfaces_InterfaceType_l3ipvlan corresponds to the value l3ipvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipvlan E_IETFInterfaces_InterfaceType = 162
	// IETFInterfaces_InterfaceType_l3ipxvlan corresponds to the value l3ipxvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipxvlan E_IETFInterfaces_InterfaceType = 163
	// IETFInterfaces_InterfaceType_lapb corresponds to the value lapb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapb E_IETFInterfaces_InterfaceType = 164
	// IETFInterfaces_InterfaceType_lapd corresponds to the value lapd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapd E_IETFInterfaces_InterfaceType = 165
	// IETFInterfaces_InterfaceType_lapf corresponds to the value lapf of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapf E_IETFInterfaces_InterfaceType = 166
	// IETFInterfaces_InterfaceType_linegroup corresponds to the value linegroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_linegroup E_IETFInterfaces_InterfaceType = 167
	// IETFInterfaces_InterfaceType_lmp corresponds to the value lmp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lmp E_IETFInterfaces_InterfaceType = 168
	// IETFInterfaces_InterfaceType_localTalk corresponds to the value localTalk of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_localTalk E_IETFInterfaces_InterfaceType = 169
	// IETFInterfaces_InterfaceType_macSecControlledIF corresponds to the value macSecControlledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecControlledIF E_IETFInterfaces_InterfaceType = 170
	// IETFInterfaces_InterfaceType_macSecUncontrolledIF corresponds to the value macSecUncontrolledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecUncontrolledIF E_IETFInterfaces_InterfaceType = 171
	// IETFInterfaces_InterfaceType_mediaMailOverIp corresponds to the value mediaMailOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mediaMailOverIp E_IETFInterfaces_InterfaceType = 172
	// IETFInterfaces_InterfaceType_mfSigLink corresponds to the value mfSigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mfSigLink E_IETFInterfaces_InterfaceType = 173
	// IETFInterfaces_InterfaceType_miox25 corresponds to the value miox25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_miox25 E_IETFInterfaces_InterfaceType = 174
	// IETFInterfaces_InterfaceType_mocaVersion1 corresponds to the value mocaVersion1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mocaVersion1 E_IETFInterfaces_InterfaceType = 175
	// IETFInterfaces_InterfaceType_modem corresponds to the value modem of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_modem E_IETFInterfaces_InterfaceType = 176
	// IETFInterfaces_InterfaceType_mpc corresponds to the value mpc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpc E_IETFInterfaces_InterfaceType = 177
	// IETFInterfaces_InterfaceType_mpegTransport corresponds to the value mpegTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpegTransport E_IETFInterfaces_InterfaceType = 178
	// IETFInterfaces_InterfaceType_mpls corresponds to the value mpls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpls E_IETFInterfaces_InterfaceType = 179
	// IETFInterfaces_InterfaceType_mplsTunnel corresponds to the value mplsTunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mplsTunnel E_IETFInterfaces_InterfaceType = 180
	// IETFInterfaces_InterfaceType_msdsl corresponds to the value msdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_msdsl E_IETFInterfaces_InterfaceType = 181
	// IETFInterfaces_InterfaceType_mvl corresponds to the value mvl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mvl E_IETFInterfaces_InterfaceType = 182
	// IETFInterfaces_InterfaceType_myrinet corresponds to the value myrinet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_myrinet E_IETFInterfaces_InterfaceType = 183
	// IETFInterfaces_InterfaceType_nfas corresponds to the value nfas of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nfas E_IETFInterfaces_InterfaceType = 184
	// IETFInterfaces_InterfaceType_nsip corresponds to the value nsip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nsip E_IETFInterfaces_InterfaceType = 185
	// IETFInterfaces_InterfaceType_opticalChannel corresponds to the value opticalChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannel E_IETFInterfaces_InterfaceType = 186
	// IETFInterfaces_InterfaceType_opticalChannelGroup corresponds to the value opticalChannelGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannelGroup E_IETFInterfaces_InterfaceType = 187
	// IETFInterfaces_InterfaceType_opticalTransport corresponds to the value opticalTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalTransport E_IETFInterfaces_InterfaceType = 188
	// IETFInterfaces_InterfaceType_other corresponds to the value other of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_other E_IETFInterfaces_InterfaceType = 189
	// IETFInterfaces_InterfaceType_otnOdu corresponds to the value otnOdu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOdu E_IETFInterfaces_InterfaceType = 190
	// IETFInterfaces_InterfaceType_otnOtu corresponds to the value otnOtu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOtu E_IETFInterfaces_InterfaceType = 191
	// IETFInterfaces_InterfaceType_para corresponds to the value para of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_para E_IETFInterfaces_InterfaceType = 192
	// IETFInterfaces_InterfaceType_pdnEtherLoop1 corresponds to the value pdnEtherLoop1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop1 E_IETFInterfaces_InterfaceType = 193
	// IETFInterfaces_InterfaceType_pdnEtherLoop2 corresponds to the value pdnEtherLoop2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop2 E_IETFInterfaces_InterfaceType = 194
	// IETFInterfaces_InterfaceType_pip corresponds to the value pip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pip E_IETFInterfaces_InterfaceType = 195
	// IETFInterfaces_InterfaceType_plc corresponds to the value plc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_plc E_IETFInterfaces_InterfaceType = 196
	// IETFInterfaces_InterfaceType_pon155 corresponds to the value pon155 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon155 E_IETFInterfaces_InterfaceType = 197
	// IETFInterfaces_InterfaceType_pon622 corresponds to the value pon622 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon622 E_IETFInterfaces_InterfaceType = 198
	// IETFInterfaces_InterfaceType_pos corresponds to the value pos of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pos E_IETFInterfaces_InterfaceType = 199
	// IETFInterfaces_InterfaceType_ppp corresponds to the value ppp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ppp E_IETFInterfaces_InterfaceType = 200
	// IETFInterfaces_InterfaceType_pppMultilinkBundle corresponds to the value pppMultilinkBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pppMultilinkBundle E_IETFInterfaces_InterfaceType = 201
	// IETFInterfaces_InterfaceType_primaryISDN corresponds to the value primaryISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_primaryISDN E_IETFInterfaces_InterfaceType = 202
	// IETFInterfaces_InterfaceType_propAtm corresponds to the value propAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propAtm E_IETFInterfaces_InterfaceType = 203
	// IETFInterfaces_InterfaceType_propBWAp2Mp corresponds to the value propBWAp2Mp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propBWAp2Mp E_IETFInterfaces_InterfaceType = 204
	// IETFInterfaces_InterfaceType_propCnls corresponds to the value propCnls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propCnls E_IETFInterfaces_InterfaceType = 205
	// IETFInterfaces_InterfaceType_propDocsWirelessDownstream corresponds to the value propDocsWirelessDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessDownstream E_IETFInterfaces_InterfaceType = 206
	// IETFInterfaces_InterfaceType_propDocsWirelessMaclayer corresponds to the value propDocsWirelessMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessMaclayer E_IETFInterfaces_InterfaceType = 207
	// IETFInterfaces_InterfaceType_propDocsWirelessUpstream corresponds to the value propDocsWirelessUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessUpstream E_IETFInterfaces_InterfaceType = 208
	// IETFInterfaces_InterfaceType_propMultiplexor corresponds to the value propMultiplexor of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propMultiplexor E_IETFInterfaces_InterfaceType = 209
	// IETFInterfaces_InterfaceType_propPointToPointSerial corresponds to the value propPointToPointSerial of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propPointToPointSerial E_IETFInterfaces_InterfaceType = 210
	// IETFInterfaces_InterfaceType_propVirtual corresponds to the value propVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propVirtual E_IETFInterfaces_InterfaceType = 211
	// IETFInterfaces_InterfaceType_propWirelessP2P corresponds to the value propWirelessP2P of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propWirelessP2P E_IETFInterfaces_InterfaceType = 212
	// IETFInterfaces_InterfaceType_proteon10Mbit corresponds to the value proteon10Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon10Mbit E_IETFInterfaces_InterfaceType = 213
	// IETFInterfaces_InterfaceType_proteon80Mbit corresponds to the value proteon80Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon80Mbit E_IETFInterfaces_InterfaceType = 214
	// IETFInterfaces_InterfaceType_ptm corresponds to the value ptm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ptm E_IETFInterfaces_InterfaceType = 215
	// IETFInterfaces_InterfaceType_q2931 corresponds to the value q2931 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_q2931 E_IETFInterfaces_InterfaceType = 216
	// IETFInterfaces_InterfaceType_qam corresponds to the value qam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qam E_IETFInterfaces_InterfaceType = 217
	// IETFInterfaces_InterfaceType_qllc corresponds to the value qllc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qllc E_IETFInterfaces_InterfaceType = 218
	// IETFInterfaces_InterfaceType_radioMAC corresponds to the value radioMAC of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radioMAC E_IETFInterfaces_InterfaceType = 219
	// IETFInterfaces_InterfaceType_radsl corresponds to the value radsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radsl E_IETFInterfaces_InterfaceType = 220
	// IETFInterfaces_InterfaceType_reachDSL corresponds to the value reachDSL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_reachDSL E_IETFInterfaces_InterfaceType = 221
	// IETFInterfaces_InterfaceType_regular1822 corresponds to the value regular1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_regular1822 E_IETFInterfaces_InterfaceType = 222
	// IETFInterfaces_InterfaceType_rfc1483 corresponds to the value rfc1483 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc1483 E_IETFInterfaces_InterfaceType = 223
	// IETFInterfaces_InterfaceType_rfc877x25 corresponds to the value rfc877x25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc877x25 E_IETFInterfaces_InterfaceType = 224
	// IETFInterfaces_InterfaceType_rpr corresponds to the value rpr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rpr E_IETFInterfaces_InterfaceType = 225
	// IETFInterfaces_InterfaceType_rs232 corresponds to the value rs232 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rs232 E_IETFInterfaces_InterfaceType = 226
	// IETFInterfaces_InterfaceType_rsrb corresponds to the value rsrb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rsrb E_IETFInterfaces_InterfaceType = 227
	// IETFInterfaces_InterfaceType_sdci corresponds to the value sdci of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdci E_IETFInterfaces_InterfaceType = 228
	// IETFInterfaces_InterfaceType_sdlc corresponds to the value sdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdlc E_IETFInterfaces_InterfaceType = 229
	// IETFInterfaces_InterfaceType_sdsl corresponds to the value sdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdsl E_IETFInterfaces_InterfaceType = 230
	// IETFInterfaces_InterfaceType_shdsl corresponds to the value shdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_shdsl E_IETFInterfaces_InterfaceType = 231
	// IETFInterfaces_InterfaceType_sip corresponds to the value sip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sip E_IETFInterfaces_InterfaceType = 232
	// IETFInterfaces_InterfaceType_sipSig corresponds to the value sipSig of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipSig E_IETFInterfaces_InterfaceType = 233
	// IETFInterfaces_InterfaceType_sipTg corresponds to the value sipTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipTg E_IETFInterfaces_InterfaceType = 234
	// IETFInterfaces_InterfaceType_sixToFour corresponds to the value sixToFour of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sixToFour E_IETFInterfaces_InterfaceType = 235
	// IETFInterfaces_InterfaceType_slip corresponds to the value slip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_slip E_IETFInterfaces_InterfaceType = 236
	// IETFInterfaces_InterfaceType_smdsDxi corresponds to the value smdsDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsDxi E_IETFInterfaces_InterfaceType = 237
	// IETFInterfaces_InterfaceType_smdsIcip corresponds to the value smdsIcip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsIcip E_IETFInterfaces_InterfaceType = 238
	// IETFInterfaces_InterfaceType_softwareLoopback corresponds to the value softwareLoopback of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_softwareLoopback E_IETFInterfaces_InterfaceType = 239
	// IETFInterfaces_InterfaceType_sonet corresponds to the value sonet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonet E_IETFInterfaces_InterfaceType = 240
	// IETFInterfaces_InterfaceType_sonetOverheadChannel corresponds to the value sonetOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetOverheadChannel E_IETFInterfaces_InterfaceType = 241
	// IETFInterfaces_InterfaceType_sonetPath corresponds to the value sonetPath of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetPath E_IETFInterfaces_InterfaceType = 242
	// IETFInterfaces_InterfaceType_sonetVT corresponds to the value sonetVT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetVT E_IETFInterfaces_InterfaceType = 243
	// IETFInterfaces_InterfaceType_srp corresponds to the value srp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_srp E_IETFInterfaces_InterfaceType = 244
	// IETFInterfaces_InterfaceType_ss7SigLink corresponds to the value ss7SigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ss7SigLink E_IETFInterfaces_InterfaceType = 245
	// IETFInterfaces_InterfaceType_stackToStack corresponds to the value stackToStack of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_stackToStack E_IETFInterfaces_InterfaceType = 246
	// IETFInterfaces_InterfaceType_starLan corresponds to the value starLan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_starLan E_IETFInterfaces_InterfaceType = 247
	// IETFInterfaces_InterfaceType_tdlc corresponds to the value tdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tdlc E_IETFInterfaces_InterfaceType = 248
	// IETFInterfaces_InterfaceType_teLink corresponds to the value teLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_teLink E_IETFInterfaces_InterfaceType = 249
	// IETFInterfaces_InterfaceType_termPad corresponds to the value termPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_termPad E_IETFInterfaces_InterfaceType = 250
	// IETFInterfaces_InterfaceType_tr008 corresponds to the value tr008 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tr008 E_IETFInterfaces_InterfaceType = 251
	// IETFInterfaces_InterfaceType_transpHdlc corresponds to the value transpHdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_transpHdlc E_IETFInterfaces_InterfaceType = 252
	// IETFInterfaces_InterfaceType_tunnel corresponds to the value tunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tunnel E_IETFInterfaces_InterfaceType = 253
	// IETFInterfaces_InterfaceType_ultra corresponds to the value ultra of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ultra E_IETFInterfaces_InterfaceType = 254
	// IETFInterfaces_InterfaceType_usb corresponds to the value usb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_usb E_IETFInterfaces_InterfaceType = 255
	// IETFInterfaces_InterfaceType_v11 corresponds to the value v11 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v11 E_IETFInterfaces_InterfaceType = 256
	// IETFInterfaces_InterfaceType_v35 corresponds to the value v35 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v35 E_IETFInterfaces_InterfaceType = 257
	// IETFInterfaces_InterfaceType_v36 corresponds to the value v36 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v36 E_IETFInterfaces_InterfaceType = 258
	// IETFInterfaces_InterfaceType_v37 corresponds to the value v37 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v37 E_IETFInterfaces_InterfaceType = 259
	// IETFInterfaces_InterfaceType_vdsl corresponds to the value vdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl E_IETFInterfaces_InterfaceType = 260
	// IETFInterfaces_InterfaceType_vdsl2 corresponds to the value vdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl2 E_IETFInterfaces_InterfaceType = 261
	// IETFInterfaces_InterfaceType_virtualIpAddress corresponds to the value virtualIpAddress of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualIpAddress E_IETFInterfaces_InterfaceType = 262
	// IETFInterfaces_InterfaceType_virtualTg corresponds to the value virtualTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualTg E_IETFInterfaces_InterfaceType = 263
	// IETFInterfaces_InterfaceType_vmwareNicTeam corresponds to the value vmwareNicTeam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareNicTeam E_IETFInterfaces_InterfaceType = 264
	// IETFInterfaces_InterfaceType_vmwareVirtualNic corresponds to the value vmwareVirtualNic of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareVirtualNic E_IETFInterfaces_InterfaceType = 265
	// IETFInterfaces_InterfaceType_voiceDID corresponds to the value voiceDID of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceDID E_IETFInterfaces_InterfaceType = 266
	// IETFInterfaces_InterfaceType_voiceEBS corresponds to the value voiceEBS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEBS E_IETFInterfaces_InterfaceType = 267
	// IETFInterfaces_InterfaceType_voiceEM corresponds to the value voiceEM of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEM E_IETFInterfaces_InterfaceType = 268
	// IETFInterfaces_InterfaceType_voiceEMFGD corresponds to the value voiceEMFGD of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEMFGD E_IETFInterfaces_InterfaceType = 269
	// IETFInterfaces_InterfaceType_voiceEncap corresponds to the value voiceEncap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEncap E_IETFInterfaces_InterfaceType = 270
	// IETFInterfaces_InterfaceType_voiceFGDEANA corresponds to the value voiceFGDEANA of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDEANA E_IETFInterfaces_InterfaceType = 271
	// IETFInterfaces_InterfaceType_voiceFGDOS corresponds to the value voiceFGDOS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDOS E_IETFInterfaces_InterfaceType = 272
	// IETFInterfaces_InterfaceType_voiceFXO corresponds to the value voiceFXO of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXO E_IETFInterfaces_InterfaceType = 273
	// IETFInterfaces_InterfaceType_voiceFXS corresponds to the value voiceFXS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXS E_IETFInterfaces_InterfaceType = 274
	// IETFInterfaces_InterfaceType_voiceOverAtm corresponds to the value voiceOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverAtm E_IETFInterfaces_InterfaceType = 275
	// IETFInterfaces_InterfaceType_voiceOverCable corresponds to the value voiceOverCable of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverCable E_IETFInterfaces_InterfaceType = 276
	// IETFInterfaces_InterfaceType_voiceOverFrameRelay corresponds to the value voiceOverFrameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverFrameRelay E_IETFInterfaces_InterfaceType = 277
	// IETFInterfaces_InterfaceType_voiceOverIp corresponds to the value voiceOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverIp E_IETFInterfaces_InterfaceType = 278
	// IETFInterfaces_InterfaceType_wwanPP corresponds to the value wwanPP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP E_IETFInterfaces_InterfaceType = 279
	// IETFInterfaces_InterfaceType_wwanPP2 corresponds to the value wwanPP2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP2 E_IETFInterfaces_InterfaceType = 280
	// IETFInterfaces_InterfaceType_x213 corresponds to the value x213 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x213 E_IETFInterfaces_InterfaceType = 281
	// IETFInterfaces_InterfaceType_x25huntGroup corresponds to the value x25huntGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25huntGroup E_IETFInterfaces_InterfaceType = 282
	// IETFInterfaces_InterfaceType_x25mlp corresponds to the value x25mlp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25mlp E_IETFInterfaces_InterfaceType = 283
	// IETFInterfaces_InterfaceType_x25ple corresponds to the value x25ple of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25ple E_IETFInterfaces_InterfaceType = 284
	// IETFInterfaces_InterfaceType_x86Laps corresponds to the value x86Laps of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x86Laps E_IETFInterfaces_InterfaceType = 285
	// IETFInterfaces_InterfaceType_xboxWireless corresponds to the value xboxWireless of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_xboxWireless E_IETFInterfaces_InterfaceType = 286
)


// E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE.
func (e E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND corresponds to the value AAA_ACCOUNTING_EVENT_COMMAND of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN corresponds to the value AAA_ACCOUNTING_EVENT_LOGIN of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 2
)


// E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE.
func (e E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND corresponds to the value AAA_AUTHORIZATION_EVENT_COMMAND of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG corresponds to the value AAA_AUTHORIZATION_EVENT_CONFIG of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 2
)


// E_OpenconfigAaaTypes_AAA_METHOD_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_METHOD_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_METHOD_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_METHOD_TYPE.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_METHOD_TYPE.
func (e E_OpenconfigAaaTypes_AAA_METHOD_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_METHOD_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 0
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL corresponds to the value LOCAL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 1
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL corresponds to the value RADIUS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 2
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL corresponds to the value TACACS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 3
)


// E_OpenconfigAaaTypes_AAA_SERVER_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_SERVER_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_SERVER_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_SERVER_TYPE.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_SERVER_TYPE.
func (e E_OpenconfigAaaTypes_AAA_SERVER_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_SERVER_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 0
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS corresponds to the value RADIUS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 1
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS corresponds to the value TACACS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 2
)


// E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES. An additional value named
// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES.
func (e E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES")
}

const (
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 0
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN corresponds to the value SYSTEM_ROLE_ADMIN of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 1
)


// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (e E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY")
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL corresponds to the value CRITICAL of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR corresponds to the value MAJOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR corresponds to the value MINOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN corresponds to the value UNKNOWN of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 4
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING corresponds to the value WARNING of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 5
)


// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID.
func (e E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID")
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS corresponds to the value AIS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT corresponds to the value EQPT of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS corresponds to the value LOS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS corresponds to the value OTS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 4
)


// E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus.
func (e E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus")
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 0
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UP E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 1
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 2
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_TESTING E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 3
)


// E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_State_OperStatus. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_State_OperStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_State_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_State_OperStatus.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus.
func (e E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus")
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 0
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UP E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 2
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 3
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_TESTING E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 4
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNKNOWN corresponds to the value UNKNOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNKNOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 5
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DORMANT corresponds to the value DORMANT of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DORMANT E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 6
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_NOT_PRESENT E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 7
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_LOWER_LAYER_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 8
)


// E_OpenconfigMessages_DEBUG_SERVICE is a derived int64 type which is used to represent
// the enumerated node OpenconfigMessages_DEBUG_SERVICE. An additional value named
// OpenconfigMessages_DEBUG_SERVICE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigMessages_DEBUG_SERVICE int64

// IsYANGGoEnum ensures that OpenconfigMessages_DEBUG_SERVICE implements the yang.GoEnum
// interface. This ensures that OpenconfigMessages_DEBUG_SERVICE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigMessages_DEBUG_SERVICE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigMessages_DEBUG_SERVICE.
func (E_OpenconfigMessages_DEBUG_SERVICE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigMessages_DEBUG_SERVICE.
func (e E_OpenconfigMessages_DEBUG_SERVICE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigMessages_DEBUG_SERVICE")
}

const (
	// OpenconfigMessages_DEBUG_SERVICE_UNSET corresponds to the value UNSET of OpenconfigMessages_DEBUG_SERVICE
	OpenconfigMessages_DEBUG_SERVICE_UNSET E_OpenconfigMessages_DEBUG_SERVICE = 0
)


// E_OpenconfigMessages_SyslogSeverity is a derived int64 type which is used to represent
// the enumerated node OpenconfigMessages_SyslogSeverity. An additional value named
// OpenconfigMessages_SyslogSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigMessages_SyslogSeverity int64

// IsYANGGoEnum ensures that OpenconfigMessages_SyslogSeverity implements the yang.GoEnum
// interface. This ensures that OpenconfigMessages_SyslogSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigMessages_SyslogSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigMessages_SyslogSeverity.
func (E_OpenconfigMessages_SyslogSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigMessages_SyslogSeverity.
func (e E_OpenconfigMessages_SyslogSeverity) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigMessages_SyslogSeverity")
}

const (
	// OpenconfigMessages_SyslogSeverity_UNSET corresponds to the value UNSET of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_UNSET E_OpenconfigMessages_SyslogSeverity = 0
	// OpenconfigMessages_SyslogSeverity_EMERGENCY corresponds to the value EMERGENCY of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_EMERGENCY E_OpenconfigMessages_SyslogSeverity = 1
	// OpenconfigMessages_SyslogSeverity_ALERT corresponds to the value ALERT of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_ALERT E_OpenconfigMessages_SyslogSeverity = 2
	// OpenconfigMessages_SyslogSeverity_CRITICAL corresponds to the value CRITICAL of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_CRITICAL E_OpenconfigMessages_SyslogSeverity = 3
	// OpenconfigMessages_SyslogSeverity_ERROR corresponds to the value ERROR of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_ERROR E_OpenconfigMessages_SyslogSeverity = 4
	// OpenconfigMessages_SyslogSeverity_WARNING corresponds to the value WARNING of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_WARNING E_OpenconfigMessages_SyslogSeverity = 5
	// OpenconfigMessages_SyslogSeverity_NOTICE corresponds to the value NOTICE of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_NOTICE E_OpenconfigMessages_SyslogSeverity = 6
	// OpenconfigMessages_SyslogSeverity_INFORMATIONAL corresponds to the value INFORMATIONAL of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_INFORMATIONAL E_OpenconfigMessages_SyslogSeverity = 7
	// OpenconfigMessages_SyslogSeverity_DEBUG corresponds to the value DEBUG of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_DEBUG E_OpenconfigMessages_SyslogSeverity = 8
)


// E_OpenconfigOpenflow_FailureMode is a derived int64 type which is used to represent
// the enumerated node OpenconfigOpenflow_FailureMode. An additional value named
// OpenconfigOpenflow_FailureMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigOpenflow_FailureMode int64

// IsYANGGoEnum ensures that OpenconfigOpenflow_FailureMode implements the yang.GoEnum
// interface. This ensures that OpenconfigOpenflow_FailureMode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigOpenflow_FailureMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigOpenflow_FailureMode.
func (E_OpenconfigOpenflow_FailureMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigOpenflow_FailureMode.
func (e E_OpenconfigOpenflow_FailureMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigOpenflow_FailureMode")
}

const (
	// OpenconfigOpenflow_FailureMode_UNSET corresponds to the value UNSET of OpenconfigOpenflow_FailureMode
	OpenconfigOpenflow_FailureMode_UNSET E_OpenconfigOpenflow_FailureMode = 0
	// OpenconfigOpenflow_FailureMode_SECURE corresponds to the value SECURE of OpenconfigOpenflow_FailureMode
	OpenconfigOpenflow_FailureMode_SECURE E_OpenconfigOpenflow_FailureMode = 1
	// OpenconfigOpenflow_FailureMode_STANDALONE corresponds to the value STANDALONE of OpenconfigOpenflow_FailureMode
	OpenconfigOpenflow_FailureMode_STANDALONE E_OpenconfigOpenflow_FailureMode = 2
)


// E_OpenconfigOpenflow_Transport is a derived int64 type which is used to represent
// the enumerated node OpenconfigOpenflow_Transport. An additional value named
// OpenconfigOpenflow_Transport_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigOpenflow_Transport int64

// IsYANGGoEnum ensures that OpenconfigOpenflow_Transport implements the yang.GoEnum
// interface. This ensures that OpenconfigOpenflow_Transport can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigOpenflow_Transport) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigOpenflow_Transport.
func (E_OpenconfigOpenflow_Transport) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigOpenflow_Transport.
func (e E_OpenconfigOpenflow_Transport) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigOpenflow_Transport")
}

const (
	// OpenconfigOpenflow_Transport_UNSET corresponds to the value UNSET of OpenconfigOpenflow_Transport
	OpenconfigOpenflow_Transport_UNSET E_OpenconfigOpenflow_Transport = 0
	// OpenconfigOpenflow_Transport_TCP corresponds to the value TCP of OpenconfigOpenflow_Transport
	OpenconfigOpenflow_Transport_TCP E_OpenconfigOpenflow_Transport = 1
	// OpenconfigOpenflow_Transport_TLS corresponds to the value TLS of OpenconfigOpenflow_Transport
	OpenconfigOpenflow_Transport_TLS E_OpenconfigOpenflow_Transport = 2
)


// E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_COMPONENT_OPER_STATUS. An additional value named
// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (e E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS")
}

const (
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 0
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE corresponds to the value ACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 1
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED corresponds to the value DISABLED of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 2
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE corresponds to the value INACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 3
)


// E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (e E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT")
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE corresponds to the value BACKPLANE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS corresponds to the value CHASSIS of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 2
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD corresponds to the value CONTROLLER_CARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 3
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU corresponds to the value CPU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 4
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC corresponds to the value FABRIC of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 5
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN corresponds to the value FAN of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 6
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU corresponds to the value FRU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 7
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT corresponds to the value INTEGRATED_CIRCUIT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 8
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD corresponds to the value LINECARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 9
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT corresponds to the value PORT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 10
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY corresponds to the value POWER_SUPPLY of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 11
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR corresponds to the value SENSOR of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 12
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE corresponds to the value STORAGE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 13
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER corresponds to the value TRANSCEIVER of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 14
)


// E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (e E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT")
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM corresponds to the value OPERATING_SYSTEM of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE corresponds to the value OPERATING_SYSTEM_UPDATE of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 2
)


// E_OpenconfigSystemLogging_SYSLOG_FACILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SYSLOG_FACILITY. An additional value named
// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SYSLOG_FACILITY int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SYSLOG_FACILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SYSLOG_FACILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SYSLOG_FACILITY.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystemLogging_SYSLOG_FACILITY.
func (e E_OpenconfigSystemLogging_SYSLOG_FACILITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystemLogging_SYSLOG_FACILITY")
}

const (
	// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET E_OpenconfigSystemLogging_SYSLOG_FACILITY = 0
	// OpenconfigSystemLogging_SYSLOG_FACILITY_ALL corresponds to the value ALL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_ALL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 1
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT corresponds to the value AUDIT of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT E_OpenconfigSystemLogging_SYSLOG_FACILITY = 2
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH corresponds to the value AUTH of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH E_OpenconfigSystemLogging_SYSLOG_FACILITY = 3
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV corresponds to the value AUTHPRIV of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV E_OpenconfigSystemLogging_SYSLOG_FACILITY = 4
	// OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE corresponds to the value CONSOLE of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE E_OpenconfigSystemLogging_SYSLOG_FACILITY = 5
	// OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL corresponds to the value KERNEL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 6
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 corresponds to the value LOCAL0 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 7
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 corresponds to the value LOCAL1 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 8
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 corresponds to the value LOCAL2 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 9
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 corresponds to the value LOCAL3 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 10
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 corresponds to the value LOCAL4 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 11
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 corresponds to the value LOCAL5 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 12
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 corresponds to the value LOCAL6 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 13
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 corresponds to the value LOCAL7 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 14
	// OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL corresponds to the value MAIL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 15
	// OpenconfigSystemLogging_SYSLOG_FACILITY_NTP corresponds to the value NTP of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_NTP E_OpenconfigSystemLogging_SYSLOG_FACILITY = 16
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG corresponds to the value SYSLOG of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG E_OpenconfigSystemLogging_SYSLOG_FACILITY = 17
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON corresponds to the value SYSTEM_DAEMON of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON E_OpenconfigSystemLogging_SYSLOG_FACILITY = 18
	// OpenconfigSystemLogging_SYSLOG_FACILITY_USER corresponds to the value USER of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_USER E_OpenconfigSystemLogging_SYSLOG_FACILITY = 19
)


// E_OpenconfigSystemLogging_SyslogSeverity is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SyslogSeverity. An additional value named
// OpenconfigSystemLogging_SyslogSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SyslogSeverity int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SyslogSeverity implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SyslogSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SyslogSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SyslogSeverity.
func (E_OpenconfigSystemLogging_SyslogSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystemLogging_SyslogSeverity.
func (e E_OpenconfigSystemLogging_SyslogSeverity) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystemLogging_SyslogSeverity")
}

const (
	// OpenconfigSystemLogging_SyslogSeverity_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_UNSET E_OpenconfigSystemLogging_SyslogSeverity = 0
	// OpenconfigSystemLogging_SyslogSeverity_EMERGENCY corresponds to the value EMERGENCY of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_EMERGENCY E_OpenconfigSystemLogging_SyslogSeverity = 1
	// OpenconfigSystemLogging_SyslogSeverity_ALERT corresponds to the value ALERT of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ALERT E_OpenconfigSystemLogging_SyslogSeverity = 2
	// OpenconfigSystemLogging_SyslogSeverity_CRITICAL corresponds to the value CRITICAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_CRITICAL E_OpenconfigSystemLogging_SyslogSeverity = 3
	// OpenconfigSystemLogging_SyslogSeverity_ERROR corresponds to the value ERROR of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ERROR E_OpenconfigSystemLogging_SyslogSeverity = 4
	// OpenconfigSystemLogging_SyslogSeverity_WARNING corresponds to the value WARNING of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_WARNING E_OpenconfigSystemLogging_SyslogSeverity = 5
	// OpenconfigSystemLogging_SyslogSeverity_NOTICE corresponds to the value NOTICE of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_NOTICE E_OpenconfigSystemLogging_SyslogSeverity = 6
	// OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL corresponds to the value INFORMATIONAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL E_OpenconfigSystemLogging_SyslogSeverity = 7
	// OpenconfigSystemLogging_SyslogSeverity_DEBUG corresponds to the value DEBUG of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_DEBUG E_OpenconfigSystemLogging_SyslogSeverity = 8
)


// E_OpenconfigSystem_NTP_AUTH_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_NTP_AUTH_TYPE. An additional value named
// OpenconfigSystem_NTP_AUTH_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_NTP_AUTH_TYPE int64

// IsYANGGoEnum ensures that OpenconfigSystem_NTP_AUTH_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_NTP_AUTH_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_NTP_AUTH_TYPE.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystem_NTP_AUTH_TYPE.
func (e E_OpenconfigSystem_NTP_AUTH_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystem_NTP_AUTH_TYPE")
}

const (
	// OpenconfigSystem_NTP_AUTH_TYPE_UNSET corresponds to the value UNSET of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_UNSET E_OpenconfigSystem_NTP_AUTH_TYPE = 0
	// OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 corresponds to the value NTP_AUTH_MD5 of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 E_OpenconfigSystem_NTP_AUTH_TYPE = 1
)


// E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record. An additional value named
// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record.
func (E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record.
func (e E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record")
}

const (
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 0
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP corresponds to the value START_STOP of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 1
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_STOP corresponds to the value STOP of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_STOP E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 2
)


// E_OpenconfigSystem_System_Cpus_Cpu_State_Index is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Cpus_Cpu_State_Index. An additional value named
// OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Cpus_Cpu_State_Index int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Cpus_Cpu_State_Index) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Cpus_Cpu_State_Index.
func (E_OpenconfigSystem_System_Cpus_Cpu_State_Index) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystem_System_Cpus_Cpu_State_Index.
func (e E_OpenconfigSystem_System_Cpus_Cpu_State_Index) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystem_System_Cpus_Cpu_State_Index")
}

const (
	// OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Cpus_Cpu_State_Index
	OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET E_OpenconfigSystem_System_Cpus_Cpu_State_Index = 0
	// OpenconfigSystem_System_Cpus_Cpu_State_Index_ALL corresponds to the value ALL of OpenconfigSystem_System_Cpus_Cpu_State_Index
	OpenconfigSystem_System_Cpus_Cpu_State_Index_ALL E_OpenconfigSystem_System_Cpus_Cpu_State_Index = 1
)


// E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_GrpcServer_Config_ListenAddresses. An additional value named
// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_GrpcServer_Config_ListenAddresses.
func (E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses.
func (e E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses")
}

const (
	// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET corresponds to the value UNSET of OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
	OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses = 0
	// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_ANY corresponds to the value ANY of OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
	OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_ANY E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses = 1
)


// E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType. An additional value named
// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType.
func (E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType.
func (e E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType")
}

const (
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 0
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER corresponds to the value SERVER of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 1
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_PEER corresponds to the value PEER of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_PEER E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 2
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_POOL corresponds to the value POOL of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_POOL E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 3
)


// E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_SshServer_Config_ProtocolVersion. An additional value named
// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_SshServer_Config_ProtocolVersion implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_SshServer_Config_ProtocolVersion can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_SshServer_Config_ProtocolVersion.
func (E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion.
func (e E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion")
}

const (
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET corresponds to the value UNSET of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 0
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2 corresponds to the value V2 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 1
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1 corresponds to the value V1 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 2
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1_V2 corresponds to the value V1_V2 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1_V2 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 3
)


// E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD is a derived int64 type which is used to represent
// the enumerated node OpenconfigTelemetryTypes_DATA_ENCODING_METHOD. An additional value named
// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD int64

// IsYANGGoEnum ensures that OpenconfigTelemetryTypes_DATA_ENCODING_METHOD implements the yang.GoEnum
// interface. This ensures that OpenconfigTelemetryTypes_DATA_ENCODING_METHOD can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTelemetryTypes_DATA_ENCODING_METHOD.
func (E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD.
func (e E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD")
}

const (
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_UNSET corresponds to the value UNSET of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_UNSET E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 0
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_JSON_IETF corresponds to the value ENC_JSON_IETF of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_JSON_IETF E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 1
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_PROTO3 corresponds to the value ENC_PROTO3 of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_PROTO3 E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 2
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_XML corresponds to the value ENC_XML of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_XML E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 3
)


// E_OpenconfigTelemetryTypes_STREAM_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigTelemetryTypes_STREAM_PROTOCOL. An additional value named
// OpenconfigTelemetryTypes_STREAM_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTelemetryTypes_STREAM_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigTelemetryTypes_STREAM_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigTelemetryTypes_STREAM_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTelemetryTypes_STREAM_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTelemetryTypes_STREAM_PROTOCOL.
func (E_OpenconfigTelemetryTypes_STREAM_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigTelemetryTypes_STREAM_PROTOCOL.
func (e E_OpenconfigTelemetryTypes_STREAM_PROTOCOL) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigTelemetryTypes_STREAM_PROTOCOL")
}

const (
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_UNSET E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 0
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_GRPC corresponds to the value STREAM_GRPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_GRPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 1
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_JSON_RPC corresponds to the value STREAM_JSON_RPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_JSON_RPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 2
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_SSH corresponds to the value STREAM_SSH of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_SSH E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 3
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_THRIFT_RPC corresponds to the value STREAM_THRIFT_RPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_THRIFT_RPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 4
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_WEBSOCKET_RPC corresponds to the value STREAM_WEBSOCKET_RPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_WEBSOCKET_RPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 5
)


// E_Sample_Sample_ContainerVal_EnumVal is a derived int64 type which is used to represent
// the enumerated node Sample_Sample_ContainerVal_EnumVal. An additional value named
// Sample_Sample_ContainerVal_EnumVal_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Sample_Sample_ContainerVal_EnumVal int64

// IsYANGGoEnum ensures that Sample_Sample_ContainerVal_EnumVal implements the yang.GoEnum
// interface. This ensures that Sample_Sample_ContainerVal_EnumVal can be identified as a
// mapped type for a YANG enumeration.
func (E_Sample_Sample_ContainerVal_EnumVal) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Sample_Sample_ContainerVal_EnumVal.
func (E_Sample_Sample_ContainerVal_EnumVal) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Sample_Sample_ContainerVal_EnumVal.
func (e E_Sample_Sample_ContainerVal_EnumVal) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Sample_Sample_ContainerVal_EnumVal")
}

const (
	// Sample_Sample_ContainerVal_EnumVal_UNSET corresponds to the value UNSET of Sample_Sample_ContainerVal_EnumVal
	Sample_Sample_ContainerVal_EnumVal_UNSET E_Sample_Sample_ContainerVal_EnumVal = 0
	// Sample_Sample_ContainerVal_EnumVal_enum1 corresponds to the value enum1 of Sample_Sample_ContainerVal_EnumVal
	Sample_Sample_ContainerVal_EnumVal_enum1 E_Sample_Sample_ContainerVal_EnumVal = 1
	// Sample_Sample_ContainerVal_EnumVal_enum2 corresponds to the value enum2 of Sample_Sample_ContainerVal_EnumVal
	Sample_Sample_ContainerVal_EnumVal_enum2 E_Sample_Sample_ContainerVal_EnumVal = 2
	// Sample_Sample_ContainerVal_EnumVal_enum3 corresponds to the value enum3 of Sample_Sample_ContainerVal_EnumVal
	Sample_Sample_ContainerVal_EnumVal_enum3 E_Sample_Sample_ContainerVal_EnumVal = 31
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
		1: {Name: "a12MppSwitch", DefiningModule: "iana-if-type"},
		2: {Name: "aal2", DefiningModule: "iana-if-type"},
		3: {Name: "aal5", DefiningModule: "iana-if-type"},
		4: {Name: "actelisMetaLOOP", DefiningModule: "iana-if-type"},
		5: {Name: "adsl", DefiningModule: "iana-if-type"},
		6: {Name: "adsl2", DefiningModule: "iana-if-type"},
		7: {Name: "adsl2plus", DefiningModule: "iana-if-type"},
		8: {Name: "aflane8023", DefiningModule: "iana-if-type"},
		9: {Name: "aflane8025", DefiningModule: "iana-if-type"},
		10: {Name: "aluELP", DefiningModule: "iana-if-type"},
		11: {Name: "aluEpon", DefiningModule: "iana-if-type"},
		12: {Name: "aluEponLogicalLink", DefiningModule: "iana-if-type"},
		13: {Name: "aluEponOnu", DefiningModule: "iana-if-type"},
		14: {Name: "aluEponPhysicalUni", DefiningModule: "iana-if-type"},
		15: {Name: "aluGponOnu", DefiningModule: "iana-if-type"},
		16: {Name: "aluGponPhysicalUni", DefiningModule: "iana-if-type"},
		17: {Name: "arap", DefiningModule: "iana-if-type"},
		18: {Name: "arcnet", DefiningModule: "iana-if-type"},
		19: {Name: "arcnetPlus", DefiningModule: "iana-if-type"},
		20: {Name: "async", DefiningModule: "iana-if-type"},
		21: {Name: "atm", DefiningModule: "iana-if-type"},
		22: {Name: "atmDxi", DefiningModule: "iana-if-type"},
		23: {Name: "atmFuni", DefiningModule: "iana-if-type"},
		24: {Name: "atmIma", DefiningModule: "iana-if-type"},
		25: {Name: "atmLogical", DefiningModule: "iana-if-type"},
		26: {Name: "atmRadio", DefiningModule: "iana-if-type"},
		27: {Name: "atmSubInterface", DefiningModule: "iana-if-type"},
		28: {Name: "atmVciEndPt", DefiningModule: "iana-if-type"},
		29: {Name: "atmVirtual", DefiningModule: "iana-if-type"},
		30: {Name: "atmbond", DefiningModule: "iana-if-type"},
		31: {Name: "aviciOpticalEther", DefiningModule: "iana-if-type"},
		32: {Name: "basicISDN", DefiningModule: "iana-if-type"},
		33: {Name: "bgppolicyaccounting", DefiningModule: "iana-if-type"},
		34: {Name: "bits", DefiningModule: "iana-if-type"},
		35: {Name: "bridge", DefiningModule: "iana-if-type"},
		36: {Name: "bsc", DefiningModule: "iana-if-type"},
		37: {Name: "cableDownstreamRfPort", DefiningModule: "iana-if-type"},
		38: {Name: "capwapDot11Bss", DefiningModule: "iana-if-type"},
		39: {Name: "capwapDot11Profile", DefiningModule: "iana-if-type"},
		40: {Name: "capwapWtpVirtualRadio", DefiningModule: "iana-if-type"},
		41: {Name: "cblVectaStar", DefiningModule: "iana-if-type"},
		42: {Name: "cctEmul", DefiningModule: "iana-if-type"},
		43: {Name: "ces", DefiningModule: "iana-if-type"},
		44: {Name: "channel", DefiningModule: "iana-if-type"},
		45: {Name: "ciscoISLvlan", DefiningModule: "iana-if-type"},
		46: {Name: "cnr", DefiningModule: "iana-if-type"},
		47: {Name: "coffee", DefiningModule: "iana-if-type"},
		48: {Name: "compositeLink", DefiningModule: "iana-if-type"},
		49: {Name: "dcn", DefiningModule: "iana-if-type"},
		50: {Name: "ddnX25", DefiningModule: "iana-if-type"},
		51: {Name: "digitalPowerline", DefiningModule: "iana-if-type"},
		52: {Name: "digitalWrapperOverheadChannel", DefiningModule: "iana-if-type"},
		53: {Name: "dlsw", DefiningModule: "iana-if-type"},
		54: {Name: "docsCableDownstream", DefiningModule: "iana-if-type"},
		55: {Name: "docsCableMCmtsDownstream", DefiningModule: "iana-if-type"},
		56: {Name: "docsCableMaclayer", DefiningModule: "iana-if-type"},
		57: {Name: "docsCableNdf", DefiningModule: "iana-if-type"},
		58: {Name: "docsCableNdr", DefiningModule: "iana-if-type"},
		59: {Name: "docsCableScte55d1FwdOob", DefiningModule: "iana-if-type"},
		60: {Name: "docsCableScte55d1RetOob", DefiningModule: "iana-if-type"},
		61: {Name: "docsCableScte55d2DsOob", DefiningModule: "iana-if-type"},
		62: {Name: "docsCableScte55d2UsOob", DefiningModule: "iana-if-type"},
		63: {Name: "docsCableUpstream", DefiningModule: "iana-if-type"},
		64: {Name: "docsCableUpstreamChannel", DefiningModule: "iana-if-type"},
		65: {Name: "docsCableUpstreamRfPort", DefiningModule: "iana-if-type"},
		66: {Name: "docsOfdmDownstream", DefiningModule: "iana-if-type"},
		67: {Name: "docsOfdmaUpstream", DefiningModule: "iana-if-type"},
		68: {Name: "ds0", DefiningModule: "iana-if-type"},
		69: {Name: "ds0Bundle", DefiningModule: "iana-if-type"},
		70: {Name: "ds1", DefiningModule: "iana-if-type"},
		71: {Name: "ds1FDL", DefiningModule: "iana-if-type"},
		72: {Name: "ds3", DefiningModule: "iana-if-type"},
		73: {Name: "dtm", DefiningModule: "iana-if-type"},
		74: {Name: "dvbAsiIn", DefiningModule: "iana-if-type"},
		75: {Name: "dvbAsiOut", DefiningModule: "iana-if-type"},
		76: {Name: "dvbRccDownstream", DefiningModule: "iana-if-type"},
		77: {Name: "dvbRccMacLayer", DefiningModule: "iana-if-type"},
		78: {Name: "dvbRccUpstream", DefiningModule: "iana-if-type"},
		79: {Name: "dvbRcsMacLayer", DefiningModule: "iana-if-type"},
		80: {Name: "dvbRcsTdma", DefiningModule: "iana-if-type"},
		81: {Name: "dvbTdm", DefiningModule: "iana-if-type"},
		82: {Name: "e1", DefiningModule: "iana-if-type"},
		83: {Name: "econet", DefiningModule: "iana-if-type"},
		84: {Name: "eon", DefiningModule: "iana-if-type"},
		85: {Name: "eplrs", DefiningModule: "iana-if-type"},
		86: {Name: "escon", DefiningModule: "iana-if-type"},
		87: {Name: "ethernet3Mbit", DefiningModule: "iana-if-type"},
		88: {Name: "ethernetCsmacd", DefiningModule: "iana-if-type"},
		89: {Name: "fast", DefiningModule: "iana-if-type"},
		90: {Name: "fastEther", DefiningModule: "iana-if-type"},
		91: {Name: "fastEtherFX", DefiningModule: "iana-if-type"},
		92: {Name: "fastdsl", DefiningModule: "iana-if-type"},
		93: {Name: "fcipLink", DefiningModule: "iana-if-type"},
		94: {Name: "fddi", DefiningModule: "iana-if-type"},
		95: {Name: "fibreChannel", DefiningModule: "iana-if-type"},
		96: {Name: "frDlciEndPt", DefiningModule: "iana-if-type"},
		97: {Name: "frForward", DefiningModule: "iana-if-type"},
		98: {Name: "frameRelay", DefiningModule: "iana-if-type"},
		99: {Name: "frameRelayInterconnect", DefiningModule: "iana-if-type"},
		100: {Name: "frameRelayMPI", DefiningModule: "iana-if-type"},
		101: {Name: "frameRelayService", DefiningModule: "iana-if-type"},
		102: {Name: "frf16MfrBundle", DefiningModule: "iana-if-type"},
		103: {Name: "g703at2mb", DefiningModule: "iana-if-type"},
		104: {Name: "g703at64k", DefiningModule: "iana-if-type"},
		105: {Name: "g9981", DefiningModule: "iana-if-type"},
		106: {Name: "g9982", DefiningModule: "iana-if-type"},
		107: {Name: "g9983", DefiningModule: "iana-if-type"},
		108: {Name: "gfast", DefiningModule: "iana-if-type"},
		109: {Name: "gfp", DefiningModule: "iana-if-type"},
		110: {Name: "gigabitEthernet", DefiningModule: "iana-if-type"},
		111: {Name: "gpon", DefiningModule: "iana-if-type"},
		112: {Name: "gr303IDT", DefiningModule: "iana-if-type"},
		113: {Name: "gr303RDT", DefiningModule: "iana-if-type"},
		114: {Name: "gtp", DefiningModule: "iana-if-type"},
		115: {Name: "h323Gatekeeper", DefiningModule: "iana-if-type"},
		116: {Name: "h323Proxy", DefiningModule: "iana-if-type"},
		117: {Name: "hdh1822", DefiningModule: "iana-if-type"},
		118: {Name: "hdlc", DefiningModule: "iana-if-type"},
		119: {Name: "hdsl2", DefiningModule: "iana-if-type"},
		120: {Name: "hiperlan2", DefiningModule: "iana-if-type"},
		121: {Name: "hippi", DefiningModule: "iana-if-type"},
		122: {Name: "hippiInterface", DefiningModule: "iana-if-type"},
		123: {Name: "homepna", DefiningModule: "iana-if-type"},
		124: {Name: "hostPad", DefiningModule: "iana-if-type"},
		125: {Name: "hssi", DefiningModule: "iana-if-type"},
		126: {Name: "hyperchannel", DefiningModule: "iana-if-type"},
		127: {Name: "iana-interface-type", DefiningModule: "iana-if-type"},
		128: {Name: "ibm370parChan", DefiningModule: "iana-if-type"},
		129: {Name: "idsl", DefiningModule: "iana-if-type"},
		130: {Name: "ieee1394", DefiningModule: "iana-if-type"},
		131: {Name: "ieee80211", DefiningModule: "iana-if-type"},
		132: {Name: "ieee80212", DefiningModule: "iana-if-type"},
		133: {Name: "ieee802154", DefiningModule: "iana-if-type"},
		134: {Name: "ieee80216WMAN", DefiningModule: "iana-if-type"},
		135: {Name: "ieee8023adLag", DefiningModule: "iana-if-type"},
		136: {Name: "if-gsn", DefiningModule: "iana-if-type"},
		137: {Name: "ifPwType", DefiningModule: "iana-if-type"},
		138: {Name: "ifVfiType", DefiningModule: "iana-if-type"},
		139: {Name: "ilan", DefiningModule: "iana-if-type"},
		140: {Name: "imt", DefiningModule: "iana-if-type"},
		141: {Name: "infiniband", DefiningModule: "iana-if-type"},
		142: {Name: "interleave", DefiningModule: "iana-if-type"},
		143: {Name: "ip", DefiningModule: "iana-if-type"},
		144: {Name: "ipForward", DefiningModule: "iana-if-type"},
		145: {Name: "ipOverAtm", DefiningModule: "iana-if-type"},
		146: {Name: "ipOverCdlc", DefiningModule: "iana-if-type"},
		147: {Name: "ipOverClaw", DefiningModule: "iana-if-type"},
		148: {Name: "ipSwitch", DefiningModule: "iana-if-type"},
		149: {Name: "isdn", DefiningModule: "iana-if-type"},
		150: {Name: "isdns", DefiningModule: "iana-if-type"},
		151: {Name: "isdnu", DefiningModule: "iana-if-type"},
		152: {Name: "iso88022llc", DefiningModule: "iana-if-type"},
		153: {Name: "iso88023Csmacd", DefiningModule: "iana-if-type"},
		154: {Name: "iso88024TokenBus", DefiningModule: "iana-if-type"},
		155: {Name: "iso88025CRFPInt", DefiningModule: "iana-if-type"},
		156: {Name: "iso88025Dtr", DefiningModule: "iana-if-type"},
		157: {Name: "iso88025Fiber", DefiningModule: "iana-if-type"},
		158: {Name: "iso88025TokenRing", DefiningModule: "iana-if-type"},
		159: {Name: "iso88026Man", DefiningModule: "iana-if-type"},
		160: {Name: "isup", DefiningModule: "iana-if-type"},
		161: {Name: "l2vlan", DefiningModule: "iana-if-type"},
		162: {Name: "l3ipvlan", DefiningModule: "iana-if-type"},
		163: {Name: "l3ipxvlan", DefiningModule: "iana-if-type"},
		164: {Name: "lapb", DefiningModule: "iana-if-type"},
		165: {Name: "lapd", DefiningModule: "iana-if-type"},
		166: {Name: "lapf", DefiningModule: "iana-if-type"},
		167: {Name: "linegroup", DefiningModule: "iana-if-type"},
		168: {Name: "lmp", DefiningModule: "iana-if-type"},
		169: {Name: "localTalk", DefiningModule: "iana-if-type"},
		170: {Name: "macSecControlledIF", DefiningModule: "iana-if-type"},
		171: {Name: "macSecUncontrolledIF", DefiningModule: "iana-if-type"},
		172: {Name: "mediaMailOverIp", DefiningModule: "iana-if-type"},
		173: {Name: "mfSigLink", DefiningModule: "iana-if-type"},
		174: {Name: "miox25", DefiningModule: "iana-if-type"},
		175: {Name: "mocaVersion1", DefiningModule: "iana-if-type"},
		176: {Name: "modem", DefiningModule: "iana-if-type"},
		177: {Name: "mpc", DefiningModule: "iana-if-type"},
		178: {Name: "mpegTransport", DefiningModule: "iana-if-type"},
		179: {Name: "mpls", DefiningModule: "iana-if-type"},
		180: {Name: "mplsTunnel", DefiningModule: "iana-if-type"},
		181: {Name: "msdsl", DefiningModule: "iana-if-type"},
		182: {Name: "mvl", DefiningModule: "iana-if-type"},
		183: {Name: "myrinet", DefiningModule: "iana-if-type"},
		184: {Name: "nfas", DefiningModule: "iana-if-type"},
		185: {Name: "nsip", DefiningModule: "iana-if-type"},
		186: {Name: "opticalChannel", DefiningModule: "iana-if-type"},
		187: {Name: "opticalChannelGroup", DefiningModule: "iana-if-type"},
		188: {Name: "opticalTransport", DefiningModule: "iana-if-type"},
		189: {Name: "other", DefiningModule: "iana-if-type"},
		190: {Name: "otnOdu", DefiningModule: "iana-if-type"},
		191: {Name: "otnOtu", DefiningModule: "iana-if-type"},
		192: {Name: "para", DefiningModule: "iana-if-type"},
		193: {Name: "pdnEtherLoop1", DefiningModule: "iana-if-type"},
		194: {Name: "pdnEtherLoop2", DefiningModule: "iana-if-type"},
		195: {Name: "pip", DefiningModule: "iana-if-type"},
		196: {Name: "plc", DefiningModule: "iana-if-type"},
		197: {Name: "pon155", DefiningModule: "iana-if-type"},
		198: {Name: "pon622", DefiningModule: "iana-if-type"},
		199: {Name: "pos", DefiningModule: "iana-if-type"},
		200: {Name: "ppp", DefiningModule: "iana-if-type"},
		201: {Name: "pppMultilinkBundle", DefiningModule: "iana-if-type"},
		202: {Name: "primaryISDN", DefiningModule: "iana-if-type"},
		203: {Name: "propAtm", DefiningModule: "iana-if-type"},
		204: {Name: "propBWAp2Mp", DefiningModule: "iana-if-type"},
		205: {Name: "propCnls", DefiningModule: "iana-if-type"},
		206: {Name: "propDocsWirelessDownstream", DefiningModule: "iana-if-type"},
		207: {Name: "propDocsWirelessMaclayer", DefiningModule: "iana-if-type"},
		208: {Name: "propDocsWirelessUpstream", DefiningModule: "iana-if-type"},
		209: {Name: "propMultiplexor", DefiningModule: "iana-if-type"},
		210: {Name: "propPointToPointSerial", DefiningModule: "iana-if-type"},
		211: {Name: "propVirtual", DefiningModule: "iana-if-type"},
		212: {Name: "propWirelessP2P", DefiningModule: "iana-if-type"},
		213: {Name: "proteon10Mbit", DefiningModule: "iana-if-type"},
		214: {Name: "proteon80Mbit", DefiningModule: "iana-if-type"},
		215: {Name: "ptm", DefiningModule: "iana-if-type"},
		216: {Name: "q2931", DefiningModule: "iana-if-type"},
		217: {Name: "qam", DefiningModule: "iana-if-type"},
		218: {Name: "qllc", DefiningModule: "iana-if-type"},
		219: {Name: "radioMAC", DefiningModule: "iana-if-type"},
		220: {Name: "radsl", DefiningModule: "iana-if-type"},
		221: {Name: "reachDSL", DefiningModule: "iana-if-type"},
		222: {Name: "regular1822", DefiningModule: "iana-if-type"},
		223: {Name: "rfc1483", DefiningModule: "iana-if-type"},
		224: {Name: "rfc877x25", DefiningModule: "iana-if-type"},
		225: {Name: "rpr", DefiningModule: "iana-if-type"},
		226: {Name: "rs232", DefiningModule: "iana-if-type"},
		227: {Name: "rsrb", DefiningModule: "iana-if-type"},
		228: {Name: "sdci", DefiningModule: "iana-if-type"},
		229: {Name: "sdlc", DefiningModule: "iana-if-type"},
		230: {Name: "sdsl", DefiningModule: "iana-if-type"},
		231: {Name: "shdsl", DefiningModule: "iana-if-type"},
		232: {Name: "sip", DefiningModule: "iana-if-type"},
		233: {Name: "sipSig", DefiningModule: "iana-if-type"},
		234: {Name: "sipTg", DefiningModule: "iana-if-type"},
		235: {Name: "sixToFour", DefiningModule: "iana-if-type"},
		236: {Name: "slip", DefiningModule: "iana-if-type"},
		237: {Name: "smdsDxi", DefiningModule: "iana-if-type"},
		238: {Name: "smdsIcip", DefiningModule: "iana-if-type"},
		239: {Name: "softwareLoopback", DefiningModule: "iana-if-type"},
		240: {Name: "sonet", DefiningModule: "iana-if-type"},
		241: {Name: "sonetOverheadChannel", DefiningModule: "iana-if-type"},
		242: {Name: "sonetPath", DefiningModule: "iana-if-type"},
		243: {Name: "sonetVT", DefiningModule: "iana-if-type"},
		244: {Name: "srp", DefiningModule: "iana-if-type"},
		245: {Name: "ss7SigLink", DefiningModule: "iana-if-type"},
		246: {Name: "stackToStack", DefiningModule: "iana-if-type"},
		247: {Name: "starLan", DefiningModule: "iana-if-type"},
		248: {Name: "tdlc", DefiningModule: "iana-if-type"},
		249: {Name: "teLink", DefiningModule: "iana-if-type"},
		250: {Name: "termPad", DefiningModule: "iana-if-type"},
		251: {Name: "tr008", DefiningModule: "iana-if-type"},
		252: {Name: "transpHdlc", DefiningModule: "iana-if-type"},
		253: {Name: "tunnel", DefiningModule: "iana-if-type"},
		254: {Name: "ultra", DefiningModule: "iana-if-type"},
		255: {Name: "usb", DefiningModule: "iana-if-type"},
		256: {Name: "v11", DefiningModule: "iana-if-type"},
		257: {Name: "v35", DefiningModule: "iana-if-type"},
		258: {Name: "v36", DefiningModule: "iana-if-type"},
		259: {Name: "v37", DefiningModule: "iana-if-type"},
		260: {Name: "vdsl", DefiningModule: "iana-if-type"},
		261: {Name: "vdsl2", DefiningModule: "iana-if-type"},
		262: {Name: "virtualIpAddress", DefiningModule: "iana-if-type"},
		263: {Name: "virtualTg", DefiningModule: "iana-if-type"},
		264: {Name: "vmwareNicTeam", DefiningModule: "iana-if-type"},
		265: {Name: "vmwareVirtualNic", DefiningModule: "iana-if-type"},
		266: {Name: "voiceDID", DefiningModule: "iana-if-type"},
		267: {Name: "voiceEBS", DefiningModule: "iana-if-type"},
		268: {Name: "voiceEM", DefiningModule: "iana-if-type"},
		269: {Name: "voiceEMFGD", DefiningModule: "iana-if-type"},
		270: {Name: "voiceEncap", DefiningModule: "iana-if-type"},
		271: {Name: "voiceFGDEANA", DefiningModule: "iana-if-type"},
		272: {Name: "voiceFGDOS", DefiningModule: "iana-if-type"},
		273: {Name: "voiceFXO", DefiningModule: "iana-if-type"},
		274: {Name: "voiceFXS", DefiningModule: "iana-if-type"},
		275: {Name: "voiceOverAtm", DefiningModule: "iana-if-type"},
		276: {Name: "voiceOverCable", DefiningModule: "iana-if-type"},
		277: {Name: "voiceOverFrameRelay", DefiningModule: "iana-if-type"},
		278: {Name: "voiceOverIp", DefiningModule: "iana-if-type"},
		279: {Name: "wwanPP", DefiningModule: "iana-if-type"},
		280: {Name: "wwanPP2", DefiningModule: "iana-if-type"},
		281: {Name: "x213", DefiningModule: "iana-if-type"},
		282: {Name: "x25huntGroup", DefiningModule: "iana-if-type"},
		283: {Name: "x25mlp", DefiningModule: "iana-if-type"},
		284: {Name: "x25ple", DefiningModule: "iana-if-type"},
		285: {Name: "x86Laps", DefiningModule: "iana-if-type"},
		286: {Name: "xboxWireless", DefiningModule: "iana-if-type"},
	},
	"E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE": {
		1: {Name: "AAA_ACCOUNTING_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_ACCOUNTING_EVENT_LOGIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE": {
		1: {Name: "AAA_AUTHORIZATION_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_AUTHORIZATION_EVENT_CONFIG", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_METHOD_TYPE": {
		1: {Name: "LOCAL", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "RADIUS_ALL", DefiningModule: "openconfig-aaa-types"},
		3: {Name: "TACACS_ALL", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_SERVER_TYPE": {
		1: {Name: "RADIUS", DefiningModule: "openconfig-aaa"},
		2: {Name: "TACACS", DefiningModule: "openconfig-aaa"},
	},
	"E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES": {
		1: {Name: "SYSTEM_ROLE_ADMIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY": {
		1: {Name: "CRITICAL", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "MAJOR", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "MINOR", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "UNKNOWN", DefiningModule: "openconfig-alarm-types"},
		5: {Name: "WARNING", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID": {
		1: {Name: "AIS", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "EQPT", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "LOS", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "OTS", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigMessages_DEBUG_SERVICE": {
	},
	"E_OpenconfigMessages_SyslogSeverity": {
		1: {Name: "EMERGENCY"},
		2: {Name: "ALERT"},
		3: {Name: "CRITICAL"},
		4: {Name: "ERROR"},
		5: {Name: "WARNING"},
		6: {Name: "NOTICE"},
		7: {Name: "INFORMATIONAL"},
		8: {Name: "DEBUG"},
	},
	"E_OpenconfigOpenflow_FailureMode": {
		1: {Name: "SECURE"},
		2: {Name: "STANDALONE"},
	},
	"E_OpenconfigOpenflow_Transport": {
		1: {Name: "TCP"},
		2: {Name: "TLS"},
	},
	"E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS": {
		1: {Name: "ACTIVE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "INACTIVE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT": {
		1: {Name: "BACKPLANE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "CHASSIS", DefiningModule: "openconfig-platform-types"},
		3: {Name: "CONTROLLER_CARD", DefiningModule: "openconfig-platform-types"},
		4: {Name: "CPU", DefiningModule: "openconfig-platform-types"},
		5: {Name: "FABRIC", DefiningModule: "openconfig-platform-types"},
		6: {Name: "FAN", DefiningModule: "openconfig-platform-types"},
		7: {Name: "FRU", DefiningModule: "openconfig-platform-types"},
		8: {Name: "INTEGRATED_CIRCUIT", DefiningModule: "openconfig-platform-types"},
		9: {Name: "LINECARD", DefiningModule: "openconfig-platform-types"},
		10: {Name: "PORT", DefiningModule: "openconfig-platform-types"},
		11: {Name: "POWER_SUPPLY", DefiningModule: "openconfig-platform-types"},
		12: {Name: "SENSOR", DefiningModule: "openconfig-platform-types"},
		13: {Name: "STORAGE", DefiningModule: "openconfig-platform-types"},
		14: {Name: "TRANSCEIVER", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT": {
		1: {Name: "OPERATING_SYSTEM", DefiningModule: "openconfig-platform-types"},
		2: {Name: "OPERATING_SYSTEM_UPDATE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigSystemLogging_SYSLOG_FACILITY": {
		1: {Name: "ALL", DefiningModule: "openconfig-system-logging"},
		2: {Name: "AUDIT", DefiningModule: "openconfig-system-logging"},
		3: {Name: "AUTH", DefiningModule: "openconfig-system-logging"},
		4: {Name: "AUTHPRIV", DefiningModule: "openconfig-system-logging"},
		5: {Name: "CONSOLE", DefiningModule: "openconfig-system-logging"},
		6: {Name: "KERNEL", DefiningModule: "openconfig-system-logging"},
		7: {Name: "LOCAL0", DefiningModule: "openconfig-system-logging"},
		8: {Name: "LOCAL1", DefiningModule: "openconfig-system-logging"},
		9: {Name: "LOCAL2", DefiningModule: "openconfig-system-logging"},
		10: {Name: "LOCAL3", DefiningModule: "openconfig-system-logging"},
		11: {Name: "LOCAL4", DefiningModule: "openconfig-system-logging"},
		12: {Name: "LOCAL5", DefiningModule: "openconfig-system-logging"},
		13: {Name: "LOCAL6", DefiningModule: "openconfig-system-logging"},
		14: {Name: "LOCAL7", DefiningModule: "openconfig-system-logging"},
		15: {Name: "MAIL", DefiningModule: "openconfig-system-logging"},
		16: {Name: "NTP", DefiningModule: "openconfig-system-logging"},
		17: {Name: "SYSLOG", DefiningModule: "openconfig-system-logging"},
		18: {Name: "SYSTEM_DAEMON", DefiningModule: "openconfig-system-logging"},
		19: {Name: "USER", DefiningModule: "openconfig-system-logging"},
	},
	"E_OpenconfigSystemLogging_SyslogSeverity": {
		1: {Name: "EMERGENCY"},
		2: {Name: "ALERT"},
		3: {Name: "CRITICAL"},
		4: {Name: "ERROR"},
		5: {Name: "WARNING"},
		6: {Name: "NOTICE"},
		7: {Name: "INFORMATIONAL"},
		8: {Name: "DEBUG"},
	},
	"E_OpenconfigSystem_NTP_AUTH_TYPE": {
		1: {Name: "NTP_AUTH_MD5", DefiningModule: "openconfig-system"},
	},
	"E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record": {
		1: {Name: "START_STOP"},
		2: {Name: "STOP"},
	},
	"E_OpenconfigSystem_System_Cpus_Cpu_State_Index": {
		1: {Name: "ALL"},
	},
	"E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses": {
		1: {Name: "ANY"},
	},
	"E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType": {
		1: {Name: "SERVER"},
		2: {Name: "PEER"},
		3: {Name: "POOL"},
	},
	"E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion": {
		1: {Name: "V2"},
		2: {Name: "V1"},
		3: {Name: "V1_V2"},
	},
	"E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD": {
		1: {Name: "ENC_JSON_IETF", DefiningModule: "openconfig-telemetry-types"},
		2: {Name: "ENC_PROTO3", DefiningModule: "openconfig-telemetry-types"},
		3: {Name: "ENC_XML", DefiningModule: "openconfig-telemetry-types"},
	},
	"E_OpenconfigTelemetryTypes_STREAM_PROTOCOL": {
		1: {Name: "STREAM_GRPC", DefiningModule: "openconfig-telemetry-types"},
		2: {Name: "STREAM_JSON_RPC", DefiningModule: "openconfig-telemetry-types"},
		3: {Name: "STREAM_SSH", DefiningModule: "openconfig-telemetry-types"},
		4: {Name: "STREAM_THRIFT_RPC", DefiningModule: "openconfig-telemetry-types"},
		5: {Name: "STREAM_WEBSOCKET_RPC", DefiningModule: "openconfig-telemetry-types"},
	},
	"E_Sample_Sample_ContainerVal_EnumVal": {
		1: {Name: "enum1"},
		2: {Name: "enum2"},
		31: {Name: "enum3"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xfd, 0x69, 0x73, 0xe3, 0x36,
		0xb7, 0x2e, 0x80, 0x7e, 0xef, 0x5f, 0xe1, 0x52, 0xed, 0xaa, 0x9b, 0x9c, 0x6a, 0xc5, 0x96, 0xe4,
		0xb1, 0xbf, 0xec, 0x52, 0x7b, 0xe8, 0xe8, 0xc4, 0x83, 0xae, 0xe5, 0xee, 0xe4, 0x3d, 0x89, 0xb7,
		0x0b, 0x22, 0x21, 0x09, 0xb7, 0x49, 0x90, 0x01, 0x41, 0x0f, 0x3b, 0xf1, 0x7f, 0xbf, 0xa5, 0xd1,
		0x76, 0xcb, 0x03, 0x01, 0x82, 0x94, 0x96, 0xfc, 0xa4, 0xde, 0x7a, 0x2d, 0xbb, 0x45, 0x90, 0x04,
		0xd6, 0xf0, 0xac, 0x07, 0x6b, 0x2d, 0xfc, 0xf3, 0x61, 0x6d, 0x6d, 0x6d, 0xad, 0x72, 0xca, 0x42,
		0x5e, 0xf9, 0xb4, 0x56, 0xf1, 0xf9, 0xb5, 0xf0, 0x78, 0xe5, 0xe3, 0xf8, 0xaf, 0xbf, 0x09, 0xe9,
		0x57, 0x3e, 0xad, 0xd5, 0x26, 0xbf, 0xee, 0x47, 0xb2, 0x27, 0xfa, 0x95, 0x4f, 0x6b, 0x1b, 0x93,
		0x3f, 0x1c, 0x08, 0x55, 0xf9, 0xb4, 0x36, 0x1e, 0x62, 0xf4, 0x07, 0x2f, 0x0a, 0xe3, 0x48, 0x72,
		0xa9, 0x93, 0x27, 0x7f, 0x7f, 0x72, 0x8b, 0x47, 0xdf, 0xf9, 0xf8, 0xf4, 0x1b, 0x4f, 0x6f, 0x37,
		0xfb, 0xf3, 0x8f, 0xb7, 0x9d, 0xfd, 0x43, 0x5b, 0xf1, 0x9e, 0xb8, 0x9d, 0xbb, 0xd3, 0x93, 0xbb,
		0x45, 0x5e, 0x35, 0x0e, 0x98, 0xee, 0x45, 0x2a, 0xfc, 0xe1, 0x76, 0xa3, 0xaf, 0x75, 0xa2, 0x54,
		0x79, 0xfc, 0xd9, 0x21, 0xc6, 0x8f, 0xc4, 0xef, 0x6e, 0x22, 0x35, 0x7c, 0xaa, 0x4a, 0x3c, 0xbe,
		0xdb, 0xc7, 0xe7, 0xbf, 0xf8, 0x2b, 0x4b, 0x9a, 0xaa, 0x9f, 0x86, 0x5c, 0xea, 0xca, 0xa7, 0x35,
		0xad, 0x52, 0xfe, 0xc2, 0x17, 0x1f, 0x7d, 0xeb, 0xc9, 0xc3, 0xcd, 0x7d, 0xfb, 0xfe, 0xc9, 0x5f,
		0xee, 0x7f, 0x78, 0xf7, 0x1f, 0xa7, 0x7e, 0x7e, 0x09, 0x5e, 0x7e, 0xa9, 0xb9, 0x95, 0x78, 0xe9,
		0xa5, 0x9e, 0x5f, 0x90, 0x37, 0x17, 0x26, 0xcb, 0x02, 0x19, 0x2e, 0x54, 0xd6, 0x05, 0x33, 0x5e,
		0x38, 0xe3, 0x05, 0x34, 0x5f, 0xc8, 0xe7, 0x17, 0xf4, 0x85, 0x85, 0x7d, 0x73, 0x81, 0x67, 0x5f,
		0xe8, 0x32, 0xef, 0x7b, 0x1c, 0x30, 0x99, 0x61, 0x32, 0xa6, 0x73, 0xfc, 0x70, 0xc9, 0x1b, 0xef,
		0xf6, 0xfa, 0xc2, 0x67, 0x16, 0x00, 0x13, 0x41, 0xb0, 0x14, 0x08, 0x53, 0xc1, 0xb0, 0x16, 0x10,
		0x6b, 0x41, 0xb1, 0x17, 0x98, 0xd7, 0x05, 0xe7, 0x0d, 0x01, 0xca, 0x2c, 0x48, 0x8f, 0x2c, 0xc7,
		0x64, 0x35, 0x33, 0xce, 0xe0, 0x83, 0x19, 0x19, 0x5d, 0x97, 0x71, 0x16, 0xb2, 0x89, 0x96, 0xb1,
		0x88, 0xd9, 0x88, 0x5a, 0x4e, 0x91, 0xb3, 0x15, 0xbd, 0xdc, 0x22, 0x98, 0x5b, 0x14, 0xf3, 0x8b,
		0x64, 0x36, 0xd1, 0xcc, 0x28, 0xa2, 0x0f, 0x8f, 0x23, 0x65, 0xa4, 0x99, 0x16, 0x91, 0x34, 0x5b,
		0xbf, 0xc4, 0x1b, 0xf0, 0x90, 0xc5, 0x4c, 0x0f, 0x86, 0x2f, 0xb2, 0x1e, 0xc5, 0x5c, 0x8e, 0x85,
		0x72, 0xf6, 0x46, 0xeb, 0x0f, 0xa8, 0xe3, 0xe1, 0xe3, 0xfa, 0xcc, 0x1e, 0xae, 0x1b, 0xc9, 0xf0,
		0xf8, 0x9e, 0x5a, 0xa5, 0x9e, 0x96, 0x13, 0xc9, 0x39, 0x9b, 0xdd, 0xb2, 0x3d, 0xb9, 0xe3, 0xd5,
		0xfe, 0xec, 0x8e, 0x0f, 0x1f, 0xaf, 0x3e, 0x4f, 0xef, 0x78, 0x35, 0x11, 0xec, 0x0f, 0x6e, 0x66,
		0x39, 0xc3, 0x0c, 0x57, 0x12, 0xcd, 0x34, 0x37, 0x57, 0xef, 0xf1, 0x65, 0x05, 0x6b, 0x77, 0x1d,
		0xda, 0x0d, 0xed, 0x2e, 0x4c, 0xbb, 0x4d, 0x44, 0xd8, 0x89, 0x72, 0x77, 0x46, 0x37, 0x74, 0xa5,
		0xdb, 0xb9, 0xdc, 0xbf, 0xe1, 0xac, 0xe7, 0x9f, 0xed, 0x4a, 0x26, 0x53, 0x94, 0x6b, 0x7e, 0x5f,
		0x9f, 0xd9, 0x97, 0xe7, 0xeb, 0x95, 0xb9, 0xaa, 0x78, 0x03, 0x96, 0x24, 0x22, 0xc9, 0x0e, 0xa6,
		0xa7, 0x17, 0x00, 0x4a, 0x03, 0x4a, 0x03, 0x4a, 0xc3, 0xd9, 0xbe, 0x6f, 0x67, 0x3b, 0xb1, 0x86,
		0xa5, 0x01, 0xe9, 0xfd, 0xf1, 0xfd, 0x00, 0xa3, 0x01, 0xa3, 0xa1, 0xd9, 0xa5, 0x68, 0x76, 0x49,
		0x20, 0x7a, 0xaa, 0xd8, 0xef, 0x10, 0x42, 0x67, 0x43, 0x94, 0xf9, 0xe7, 0xb6, 0x10, 0xf8, 0x9c,
		0x0d, 0xf1, 0x98, 0x21, 0x1d, 0x80, 0xe7, 0xf7, 0x08, 0x9e, 0x27, 0x52, 0x6d, 0xe8, 0x5f, 0x47,
		0x57, 0x99, 0xb9, 0xd7, 0x0d, 0x00, 0x67, 0xb8, 0xd7, 0x1f, 0x1f, 0xe7, 0xe2, 0x2e, 0xe6, 0x76,
		0x2b, 0x97, 0x68, 0x25, 0xa4, 0x11, 0xf4, 0x9d, 0x9a, 0xb7, 0xdd, 0xf7, 0xe5, 0xe6, 0xb2, 0x86,
		0x08, 0xb6, 0x5e, 0x2e, 0x43, 0x48, 0x60, 0xe9, 0xe4, 0xe2, 0xd4, 0xc0, 0xc3, 0xc5, 0x29, 0xdc,
		0x1b, 0xdc, 0x1b, 0xb8, 0x21, 0xb8, 0xb8, 0xf7, 0x1e, 0x41, 0xc6, 0x69, 0x79, 0xbc, 0x50, 0x9c,
		0x82, 0x13, 0x02, 0x27, 0x04, 0x8d, 0x2e, 0x5c, 0xa3, 0xcb, 0xe2, 0x83, 0xe2, 0xf4, 0x5d, 0x72,
		0x41, 0x6f, 0xa2, 0xc7, 0x7c, 0x73, 0x5a, 0x04, 0x3c, 0xee, 0xb1, 0xae, 0x12, 0x5e, 0x76, 0x84,
		0x3c, 0xf9, 0x3e, 0x40, 0x32, 0x40, 0x32, 0x40, 0x32, 0x5c, 0xea, 0xfb, 0x76, 0xa9, 0x63, 0x63,
		0x58, 0x1a, 0x4e, 0x3e, 0x1a, 0xdd, 0x0e, 0x50, 0x19, 0x50, 0x19, 0x7a, 0x5d, 0x86, 0x5e, 0x97,
		0x84, 0x96, 0x27, 0x6a, 0xfd, 0x0e, 0x01, 0x73, 0x26, 0x30, 0x99, 0x7b, 0x66, 0x8b, 0x81, 0xcd,
		0xd2, 0x04, 0x33, 0x4b, 0x00, 0x66, 0x00, 0x66, 0x00, 0x66, 0x38, 0xd6, 0x77, 0xef, 0x58, 0x65,
		0x89, 0x68, 0x59, 0x02, 0x2a, 0x03, 0x2a, 0x43, 0xa3, 0x0b, 0xd7, 0xe8, 0xd2, 0x70, 0xb2, 0x7c,
		0x9f, 0x20, 0x59, 0x16, 0x89, 0x90, 0x65, 0x11, 0xf0, 0x58, 0x48, 0xcd, 0xfb, 0x8a, 0x69, 0xee,
		0x57, 0x3d, 0xa1, 0xbc, 0x54, 0xe8, 0xec, 0x68, 0xf9, 0x99, 0x6b, 0x01, 0x9e, 0x01, 0x9e, 0x01,
		0x9e, 0xe1, 0x6a, 0xdf, 0xb7, 0xab, 0x9d, 0x37, 0x8c, 0xa5, 0x61, 0xe9, 0xd6, 0xec, 0xd6, 0xfb,
		0xe3, 0x3b, 0x03, 0x59, 0x03, 0x59, 0x43, 0xdd, 0xcb, 0x56, 0xf7, 0x92, 0x80, 0xf6, 0xbc, 0xb6,
		0xbf, 0x43, 0xd8, 0x6d, 0x0c, 0x43, 0x5d, 0x4e, 0x78, 0x11, 0x98, 0x3c, 0x53, 0x89, 0x86, 0x49,
		0x69, 0x46, 0xc6, 0x92, 0x0c, 0xe0, 0x6e, 0x0a, 0xb8, 0x3b, 0x73, 0x09, 0xc5, 0x6c, 0xe6, 0x03,
		0xce, 0x7a, 0x8a, 0xf7, 0xb2, 0xcc, 0xfa, 0xd4, 0xad, 0xee, 0x64, 0xf8, 0x6e, 0x7b, 0xa2, 0xa9,
		0xbf, 0xfc, 0x32, 0x41, 0x37, 0xeb, 0x23, 0x51, 0x2c, 0x40, 0x21, 0xe2, 0x48, 0x19, 0x84, 0xa5,
		0xa3, 0x6f, 0x23, 0x10, 0x45, 0x20, 0x8a, 0x40, 0x14, 0xc8, 0xf4, 0x7d, 0x23, 0xd3, 0xa1, 0x29,
		0x2c, 0x2d, 0xf4, 0x6c, 0x47, 0x0a, 0xd1, 0x26, 0xa2, 0x4d, 0xe8, 0x74, 0x09, 0x3a, 0x5d, 0x52,
		0x7c, 0x39, 0x52, 0xe9, 0x77, 0x18, 0x52, 0x66, 0x80, 0x90, 0x39, 0x67, 0xb5, 0x18, 0x98, 0x7c,
		0xc3, 0x55, 0x35, 0x49, 0xe3, 0x38, 0xb8, 0x33, 0x81, 0xcb, 0x8f, 0xae, 0x02, 0x6c, 0x06, 0x6c,
		0x06, 0x6c, 0x86, 0x8b, 0x7d, 0xef, 0x2e, 0xf6, 0xc1, 0x24, 0x96, 0x08, 0x9f, 0x6f, 0xb8, 0xea,
		0x8c, 0xee, 0x09, 0x14, 0x0d, 0x14, 0x0d, 0x15, 0x2f, 0x4f, 0xc5, 0x4b, 0x43, 0xd3, 0x0f, 0x1a,
		0xfe, 0x2e, 0x41, 0x75, 0x66, 0xa0, 0xe9, 0x66, 0x92, 0x0b, 0xc1, 0xd8, 0x2a, 0x8a, 0xb9, 0xd2,
		0x82, 0x1b, 0xf4, 0x32, 0x7e, 0x74, 0x0d, 0xf0, 0x35, 0xf0, 0xf5, 0x0b, 0x22, 0x75, 0x67, 0xee,
		0x7d, 0x67, 0x57, 0x02, 0x63, 0xc3, 0x01, 0xe7, 0x74, 0xc0, 0x59, 0xc5, 0xd5, 0x36, 0x2c, 0xcc,
		0x17, 0x1e, 0x5a, 0x8a, 0xb0, 0xb5, 0x28, 0xe7, 0x11, 0x69, 0x47, 0xa2, 0x9d, 0x57, 0xc4, 0x9d,
		0x89, 0xba, 0x33, 0x91, 0x77, 0x27, 0xfa, 0x66, 0x2a, 0x60, 0xa8, 0x0a, 0xd6, 0x2a, 0x31, 0xbb,
		0xd0, 0xa8, 0xc7, 0xe6, 0x8b, 0x62, 0x63, 0xd0, 0x73, 0xf3, 0x25, 0x35, 0xd9, 0xb0, 0xbc, 0xdc,
		0x56, 0x5d, 0x5c, 0xa8, 0x8d, 0x63, 0xf5, 0x71, 0xa5, 0x46, 0xce, 0xd5, 0xc9, 0xb9, 0x5a, 0xb9,
		0x57, 0x2f, 0x3b, 0x35, 0xb3, 0x54, 0xb7, 0xd9, 0xe3, 0x1b, 0xf7, 0x08, 0x7d, 0x85, 0x9d, 0x30,
		0xec, 0x19, 0xfa, 0xa2, 0xbb, 0xd9, 0xfd, 0x50, 0xce, 0xbc, 0x59, 0xcc, 0x59, 0xe5, 0x9a, 0x05,
		0xa9, 0x03, 0x73, 0x33, 0x1e, 0x06, 0xf6, 0x06, 0xf6, 0x06, 0xf6, 0xc6, 0x52, 0x72, 0x52, 0x29,
		0x22, 0xe9, 0xc2, 0xdc, 0xec, 0xe5, 0x18, 0x63, 0xf2, 0x3a, 0x7f, 0xe6, 0x5a, 0xd3, 0x7c, 0x32,
		0xeb, 0xd6, 0x08, 0x3b, 0x32, 0xc6, 0x39, 0xc5, 0xa4, 0x80, 0x99, 0xe9, 0x46, 0x51, 0xc0, 0x99,
		0x74, 0x39, 0x35, 0xb5, 0x15, 0x99, 0x1a, 0x21, 0xf5, 0xf6, 0xa6, 0xc3, 0x89, 0xd9, 0x74, 0x30,
		0xd4, 0x39, 0x93, 0xfd, 0xfc, 0x9a, 0xe5, 0x6e, 0xb2, 0x66, 0x0f, 0x76, 0x22, 0x64, 0x6e, 0x37,
		0xe3, 0x28, 0xd0, 0x7e, 0x73, 0xd8, 0x6f, 0x13, 0xb0, 0xb2, 0x57, 0xaf, 0x37, 0x1a, 0x3b, 0xf5,
		0x8d, 0xc6, 0xf6, 0xee, 0xd6, 0xe6, 0xce, 0xce, 0xd6, 0xee, 0xc6, 0xae, 0xe3, 0x3b, 0x1d, 0x29,
		0xe6, 0x69, 0x11, 0xc9, 0x03, 0xd1, 0x17, 0xa3, 0x13, 0xd3, 0x37, 0x9c, 0x8d, 0x7f, 0xff, 0xd1,
		0xe1, 0xe2, 0xb1, 0xdb, 0xc2, 0x16, 0x6f, 0xa3, 0xb4, 0xc5, 0xdb, 0x21, 0xb4, 0x78, 0x1f, 0x96,
		0x63, 0x94, 0xcb, 0x15, 0x31, 0xd5, 0xa9, 0x6b, 0x5b, 0xbd, 0x0b, 0x5b, 0xbd, 0x5c, 0xea, 0xbe,
		0x01, 0xcb, 0x4c, 0x65, 0xa9, 0x6a, 0xbb, 0x9b, 0x9b, 0xdb, 0x3b, 0x9b, 0x9b, 0x1b, 0x3b, 0x8d,
		0x9d, 0x8d, 0xbd, 0xad, 0xad, 0xda, 0x76, 0x6d, 0x0b, 0xa6, 0xf9, 0xbd, 0x9a, 0x66, 0x9f, 0x7b,
		0x22, 0x64, 0x81, 0x53, 0xeb, 0x5c, 0xab, 0x3b, 0x18, 0x6b, 0x4e, 0x86, 0xea, 0xb0, 0xf9, 0x76,
		0xcb, 0x51, 0x87, 0xcd, 0xa7, 0x62, 0xf3, 0x1b, 0x58, 0xaa, 0x15, 0x31, 0xf0, 0x1f, 0xca, 0xbd,
		0xef, 0xfd, 0x92, 0xed, 0x8b, 0x5a, 0xe6, 0xea, 0xcd, 0xae, 0xb7, 0x4e, 0x20, 0x9b, 0xe5, 0x51,
		0x4d, 0x3f, 0x5a, 0x64, 0xe7, 0x3e, 0x3c, 0x85, 0x5d, 0x7a, 0xd9, 0xec, 0x19, 0xa6, 0x1f, 0xcd,
		0xb2, 0x75, 0xcd, 0x57, 0xc8, 0x60, 0x75, 0xec, 0x36, 0x9e, 0xf3, 0x6c, 0x38, 0x5b, 0xe2, 0x59,
		0xe4, 0x63, 0x20, 0x1f, 0xc3, 0xdc, 0xee, 0x58, 0x6f, 0xd4, 0x58, 0x74, 0x42, 0x78, 0x11, 0xfe,
		0x5a, 0x30, 0x5d, 0x56, 0x9d, 0x12, 0xca, 0x31, 0x18, 0x66, 0x69, 0xff, 0x73, 0xf3, 0x69, 0x9a,
		0x38, 0xbd, 0xe6, 0x22, 0x85, 0xab, 0x0e, 0x93, 0x01, 0x93, 0x91, 0xf1, 0x31, 0xad, 0x53, 0xb8,
		0xc6, 0x7a, 0x9a, 0x2a, 0xd6, 0x0d, 0x1c, 0xe4, 0x56, 0x3c, 0x19, 0x0d, 0x29, 0x16, 0x48, 0xb1,
		0x58, 0x98, 0xba, 0xe5, 0x8b, 0x61, 0x16, 0x9f, 0x62, 0x91, 0x7f, 0xcf, 0x3c, 0xe7, 0x5e, 0x79,
		0x39, 0x39, 0x5d, 0xc8, 0x20, 0x85, 0xb9, 0x81, 0xb9, 0x41, 0x06, 0x29, 0x32, 0x48, 0x61, 0x6f,
		0x60, 0x6f, 0xde, 0x8f, 0xbd, 0x41, 0x06, 0x69, 0x11, 0x46, 0xd8, 0x91, 0x31, 0xce, 0x29, 0x26,
		0x05, 0xcc, 0x0c, 0x32, 0x48, 0x5f, 0x9c, 0x1a, 0x64, 0x90, 0x1a, 0x3c, 0x18, 0x32, 0x48, 0x9f,
		0xbb, 0x13, 0xf6, 0xac, 0x91, 0x41, 0xea, 0x0e, 0x5c, 0xb8, 0x1f, 0x05, 0x19, 0xa4, 0x2f, 0x48,
		0x2d, 0x32, 0x48, 0x97, 0x4c, 0xdd, 0x91, 0x4d, 0x44, 0x66, 0xa9, 0x90, 0x41, 0x0a, 0xd3, 0x8c,
		0x0c, 0xd2, 0x77, 0x64, 0xf3, 0x91, 0x41, 0x8a, 0x0c, 0x52, 0x18, 0xf8, 0x92, 0x0d, 0x3c, 0x32,
		0x48, 0x97, 0x26, 0x83, 0xd4, 0x26, 0x87, 0x69, 0xcd, 0x6d, 0x02, 0xa9, 0x41, 0x33, 0x48, 0xf3,
		0xf5, 0x71, 0xdb, 0x26, 0xec, 0x37, 0x7e, 0x67, 0xb8, 0xb3, 0x5c, 0x39, 0x16, 0x89, 0x6e, 0x6a,
		0x6d, 0xd8, 0x5e, 0xec, 0x44, 0xc8, 0xc3, 0x80, 0x87, 0xc3, 0xd9, 0x33, 0xb3, 0x50, 0x43, 0x0b,
		0xfc, 0xe8, 0xca, 0x7c, 0x78, 0xb6, 0x72, 0xa6, 0x7c, 0xae, 0xb8, 0xff, 0x79, 0xf8, 0xd6, 0x32,
		0x0d, 0x02, 0xda, 0x4d, 0x4f, 0xe7, 0xc5, 0xbf, 0x84, 0xae, 0xa7, 0xf3, 0x02, 0xff, 0xce, 0xfa,
		0x9e, 0x66, 0x6d, 0xff, 0xe9, 0x64, 0x92, 0x8b, 0x68, 0x7a, 0x9a, 0x2d, 0x4b, 0xd4, 0x28, 0x2b,
		0xd4, 0xb8, 0xd5, 0x69, 0x1d, 0xad, 0x4e, 0x33, 0x18, 0x94, 0x25, 0x6f, 0x75, 0xca, 0x82, 0x20,
		0xf2, 0x46, 0x27, 0x35, 0x8e, 0x9a, 0x01, 0x9b, 0x77, 0x3c, 0xfd, 0x71, 0x00, 0xb3, 0xc6, 0xa7,
		0x1b, 0x68, 0x7c, 0x8a, 0xc6, 0xa7, 0x3f, 0x3e, 0x8e, 0xf1, 0xe6, 0xfd, 0x13, 0xde, 0xba, 0x51,
		0x37, 0x59, 0xb4, 0x89, 0x1c, 0x1a, 0xec, 0x75, 0x58, 0x72, 0x12, 0x16, 0x98, 0x3a, 0x0f, 0xc7,
		0x90, 0x37, 0x7b, 0x27, 0x67, 0x20, 0xea, 0x22, 0xe0, 0xb4, 0xc9, 0x9b, 0xca, 0x13, 0xeb, 0xbb,
		0x9a, 0xb2, 0xcd, 0xfa, 0xde, 0xe6, 0xde, 0xf6, 0x4e, 0x7d, 0x6f, 0x6b, 0x81, 0x73, 0x57, 0x50,
		0xe8, 0x72, 0x59, 0xe2, 0x01, 0x18, 0x3e, 0x4f, 0x3c, 0x25, 0x62, 0x23, 0x30, 0xfe, 0x88, 0x26,
		0x7d, 0xb8, 0x18, 0x2e, 0x09, 0x2e, 0x69, 0x61, 0x2e, 0xc9, 0x38, 0x55, 0xca, 0x30, 0x25, 0xca,
		0x8d, 0xae, 0xf1, 0x30, 0xb6, 0x69, 0x77, 0x3f, 0xbe, 0x2c, 0x6b, 0x3f, 0x73, 0xde, 0x63, 0x69,
		0x30, 0x5a, 0xd1, 0x1e, 0x0b, 0x12, 0x0e, 0xbd, 0x84, 0x5e, 0x2e, 0x4e, 0x2f, 0xcd, 0x13, 0xf5,
		0x0c, 0x13, 0xf2, 0x1c, 0x29, 0xe6, 0xdf, 0xa9, 0x88, 0x87, 0x13, 0x5e, 0xed, 0x31, 0x11, 0xa4,
		0xca, 0xe2, 0x44, 0xa8, 0xf9, 0x21, 0xde, 0xb7, 0xc2, 0xb2, 0x80, 0xa9, 0x30, 0x79, 0x97, 0xea,
		0x3a, 0x79, 0x75, 0x28, 0x6b, 0xd1, 0xca, 0x1a, 0x8a, 0x24, 0x64, 0xda, 0x1b, 0xe4, 0xd1, 0xd6,
		0xd9, 0x18, 0x50, 0x57, 0xa8, 0x2b, 0xd4, 0xd5, 0xbd, 0xba, 0xf6, 0x84, 0x0a, 0x6f, 0x98, 0xe2,
		0xd5, 0x6b, 0xae, 0x12, 0xab, 0x28, 0x73, 0x6e, 0x04, 0x40, 0x5a, 0x40, 0x5a, 0x84, 0x9a, 0xaf,
		0xde, 0x73, 0xc0, 0x94, 0x9f, 0x4f, 0xeb, 0xe6, 0x46, 0x80, 0xd6, 0x41, 0xeb, 0xa0, 0x75, 0xaf,
		0xde, 0x53, 0xf8, 0xe6, 0x7a, 0x26, 0x7c, 0x68, 0x16, 0x34, 0x0b, 0x9a, 0xf5, 0xfa, 0x3d, 0x47,
		0xdb, 0xdf, 0x56, 0x7e, 0x6c, 0x76, 0x25, 0xb4, 0x0c, 0x5a, 0x06, 0x2d, 0x7b, 0xf5, 0x9e, 0x21,
		0x0f, 0x23, 0x65, 0xb1, 0x43, 0x31, 0xb9, 0x0e, 0xc7, 0xf1, 0x42, 0xc3, 0x72, 0x6a, 0x98, 0xf1,
		0x71, 0xbc, 0xec, 0x9a, 0x89, 0xc0, 0xaa, 0x5b, 0xdd, 0x43, 0x72, 0xd5, 0x6c, 0x08, 0x34, 0x81,
		0x2d, 0x48, 0xd0, 0x9d, 0x09, 0xbc, 0x33, 0xc1, 0x77, 0xa7, 0x00, 0x66, 0x8a, 0x60, 0xa8, 0x10,
		0xf6, 0xae, 0x67, 0x6e, 0xe5, 0xad, 0xcb, 0x8d, 0x73, 0x94, 0x17, 0xe7, 0x2c, 0x2d, 0xcb, 0xd1,
		0x59, 0xc6, 0x45, 0xe9, 0x98, 0xa3, 0x9a, 0x53, 0x57, 0xf5, 0x46, 0x2e, 0xeb, 0x8b, 0x72, 0x94,
		0x7e, 0x39, 0x29, 0xf5, 0x72, 0x3d, 0xb5, 0xee, 0xcb, 0x77, 0x9d, 0xce, 0x76, 0x49, 0xd5, 0x4b,
		0x97, 0x4b, 0xd0, 0x5a, 0x39, 0xd5, 0x22, 0x10, 0xff, 0xcb, 0x7d, 0x7b, 0x7f, 0x3c, 0x1b, 0x01,
		0xee, 0x18, 0xee, 0x18, 0xee, 0x18, 0xee, 0x18, 0xee, 0x18, 0xee, 0x18, 0xee, 0xb8, 0xa8, 0x90,
		0xbb, 0xec, 0x6a, 0xcc, 0x51, 0x99, 0xdc, 0xba, 0x11, 0x65, 0xb4, 0x66, 0x5f, 0x21, 0x38, 0xaa,
		0x31, 0xbe, 0x3a, 0x19, 0xdf, 0xad, 0x4c, 0x2a, 0xad, 0xd7, 0xaf, 0xfa, 0x26, 0x87, 0x4c, 0x3c,
		0x90, 0x69, 0xd3, 0x2b, 0x41, 0x58, 0x83, 0x4e, 0xcb, 0xa9, 0xdb, 0xf6, 0x84, 0xb5, 0x6f, 0xd6,
		0x1d, 0xe0, 0x81, 0xae, 0x36, 0xb8, 0xa6, 0xcd, 0xb4, 0xe6, 0x4a, 0x1a, 0xe3, 0x91, 0xca, 0xff,
		0xfc, 0xb9, 0x51, 0xdd, 0xbb, 0xfc, 0x67, 0xf3, 0xfe, 0xaf, 0xbf, 0xaa, 0xe3, 0x8f, 0xf5, 0xc7,
		0x1f, 0xff, 0x2b, 0xfb, 0x74, 0x5f, 0x9a, 0x3c, 0xee, 0x59, 0xa7, 0xf5, 0xc7, 0x32, 0x3c, 0x73,
		0xc9, 0x66, 0xcc, 0xa8, 0x29, 0xff, 0x13, 0x33, 0x66, 0xd2, 0x2e, 0x01, 0x66, 0x0c, 0x66, 0xcc,
		0xbd, 0x19, 0xa3, 0xb1, 0xef, 0x66, 0xa7, 0x61, 0xd0, 0x2e, 0x68, 0x17, 0xb4, 0xeb, 0x6d, 0xed,
		0x8a, 0x62, 0xae, 0xaa, 0xc3, 0xa8, 0x23, 0x4d, 0xcc, 0x95, 0xec, 0xf1, 0xc5, 0xd0, 0x35, 0xe8,
		0xda, 0xc2, 0x74, 0x4d, 0xf8, 0x5c, 0x6a, 0xa1, 0xef, 0xcc, 0xce, 0x71, 0x9c, 0x29, 0x9c, 0x49,
		0xf3, 0xa7, 0xd6, 0xe4, 0x56, 0x9f, 0x59, 0x92, 0x63, 0x5b, 0x7d, 0xff, 0xec, 0xa4, 0x7d, 0x76,
		0x7a, 0x78, 0x7a, 0x71, 0x75, 0xd6, 0x3e, 0x3c, 0xbf, 0xea, 0x5c, 0x34, 0x2f, 0xbe, 0x76, 0x4c,
		0xd7, 0x7f, 0x44, 0x28, 0x25, 0x56, 0x8c, 0x65, 0xce, 0x53, 0x5d, 0x9a, 0xfb, 0x17, 0xad, 0x6f,
		0x87, 0x95, 0x32, 0x1a, 0x2a, 0xe4, 0x7c, 0xd2, 0x83, 0x56, 0xa7, 0xf9, 0xf9, 0xf8, 0xf0, 0x80,
		0xc2, 0xb3, 0xb6, 0x4e, 0xad, 0xe7, 0xf5, 0x43, 0x31, 0xd4, 0xdb, 0x7d, 0x89, 0x9e, 0x28, 0x66,
		0x6a, 0x6c, 0x8a, 0x0c, 0x9d, 0xd0, 0xe4, 0x3a, 0xf8, 0x1f, 0xf8, 0x9f, 0x85, 0xf9, 0x1f, 0xf3,
		0x33, 0x84, 0x6d, 0xce, 0x0e, 0x7e, 0x7c, 0x66, 0xf0, 0xf8, 0x7f, 0x0f, 0xc4, 0xb1, 0xf1, 0x19,
		0xc2, 0xce, 0x94, 0x56, 0x57, 0x65, 0x64, 0xa5, 0xb5, 0xa3, 0x0b, 0xa1, 0xb6, 0x50, 0x5b, 0x84,
		0x68, 0xaf, 0xde, 0x53, 0xf1, 0x30, 0xba, 0x36, 0xca, 0xe2, 0x9c, 0xbd, 0xe0, 0xc3, 0xa5, 0xd0,
		0x33, 0xe8, 0xd9, 0xc2, 0xf4, 0x8c, 0x48, 0x35, 0x76, 0xc2, 0x95, 0x60, 0x81, 0x95, 0x3b, 0x7b,
		0xb8, 0x14, 0x8a, 0x06, 0x45, 0x83, 0x43, 0x7b, 0x5d, 0xcf, 0xa2, 0x9e, 0xce, 0x57, 0x7f, 0x3d,
		0x37, 0x02, 0xb4, 0x0e, 0x5a, 0x07, 0xad, 0x7b, 0xf5, 0x9e, 0x9a, 0x87, 0x31, 0x57, 0x4c, 0x5b,
		0x75, 0xf0, 0x7a, 0x7c, 0x31, 0x2a, 0xd9, 0xa0, 0x6b, 0x39, 0x75, 0xcd, 0xbc, 0x92, 0x2d, 0x60,
		0x2a, 0xac, 0x26, 0xfc, 0x9a, 0x2b, 0x61, 0xd0, 0x26, 0x72, 0x6e, 0xe1, 0x7f, 0x18, 0x07, 0x49,
		0xf4, 0x05, 0x89, 0xbc, 0x33, 0xd1, 0x77, 0xa6, 0x02, 0xee, 0x54, 0xc1, 0x4c, 0x25, 0x0c, 0x55,
		0xc3, 0xde, 0x1d, 0xcd, 0xad, 0xbc, 0xdd, 0xa6, 0xd8, 0x9c, 0xfd, 0xb6, 0xc8, 0x4d, 0xce, 0xb7,
		0x49, 0x36, 0xf7, 0x22, 0x67, 0xed, 0xc3, 0xd3, 0xfd, 0xb3, 0xd3, 0xa3, 0xd6, 0x97, 0xab, 0xe6,
		0x71, 0xf3, 0xfc, 0xe4, 0xaa, 0x73, 0xf8, 0xed, 0xf0, 0xbc, 0x75, 0xf1, 0x9f, 0x4a, 0x9e, 0x3e,
		0xd9, 0x49, 0xae, 0x43, 0xdd, 0x72, 0xa6, 0x94, 0x4f, 0x5f, 0xed, 0xeb, 0xe9, 0x6f, 0xa7, 0x67,
		0xbf, 0x9f, 0x56, 0x16, 0x91, 0x1c, 0xef, 0xe8, 0x15, 0x4e, 0x9a, 0xff, 0xf7, 0xec, 0x9c, 0xf2,
		0x0b, 0xfc, 0xde, 0x3c, 0x3f, 0x6d, 0x9d, 0x7e, 0xa1, 0xfc, 0x0a, 0xfb, 0xe7, 0xad, 0x8b, 0xd6,
		0x7e, 0xf3, 0x98, 0xb4, 0x1c, 0xb5, 0x4e, 0x73, 0xc9, 0x91, 0xd5, 0x95, 0x97, 0x4b, 0xd3, 0xd7,
		0xde, 0xa4, 0x8c, 0x70, 0x82, 0x62, 0xcc, 0xb2, 0x76, 0x5e, 0xc2, 0x42, 0x26, 0xe9, 0x3b, 0x40,
		0x42, 0x40, 0x42, 0x04, 0x91, 0x90, 0x39, 0xff, 0x3c, 0x87, 0x82, 0x6a, 0x4b, 0xa3, 0xf6, 0x7a,
		0xa0, 0x78, 0x32, 0x88, 0x02, 0x3f, 0xaf, 0xe6, 0x3f, 0x0c, 0x04, 0xe5, 0x87, 0xf2, 0xaf, 0x74,
		0x2d, 0xb1, 0xd1, 0x89, 0x4c, 0x3f, 0xca, 0xf9, 0x0e, 0x6a, 0x89, 0xd7, 0xec, 0xc3, 0x2c, 0xd4,
		0x12, 0x17, 0x39, 0xb5, 0x79, 0x4f, 0x7a, 0x2a, 0x64, 0x8e, 0xdf, 0x51, 0x43, 0x0f, 0x76, 0xdd,
		0xcf, 0xd3, 0x5b, 0xab, 0xff, 0xce, 0x5c, 0x6f, 0x55, 0xdf, 0xc5, 0x3c, 0x81, 0x03, 0x7e, 0xc5,
		0x01, 0x4f, 0xa6, 0x68, 0xe5, 0xdc, 0xb0, 0xcf, 0x3d, 0x11, 0xb2, 0x20, 0x57, 0x57, 0x8f, 0x5a,
		0xdd, 0xe2, 0xda, 0x39, 0xcb, 0x56, 0x7b, 0xaf, 0xfe, 0xbc, 0x0e, 0x7f, 0x5e, 0x94, 0x3f, 0x6f,
		0xac, 0xe0, 0xd4, 0xbe, 0x23, 0x37, 0x2e, 0x64, 0xa2, 0x99, 0x41, 0xf1, 0xc1, 0x9c, 0x75, 0x9b,
		0x0e, 0x00, 0x77, 0x0e, 0x77, 0x0e, 0x77, 0x0e, 0x77, 0x0e, 0x77, 0x0e, 0x77, 0x0e, 0x77, 0xbe,
		0x38, 0x77, 0xae, 0xb9, 0xba, 0x66, 0x41, 0x1e, 0x7f, 0x3e, 0x19, 0xe1, 0x7d, 0x38, 0x74, 0xf8,
		0xf1, 0x97, 0xfc, 0xf8, 0x8a, 0xba, 0xef, 0x44, 0x33, 0x5d, 0xb5, 0x14, 0xf2, 0xb5, 0x9c, 0x7d,
		0x36, 0xbf, 0xca, 0xb1, 0x2d, 0xab, 0x48, 0x26, 0xa3, 0x84, 0x7b, 0x91, 0xf4, 0xad, 0x64, 0x0f,
		0x1c, 0x3b, 0x9c, 0x78, 0x19, 0x53, 0x8b, 0x7e, 0x9d, 0xcb, 0xe2, 0xd7, 0x43, 0x0b, 0xe9, 0x78,
		0xe8, 0xb9, 0xc6, 0x6e, 0x11, 0x9e, 0xc3, 0xad, 0x23, 0x3c, 0x47, 0x78, 0x8e, 0xf0, 0x1c, 0xe1,
		0x39, 0xc2, 0xf3, 0x45, 0xba, 0xf1, 0xaa, 0x16, 0x21, 0xcf, 0xe5, 0xcb, 0xc7, 0x23, 0x20, 0x3c,
		0x47, 0x78, 0xbe, 0x82, 0xee, 0x7b, 0x28, 0xdb, 0x5a, 0x78, 0xdf, 0x93, 0xd2, 0x0f, 0xc1, 0x40,
		0x70, 0x8e, 0xe0, 0x1c, 0xc1, 0x39, 0xbc, 0xba, 0x85, 0x57, 0xb7, 0x50, 0xbc, 0x07, 0x87, 0x2e,
		0x24, 0x82, 0x73, 0x38, 0x75, 0x04, 0xe7, 0x08, 0xce, 0x11, 0x9c, 0x23, 0x38, 0x47, 0x70, 0xbe,
		0x48, 0x37, 0x9e, 0x37, 0x38, 0x9f, 0x8e, 0x80, 0xe0, 0x1c, 0xc1, 0x39, 0x82, 0x73, 0x04, 0xe7,
		0x08, 0xce, 0x11, 0x9c, 0x23, 0x38, 0x77, 0xef, 0xd5, 0x57, 0xe0, 0xa4, 0x4b, 0xf3, 0xbe, 0x72,
		0x6b, 0x79, 0x8f, 0xbb, 0xbc, 0x78, 0x74, 0xcb, 0x32, 0xdb, 0xef, 0x99, 0xf8, 0x9d, 0x07, 0x5f,
		0x33, 0xbc, 0x0a, 0xcd, 0x2d, 0xd1, 0x70, 0x2f, 0xa7, 0x76, 0xdb, 0x37, 0xb7, 0x4c, 0x65, 0xf6,
		0xfe, 0xaa, 0x4f, 0x08, 0x8a, 0x3d, 0x83, 0x6b, 0x26, 0x8f, 0x67, 0x86, 0x47, 0xd0, 0x1a, 0xed,
		0x49, 0x6b, 0xb4, 0x5f, 0x9b, 0xe7, 0x07, 0xbf, 0x37, 0xcf, 0x0f, 0xaf, 0x66, 0x67, 0x0b, 0xd1,
		0x6f, 0x8f, 0x76, 0x74, 0xfe, 0x95, 0x74, 0x5b, 0xae, 0x5f, 0x9b, 0x9d, 0x4e, 0xab, 0x43, 0xf9,
		0x15, 0xda, 0x67, 0xe7, 0x17, 0xa4, 0x97, 0xe0, 0xec, 0xf4, 0xe2, 0xfc, 0xec, 0xf8, 0xf8, 0xf0,
		0xfc, 0x6a, 0xbf, 0x79, 0x7e, 0x40, 0xf9, 0x55, 0x3a, 0x17, 0x67, 0xe7, 0xcd, 0x2f, 0x87, 0x94,
		0x5f, 0xe1, 0xa8, 0x79, 0x4a, 0x5b, 0x19, 0x7e, 0x3f, 0x3c, 0xbf, 0xea, 0x7c, 0x6d, 0xb7, 0x8f,
		0xff, 0x43, 0x5a, 0x92, 0x0e, 0x4f, 0x3b, 0xb4, 0x7b, 0x36, 0xee, 0xb7, 0xbf, 0xd2, 0xd6, 0x83,
		0xcf, 0xe7, 0xad, 0x7d, 0xca, 0x6f, 0xf0, 0xb9, 0xb9, 0xff, 0x5b, 0xfb, 0xb8, 0x79, 0x4a, 0xda,
		0x1c, 0x1d, 0xb7, 0x4e, 0x0f, 0xa9, 0x7b, 0x85, 0xd6, 0xe9, 0xc5, 0xe1, 0x97, 0xf3, 0xe6, 0xc5,
		0xe1, 0xc1, 0xd5, 0x7e, 0xeb, 0x7c, 0xff, 0x6b, 0x8b, 0xb4, 0xbb, 0xbe, 0x38, 0x6f, 0x9e, 0x76,
		0xf6, 0x0f, 0x5b, 0xdf, 0x0e, 0x57, 0xaf, 0x15, 0xe8, 0x47, 0x44, 0x37, 0xf6, 0xd1, 0x4d, 0xe7,
		0xec, 0xe8, 0x62, 0xd5, 0xa2, 0x9b, 0xb3, 0xf6, 0xe1, 0x79, 0xf3, 0xa2, 0x75, 0xfa, 0xe5, 0xaa,
		0xf3, 0x9f, 0xce, 0xc5, 0xe1, 0xc9, 0xd5, 0xd7, 0xf6, 0x41, 0xf3, 0x82, 0xb4, 0x45, 0xfd, 0xf1,
		0x95, 0xde, 0x6f, 0x3f, 0xdf, 0xcb, 0x12, 0xb9, 0xc5, 0x34, 0xe1, 0x7e, 0x35, 0x8e, 0x6e, 0xb8,
		0x32, 0x67, 0x18, 0x1f, 0x5d, 0x0b, 0x9e, 0x11, 0x3c, 0x63, 0x3e, 0xcb, 0x92, 0x87, 0x67, 0x34,
		0x6d, 0xd3, 0x69, 0xd1, 0x9e, 0xd3, 0x72, 0xe3, 0xd3, 0xc2, 0x15, 0xe7, 0xd9, 0xe8, 0xcc, 0xb9,
		0x0b, 0x97, 0x77, 0x63, 0xd3, 0xc5, 0x16, 0x9b, 0x85, 0x23, 0xca, 0xb5, 0x81, 0xe9, 0x6a, 0xca,
		0xf2, 0xb6, 0xd3, 0x74, 0x32, 0x77, 0xcb, 0xee, 0x90, 0x3e, 0xe4, 0x58, 0xf9, 0x4a, 0x33, 0xed,
		0x0f, 0xcd, 0x15, 0xf7, 0x33, 0x69, 0xa1, 0xa1, 0x2f, 0x5b, 0x7f, 0x64, 0x01, 0x3f, 0x3d, 0xda,
		0x75, 0x7c, 0xf6, 0xcf, 0x4f, 0xfe, 0x3a, 0xda, 0x8d, 0xcc, 0xea, 0x00, 0x0f, 0x78, 0xe2, 0x29,
		0x11, 0x4f, 0xf6, 0x4a, 0x2b, 0x4d, 0xdf, 0x4f, 0xd6, 0x92, 0x98, 0x7b, 0xa2, 0x27, 0xbc, 0xb5,
		0x51, 0x6f, 0xed, 0x64, 0x4d, 0xf1, 0x80, 0x69, 0xee, 0xaf, 0xe9, 0x68, 0x8d, 0xad, 0xcd, 0xee,
		0xf9, 0xcb, 0x8a, 0x1c, 0x9e, 0x35, 0x7e, 0xc9, 0x77, 0xe9, 0x61, 0x27, 0xaf, 0x4e, 0xe5, 0xe0,
		0x2c, 0xfe, 0x77, 0x2a, 0xe2, 0xe1, 0xe3, 0x57, 0x7b, 0x4c, 0x04, 0x26, 0x67, 0xbf, 0xcd, 0xad,
		0xfb, 0xfc, 0x50, 0x86, 0x33, 0xf9, 0x83, 0xde, 0xb4, 0x7a, 0xe3, 0xe5, 0x58, 0xd3, 0x03, 0xbe,
		0x36, 0x60, 0xca, 0xbf, 0x61, 0x8a, 0xaf, 0x09, 0xe9, 0x0b, 0x8f, 0x69, 0x9e, 0xac, 0xe9, 0x01,
		0xd3, 0xa3, 0x7f, 0x9b, 0xa9, 0xcf, 0xff, 0x27, 0x59, 0x8b, 0x07, 0x77, 0x89, 0xf0, 0x58, 0xb0,
		0x36, 0x7b, 0x9a, 0xbf, 0xe4, 0x80, 0x25, 0x6b, 0xc3, 0x47, 0xe2, 0xbe, 0xf9, 0x13, 0xf5, 0x58,
		0x1a, 0x8c, 0x96, 0xb6, 0xc7, 0x82, 0xe4, 0xbd, 0xa4, 0x2c, 0x1a, 0xab, 0x6f, 0x5e, 0x35, 0x76,
		0xa6, 0xce, 0xce, 0xd4, 0xda, 0x95, 0x7a, 0x97, 0xc2, 0x05, 0xe1, 0x08, 0x8c, 0x79, 0x73, 0x16,
		0x8a, 0x24, 0x64, 0xda, 0x1b, 0xb8, 0xb0, 0x67, 0xb3, 0xb1, 0xca, 0x36, 0x68, 0x6b, 0x42, 0x26,
		0x5c, 0x0d, 0x71, 0x82, 0x90, 0x3a, 0x1a, 0xfe, 0xdb, 0x5f, 0x92, 0xf5, 0x7a, 0xdc, 0x1b, 0xfe,
		0xe9, 0x59, 0xb3, 0x17, 0x44, 0xde, 0x28, 0x49, 0x6b, 0x4d, 0x24, 0x6b, 0x51, 0x6f, 0x8d, 0xad,
		0xf9, 0xa2, 0xd7, 0xe3, 0x6a, 0x38, 0x96, 0xbe, 0x8b, 0xf9, 0xf0, 0x1e, 0x72, 0xed, 0x66, 0xc0,
		0xf4, 0x5f, 0x52, 0x24, 0x6b, 0xe3, 0xac, 0xa8, 0x54, 0xc1, 0x32, 0xc2, 0x32, 0xc2, 0x32, 0xd2,
		0xb3, 0x8c, 0xa5, 0x84, 0x6c, 0x97, 0x6f, 0x85, 0x6c, 0x66, 0x99, 0xa1, 0xf9, 0x32, 0x42, 0x2b,
		0x59, 0xce, 0x0f, 0xb7, 0xcf, 0xfe, 0x7c, 0x5d, 0x7c, 0x5f, 0x9e, 0xa7, 0x57, 0xc4, 0xb2, 0x92,
		0xe8, 0x48, 0xb1, 0xfe, 0xdb, 0x52, 0xf8, 0xa8, 0xf9, 0xde, 0xf8, 0x82, 0x37, 0xe6, 0x3d, 0x5b,
		0x0c, 0x98, 0xd9, 0x64, 0x9a, 0x98, 0x48, 0x4b, 0x3e, 0xd5, 0xd4, 0x08, 0x5a, 0x1b, 0x3d, 0x6b,
		0x23, 0x67, 0xcf, 0x97, 0xe6, 0xa3, 0x3d, 0xb2, 0xc6, 0x6d, 0x15, 0x6f, 0xba, 0x9a, 0x86, 0xd4,
		0xc7, 0xe4, 0x3a, 0x9c, 0xcd, 0x0d, 0x0a, 0x3f, 0x27, 0xc5, 0x50, 0x7e, 0x21, 0xc0, 0xc8, 0x1a,
		0xae, 0x1b, 0x49, 0x70, 0x2e, 0x3f, 0x30, 0xba, 0xdf, 0xd5, 0x44, 0xa8, 0x4b, 0xdc, 0xa6, 0x1b,
		0x3b, 0x38, 0x63, 0xd5, 0x36, 0xe2, 0x26, 0x6d, 0x35, 0xbb, 0x0e, 0xcd, 0x86, 0x66, 0x17, 0xa4,
		0xd9, 0x26, 0x02, 0xec, 0x40, 0xb1, 0x33, 0x00, 0xbd, 0xd2, 0x76, 0x3b, 0x4a, 0x83, 0xce, 0x59,
		0x10, 0x65, 0xfe, 0xb9, 0x2d, 0x04, 0x3e, 0xa7, 0xdd, 0x87, 0x77, 0x32, 0x00, 0xd1, 0x4f, 0x2e,
		0x03, 0x94, 0x06, 0x94, 0x7e, 0x4d, 0xb0, 0x2c, 0xbc, 0xee, 0xe3, 0xab, 0x01, 0xab, 0xe1, 0x7c,
		0x73, 0x3a, 0x5f, 0xe3, 0x9d, 0x3b, 0xc3, 0x48, 0x30, 0x5f, 0x44, 0x68, 0x29, 0xc2, 0x4b, 0xc3,
		0xdb, 0xe2, 0x6c, 0x67, 0xa7, 0xa2, 0x5f, 0x0e, 0x77, 0x6b, 0xaa, 0x12, 0xb3, 0x0b, 0x27, 0xe8,
		0x25, 0x67, 0x76, 0xf1, 0x68, 0x94, 0x8f, 0x0b, 0xc9, 0x37, 0xb2, 0x55, 0x17, 0x17, 0x6a, 0xe3,
		0x58, 0x7d, 0x5c, 0xa9, 0x91, 0x73, 0x75, 0x72, 0xae, 0x56, 0xee, 0xd5, 0xcb, 0x4e, 0xcd, 0x2c,
		0xd5, 0x6d, 0xf6, 0xf8, 0xd6, 0x5b, 0x26, 0x73, 0x92, 0x13, 0x70, 0xd6, 0xb3, 0x2b, 0x32, 0x98,
		0xf3, 0x37, 0x3b, 0x39, 0xc6, 0x68, 0x4f, 0xe2, 0xa5, 0x5f, 0x7e, 0x59, 0x7f, 0xfc, 0xbf, 0x87,
		0xf0, 0x68, 0xec, 0x0a, 0xd7, 0x47, 0x0a, 0x5f, 0x52, 0xd3, 0x8f, 0x62, 0x2d, 0xa7, 0x65, 0x24,
		0x9f, 0x3f, 0xce, 0x7c, 0x1c, 0x74, 0x3d, 0xf9, 0x6d, 0xdd, 0x0a, 0x6e, 0xe4, 0x89, 0x48, 0x1f,
		0x3f, 0xca, 0x93, 0xdf, 0x8c, 0x98, 0x3d, 0xf3, 0xf5, 0x32, 0x49, 0x57, 0xb0, 0x72, 0x54, 0x79,
		0x1c, 0x14, 0xf5, 0xae, 0xa8, 0xc0, 0x6f, 0x84, 0xf0, 0x5b, 0xfe, 0xbd, 0x77, 0x7b, 0x07, 0x92,
		0xc7, 0x71, 0x3c, 0x76, 0x18, 0xd6, 0xae, 0xa1, 0x18, 0x83, 0x61, 0xb6, 0x45, 0x30, 0x4f, 0x5a,
		0x18, 0x32, 0xad, 0x4e, 0x42, 0xbe, 0x3a, 0x4c, 0x06, 0x4c, 0x06, 0x42, 0x3e, 0x84, 0x7c, 0x08,
		0xf9, 0x10, 0xf2, 0x21, 0xe4, 0x7b, 0x3f, 0x21, 0x9f, 0x0d, 0xda, 0x28, 0x26, 0xe2, 0x33, 0xd8,
		0xf2, 0xb5, 0xc0, 0x6f, 0x4e, 0xf7, 0x01, 0x7e, 0xe3, 0x77, 0x86, 0x9e, 0xa8, 0x72, 0x2c, 0x12,
		0xdd, 0xd4, 0xda, 0x70, 0xff, 0xe0, 0x44, 0xc8, 0xc3, 0x80, 0x87, 0x93, 0x5d, 0x55, 0x03, 0xaf,
		0x53, 0x39, 0x61, 0xb7, 0x8f, 0xae, 0xcc, 0xd7, 0xc4, 0xb5, 0x72, 0xa6, 0x7c, 0xae, 0xb8, 0xff,
		0x79, 0xf8, 0xd6, 0x32, 0x0d, 0x02, 0xda, 0x19, 0x0d, 0x2f, 0x2a, 0x43, 0x09, 0xe9, 0x0d, 0x2f,
		0x8a, 0xff, 0x3b, 0xcb, 0x75, 0x30, 0xd8, 0xf8, 0x77, 0x35, 0xdd, 0xd6, 0x79, 0x0f, 0x1f, 0x0c,
		0x66, 0x32, 0x83, 0x69, 0xc8, 0x66, 0x0a, 0xb2, 0xab, 0x7e, 0x2e, 0x55, 0xcf, 0xa6, 0xda, 0x2f,
		0xbd, 0x6c, 0x46, 0x71, 0xb1, 0x15, 0x93, 0xca, 0xab, 0x09, 0xdb, 0x16, 0x02, 0xf1, 0xbc, 0x08,
		0xcc, 0x2f, 0xf0, 0xd3, 0xbf, 0xfc, 0xf0, 0xf6, 0x6f, 0xbd, 0xb5, 0xd9, 0xdb, 0x3e, 0xf3, 0x8e,
		0x26, 0xef, 0xf6, 0xf4, 0x8d, 0x1e, 0x9e, 0xfb, 0xd1, 0x33, 0x57, 0x46, 0x47, 0xc4, 0xf7, 0x98,
		0xc7, 0xe7, 0x33, 0x73, 0x1e, 0xda, 0x0d, 0x3d, 0x7c, 0xe7, 0x87, 0xb7, 0x7d, 0x9e, 0x59, 0x78,
		0x31, 0x14, 0x7a, 0x2d, 0xc4, 0x79, 0x1c, 0xba, 0x88, 0xe7, 0xe0, 0xe7, 0x5b, 0xc1, 0x48, 0xe6,
		0x20, 0x23, 0x73, 0xf0, 0xf0, 0x63, 0x50, 0x20, 0x7a, 0x15, 0x43, 0x69, 0x78, 0x29, 0x1a, 0x7e,
		0x98, 0xd2, 0x97, 0x5f, 0x67, 0x6e, 0xf6, 0x5f, 0x7a, 0x9d, 0xd7, 0xe9, 0x9d, 0x37, 0xe3, 0xd2,
		0x2c, 0x71, 0xe7, 0x9b, 0x8b, 0x63, 0x1a, 0x31, 0x1a, 0x47, 0x84, 0xc6, 0x11, 0x5f, 0x96, 0xc5,
		0xb3, 0xb3, 0xe2, 0x6f, 0x51, 0x1c, 0x59, 0x13, 0x3b, 0xcc, 0x12, 0x39, 0x96, 0x25, 0xc5, 0x4d,
		0xf4, 0x56, 0x32, 0xb9, 0xed, 0x35, 0xf1, 0x70, 0x03, 0x9f, 0x32, 0xa7, 0xb5, 0xf9, 0x4f, 0x8a,
		0x4e, 0x0d, 0xb3, 0xda, 0x1e, 0x5f, 0xbc, 0x1a, 0xed, 0x9e, 0x44, 0xef, 0x5d, 0xa6, 0xb3, 0x65,
		0x11, 0xc8, 0x62, 0x02, 0x58, 0xfb, 0x16, 0x4f, 0x89, 0x56, 0x42, 0xf6, 0x6d, 0x7a, 0xc9, 0xef,
		0x96, 0x58, 0xa5, 0xc1, 0x25, 0xeb, 0x06, 0xa3, 0xfe, 0x34, 0x86, 0xba, 0x35, 0xbd, 0x30, 0x73,
		0x17, 0x99, 0x59, 0x85, 0xf5, 0x50, 0x1c, 0xa0, 0x8e, 0x50, 0xc7, 0x72, 0xd5, 0xd1, 0xbc, 0xf0,
		0xd9, 0xb0, 0xe0, 0xd9, 0x8d, 0x3e, 0x06, 0x51, 0x14, 0x77, 0x99, 0xf7, 0xbd, 0x1a, 0x46, 0xbe,
		0x45, 0xf5, 0xd4, 0xd3, 0xcb, 0xcd, 0x75, 0xd3, 0xa4, 0xfb, 0x01, 0x94, 0x13, 0xca, 0xf9, 0xbe,
		0x94, 0x33, 0xd4, 0xa9, 0xb9, 0x4a, 0x0e, 0x2f, 0x82, 0x42, 0x41, 0xa1, 0x4a, 0x55, 0xa8, 0x54,
		0x48, 0x5d, 0xdb, 0xb6, 0xd0, 0xa7, 0x6d, 0xf4, 0x17, 0x7d, 0x7a, 0x39, 0xfa, 0x8b, 0x5a, 0x4f,
		0xd9, 0xf6, 0xd6, 0x56, 0x03, 0xad, 0x45, 0x73, 0x79, 0x1c, 0xa3, 0x44, 0x20, 0x9b, 0xc4, 0x1f,
		0xf8, 0x1c, 0xf8, 0x9c, 0x77, 0x45, 0x78, 0xbc, 0xfb, 0x93, 0x29, 0xa1, 0x51, 0x25, 0x6b, 0xd4,
		0x09, 0x93, 0x3e, 0xd3, 0x91, 0xba, 0x33, 0x28, 0x96, 0xb6, 0xd7, 0x42, 0xbb, 0xe3, 0x50, 0x6c,
		0x8e, 0x41, 0xc9, 0x77, 0xfc, 0xc9, 0xfc, 0x96, 0x5e, 0xd5, 0x40, 0xc9, 0x9e, 0x62, 0x0d, 0xbb,
		0xf3, 0x4d, 0x72, 0x66, 0xd7, 0x0a, 0x26, 0x59, 0x35, 0xd7, 0xc3, 0xbb, 0x78, 0x89, 0x7c, 0x2f,
		0x33, 0xf7, 0x52, 0xfd, 0x9d, 0x8d, 0x06, 0xd3, 0xf5, 0xb0, 0x4b, 0xf9, 0x58, 0x16, 0xa6, 0xc3,
		0xa3, 0x54, 0x0a, 0xca, 0xaf, 0xa0, 0xfd, 0xc0, 0xa3, 0xfc, 0xfc, 0x82, 0x73, 0x5e, 0x6b, 0xec,
		0x6d, 0x12, 0x17, 0xa3, 0x6f, 0x9e, 0x38, 0x94, 0x7e, 0x5b, 0x93, 0x5e, 0x8a, 0x24, 0xda, 0xdd,
		0xdd, 0xa8, 0x6f, 0x1d, 0x89, 0x2e, 0x57, 0x94, 0x5f, 0xe4, 0xb6, 0xbe, 0x15, 0x06, 0x31, 0xe5,
		0x37, 0x48, 0x06, 0x7e, 0x12, 0x50, 0x7e, 0x81, 0x98, 0xb6, 0x55, 0x62, 0x9e, 0xe6, 0x81, 0x48,
		0x4e, 0xb8, 0x66, 0xc7, 0x67, 0x67, 0x6d, 0xca, 0xaf, 0xc2, 0x6b, 0x94, 0x9f, 0x5e, 0x71, 0xe6,
		0x0d, 0x0e, 0x3a, 0xc7, 0x94, 0xdf, 0xa1, 0x2b, 0x74, 0x42, 0xf9, 0xf9, 0xaf, 0xc3, 0x1b, 0xa6,
		0xf8, 0x37, 0xa1, 0x74, 0xca, 0x82, 0x53, 0x41, 0x5a, 0xb1, 0xfb, 0x3d, 0x96, 0x90, 0x76, 0xd2,
		0xd7, 0x91, 0xf0, 0xf8, 0xd1, 0x1f, 0xa4, 0x0f, 0x4f, 0xd7, 0xa9, 0x94, 0x9c, 0xb4, 0x7b, 0xf3,
		0x93, 0xda, 0xd1, 0x01, 0x69, 0xa3, 0x74, 0x73, 0xc3, 0x64, 0x9b, 0xb4, 0x63, 0x8b, 0x99, 0x62,
		0x94, 0x9f, 0x3f, 0x60, 0xb1, 0x4f, 0x1a, 0xa3, 0x8a, 0xb8, 0x63, 0xda, 0x4e, 0x64, 0xb9, 0xde,
		0x60, 0xe8, 0x0b, 0x0e, 0xf5, 0x80, 0x76, 0xb0, 0xe3, 0x0d, 0x18, 0x75, 0x6b, 0xfa, 0x77, 0x7d,
		0xaf, 0x41, 0x1a, 0xa5, 0xb2, 0x20, 0x3d, 0x8c, 0x23, 0xd9, 0x9e, 0x9c, 0x46, 0xf3, 0x95, 0x36,
		0xa5, 0x94, 0x06, 0x9a, 0xb6, 0x65, 0x1d, 0x10, 0xe7, 0xc4, 0xfc, 0xeb, 0xee, 0x85, 0x1f, 0x92,
		0x7e, 0x83, 0xc8, 0x4b, 0xf6, 0x59, 0x37, 0xe0, 0xa7, 0x3e, 0x69, 0xe3, 0x1a, 0x08, 0xc9, 0xfb,
		0x2a, 0x4a, 0x49, 0x93, 0x49, 0xbe, 0x2f, 0xff, 0xa8, 0x6f, 0x91, 0xe6, 0x30, 0x86, 0x4e, 0x5a,
		0x72, 0xbd, 0x9f, 0x84, 0xcc, 0x23, 0x0d, 0x9a, 0x06, 0x49, 0x42, 0xda, 0x37, 0x0c, 0x44, 0x1c,
		0x93, 0x7e, 0x81, 0xa0, 0x7e, 0x1d, 0x30, 0x49, 0x3a, 0xee, 0x51, 0x51, 0x7c, 0x10, 0x79, 0xc9,
		0xef, 0x42, 0xf1, 0x80, 0x27, 0xc9, 0xd7, 0x38, 0xd1, 0x8a, 0xb3, 0x90, 0xb8, 0x58, 0x71, 0x15,
		0x30, 0x59, 0x5f, 0x81, 0xfd, 0x93, 0x7a, 0x40, 0x1b, 0x7d, 0x0c, 0xe5, 0xab, 0xa9, 0x69, 0x8b,
		0x53, 0x14, 0xf2, 0x58, 0x92, 0xc6, 0xb0, 0xfd, 0x38, 0x22, 0x6d, 0xa5, 0x22, 0x2d, 0xcf, 0x74,
		0x4a, 0x5a, 0x0f, 0xe2, 0x98, 0x38, 0x3d, 0x43, 0x5a, 0xfe, 0x55, 0x63, 0xa3, 0xd1, 0x3a, 0xb8,
		0xa0, 0x6e, 0x49, 0x3f, 0xff, 0xde, 0x8c, 0xeb, 0x27, 0xa4, 0x97, 0x42, 0x84, 0xa4, 0x77, 0x4c,
		0xc2, 0xc8, 0xe7, 0xa4, 0xbd, 0x19, 0x4f, 0x3c, 0xda, 0xbe, 0xc0, 0x0f, 0x92, 0x1b, 0xd2, 0xf4,
		0x9e, 0x62, 0xb4, 0x15, 0x38, 0x5e, 0x09, 0x2e, 0x69, 0x15, 0x02, 0x9d, 0x6e, 0x3f, 0x8e, 0xa3,
		0x40, 0x78, 0x77, 0xcc, 0xf3, 0xa2, 0x54, 0x6a, 0x21, 0x49, 0xef, 0xa0, 0xc4, 0xbe, 0x1c, 0x6d,
		0xa0, 0x1c, 0x47, 0x51, 0x4c, 0x3a, 0x76, 0xbb, 0xed, 0x46, 0xb7, 0xd3, 0x80, 0x9a, 0xb4, 0xaf,
		0x88, 0xc8, 0x73, 0x1b, 0xfb, 0x32, 0x48, 0x56, 0x89, 0x9f, 0x39, 0x61, 0x5e, 0xc0, 0xee, 0x68,
		0x6f, 0x32, 0x46, 0xb1, 0x16, 0x1e, 0x0b, 0x2e, 0x14, 0x93, 0x49, 0x1c, 0x29, 0x4d, 0x3c, 0x30,
		0xba, 0xa0, 0x6d, 0x74, 0x69, 0xfb, 0xf3, 0x6b, 0x3f, 0x09, 0xea, 0x2b, 0x05, 0x48, 0xce, 0x7b,
		0x6d, 0xea, 0x3a, 0x11, 0x49, 0xae, 0xbf, 0x5d, 0xac, 0x42, 0xf6, 0xfa, 0x81, 0x26, 0x6d, 0x69,
		0x79, 0x1c, 0x28, 0xd2, 0xee, 0xcf, 0xe3, 0xa4, 0x1f, 0x5f, 0xc5, 0x8a, 0x78, 0x29, 0xca, 0xc1,
		0xad, 0x58, 0x09, 0xeb, 0xba, 0x0a, 0xb8, 0xc9, 0xbf, 0xee, 0x9e, 0x7b, 0xde, 0x41, 0x74, 0x23,
		0xe9, 0x87, 0xae, 0x89, 0x22, 0x0d, 0x3b, 0x7a, 0xaa, 0x57, 0xdb, 0x3e, 0xe9, 0xa9, 0xcf, 0xa9,
		0xf4, 0x03, 0xbe, 0x52, 0xf8, 0x63, 0x9f, 0x7e, 0x0a, 0x60, 0xcf, 0x13, 0xf1, 0xb1, 0x90, 0xdf,
		0x89, 0xdb, 0xde, 0x6e, 0x24, 0x7d, 0xda, 0x4a, 0xc2, 0x42, 0x7e, 0xce, 0x03, 0x76, 0x77, 0xd2,
		0x6e, 0x91, 0x5e, 0x8b, 0x5a, 0xfd, 0x24, 0x8e, 0x3b, 0x37, 0x42, 0x7b, 0x03, 0xd2, 0xef, 0x71,
		0x2d, 0x3c, 0x71, 0x36, 0x8e, 0xbe, 0xc9, 0xa7, 0x2a, 0x27, 0x01, 0xed, 0xc8, 0x35, 0x14, 0xd1,
		0x2d, 0xed, 0x44, 0xba, 0x31, 0x1e, 0x39, 0x61, 0xde, 0x31, 0x75, 0x64, 0x35, 0xda, 0x1f, 0x3e,
		0x3f, 0x20, 0x1e, 0xb2, 0xd2, 0x4e, 0x2c, 0xbd, 0x1e, 0x97, 0x04, 0xd2, 0x66, 0xd3, 0x46, 0x05,
		0x75, 0x87, 0x27, 0x47, 0x5f, 0x0e, 0x48, 0x9b, 0xd6, 0xd0, 0x4f, 0x5a, 0x1e, 0x6d, 0xf3, 0xca,
		0x92, 0x3b, 0x49, 0x3a, 0x73, 0x2e, 0x8c, 0x69, 0x97, 0x1d, 0x78, 0xa4, 0xf7, 0x8e, 0x06, 0x8d,
		0x7a, 0xa3, 0xad, 0xa2, 0xdb, 0x3b, 0xd2, 0x2e, 0x81, 0x78, 0x72, 0x72, 0x42, 0xbc, 0xf4, 0xe6,
		0x21, 0x00, 0xa2, 0x9d, 0xb0, 0xe2, 0x49, 0x4e, 0xbb, 0xcc, 0xbd, 0xb1, 0x45, 0x1b, 0xd9, 0xf9,
		0x92, 0x36, 0x8b, 0x1f, 0x85, 0x71, 0x94, 0x08, 0xcd, 0xa9, 0x93, 0x32, 0x82, 0x78, 0x23, 0x9d,
		0x81, 0x3f, 0xa8, 0xed, 0xd6, 0xeb, 0xd4, 0x13, 0x22, 0x4e, 0xd2, 0x40, 0x8b, 0x38, 0xe0, 0xb7,
		0x91, 0xa2, 0x1f, 0x2c, 0x48, 0x8f, 0x76, 0x3e, 0xe0, 0xe8, 0x2d, 0xce, 0xae, 0xb9, 0x22, 0x5e,
		0xe6, 0xd1, 0x55, 0xc2, 0xef, 0x93, 0xa6, 0xf2, 0x45, 0xef, 0x5b, 0x4f, 0x8c, 0x5a, 0x78, 0xae,
		0xc2, 0x7e, 0xc4, 0x6a, 0xec, 0x73, 0xa5, 0x49, 0x77, 0x25, 0x94, 0x7b, 0xb4, 0x24, 0xab, 0xb1,
		0x13, 0xbc, 0x1f, 0xea, 0x64, 0x35, 0x84, 0x6b, 0xd2, 0x29, 0xe2, 0x38, 0xea, 0x0b, 0x8f, 0x05,
		0xd4, 0xc1, 0x55, 0xe2, 0x7b, 0xa4, 0x73, 0x0d, 0xba, 0x2c, 0x11, 0x5e, 0xab, 0x73, 0x70, 0x4a,
		0x3e, 0x77, 0x8b, 0x76, 0x33, 0xad, 0x0d, 0xea, 0xdd, 0x5f, 0xc7, 0x44, 0x38, 0x69, 0x90, 0x1e,
		0xc9, 0xda, 0xd6, 0xd6, 0xaa, 0xd4, 0x22, 0xd0, 0xee, 0x79, 0xd9, 0xf3, 0x76, 0x77, 0x76, 0x88,
		0xef, 0x34, 0x32, 0x1d, 0x4e, 0x9c, 0x1c, 0x69, 0xdb, 0xaa, 0x99, 0xf7, 0xfd, 0x22, 0xea, 0x0c,
		0x7f, 0xd0, 0x6f, 0xe1, 0x79, 0x2a, 0xbc, 0x0b, 0xe2, 0xf8, 0x69, 0x86, 0x09, 0x3b, 0x9e, 0xe6,
		0x5b, 0x5b, 0x7e, 0xed, 0xe8, 0xc6, 0x3f, 0x8b, 0xba, 0xc4, 0xfb, 0x00, 0x76, 0xa9, 0x77, 0x70,
		0xdf, 0xdd, 0xa8, 0xd7, 0x6a, 0xb4, 0x4b, 0x24, 0x47, 0x21, 0x13, 0xf1, 0xdd, 0x8b, 0xdb, 0xfa,
		0xd6, 0x20, 0x95, 0xfa, 0x0b, 0xf9, 0x8e, 0x55, 0xb4, 0x79, 0xa9, 0x59, 0x08, 0x7e, 0xb4, 0x12,
		0xbb, 0x49, 0x21, 0xf3, 0x3a, 0xdc, 0xdb, 0x8f, 0xa4, 0x56, 0x51, 0x10, 0x70, 0xbf, 0x75, 0xb4,
		0x12, 0x4d, 0x3f, 0x8f, 0xfe, 0xa0, 0xbe, 0xdb, 0xfd, 0x85, 0x69, 0xfe, 0x9d, 0xf3, 0x98, 0x76,
		0x26, 0x97, 0x24, 0xde, 0xa9, 0x24, 0x88, 0x3c, 0x16, 0x5c, 0xb0, 0xe0, 0x3b, 0x79, 0x12, 0xa1,
		0xcd, 0x34, 0xe9, 0x64, 0xd9, 0xa0, 0x21, 0x62, 0xea, 0xdd, 0xdd, 0xc2, 0x84, 0xf8, 0x86, 0x65,
		0x78, 0x4d, 0xfa, 0xf1, 0xbd, 0xa7, 0x1b, 0x19, 0xf4, 0x4b, 0x3b, 0x59, 0x90, 0x7e, 0x59, 0x9d,
		0xde, 0xc4, 0x43, 0xef, 0x4d, 0xfd, 0x68, 0x1c, 0x15, 0x69, 0x1e, 0xc9, 0xda, 0xc6, 0x49, 0x57,
		0xac, 0xc4, 0x79, 0x51, 0xfb, 0xe7, 0x47, 0xed, 0x96, 0xa4, 0xfd, 0x2a, 0x52, 0x73, 0x15, 0x70,
		0x76, 0x4d, 0x7a, 0xc3, 0x4c, 0xf6, 0x18, 0xed, 0xda, 0x5b, 0x46, 0x5c, 0xb5, 0x87, 0x00, 0xe4,
		0x96, 0x3a, 0x02, 0x11, 0xdd, 0xb0, 0xb1, 0xb3, 0x11, 0x33, 0xb5, 0x3f, 0x20, 0xde, 0x28, 0x37,
		0x1e, 0xa7, 0x1d, 0x05, 0x42, 0x7e, 0xa7, 0x5f, 0xf5, 0x39, 0x61, 0xa8, 0x02, 0x46, 0xba, 0x95,
		0x9a, 0x1e, 0x75, 0x90, 0xf9, 0x95, 0x7e, 0x83, 0xfe, 0x73, 0xcf, 0x5b, 0x85, 0x7e, 0x64, 0x3d,
		0xdf, 0x27, 0x8d, 0x07, 0xff, 0x26, 0xde, 0x6c, 0x79, 0x7c, 0x9c, 0xd7, 0x97, 0x83, 0xc3, 0xe6,
		0x69, 0x93, 0xfc, 0x7b, 0x1c, 0xb4, 0x48, 0xd7, 0x50, 0xfd, 0xcd, 0x56, 0xe5, 0xcc, 0x8d, 0xde,
		0x0a, 0xc4, 0x47, 0xbb, 0xe4, 0xe3, 0xa3, 0x58, 0x45, 0xf1, 0x0a, 0x64, 0x86, 0xb0, 0x5e, 0xc0,
		0x24, 0x1f, 0x06, 0x7a, 0xb4, 0xe1, 0x13, 0xfd, 0x66, 0x00, 0xb7, 0xf5, 0x5a, 0x83, 0x76, 0x7d,
		0x24, 0xf1, 0xce, 0x8e, 0x11, 0xf5, 0xf0, 0x5a, 0x44, 0x27, 0xcd, 0x7d, 0xd2, 0xc6, 0x88, 0x3a,
		0x3b, 0x7e, 0xa7, 0x04, 0xf5, 0xd2, 0xbc, 0xb1, 0x4b, 0x6b, 0xc5, 0x4d, 0xdf, 0x57, 0xc4, 0xdb,
		0xe5, 0xfe, 0x98, 0x4e, 0x54, 0xff, 0x9a, 0x10, 0xcf, 0x26, 0x52, 0x89, 0xea, 0x52, 0x57, 0xf0,
		0x7a, 0x1c, 0xa4, 0x09, 0x79, 0x7e, 0x20, 0x59, 0x85, 0x36, 0x2b, 0x43, 0x05, 0x39, 0xeb, 0xf9,
		0xe1, 0x6a, 0x54, 0x5f, 0xf4, 0xd4, 0x51, 0xa4, 0x6e, 0x98, 0xf2, 0x69, 0x1f, 0x61, 0x4e, 0xbb,
		0x89, 0x52, 0xe4, 0xb1, 0x6f, 0x5c, 0x25, 0x22, 0x92, 0x35, 0xea, 0x3b, 0x91, 0xa4, 0x33, 0x3e,
		0x92, 0x9d, 0x8e, 0xe8, 0xaf, 0x40, 0xcf, 0xbd, 0xf3, 0x21, 0xac, 0x5d, 0x85, 0x04, 0xda, 0xed,
		0xdf, 0x4f, 0x9a, 0xa7, 0xf4, 0xdb, 0x4e, 0xb4, 0x89, 0x3b, 0x6f, 0x4f, 0xd2, 0x2e, 0x51, 0x6f,
		0xec, 0x50, 0x27, 0xcd, 0xa6, 0x27, 0x27, 0xb4, 0xeb, 0x6d, 0xe2, 0x28, 0xb0, 0x99, 0x88, 0x16,
		0xed, 0xa3, 0x9b, 0x92, 0x06, 0xfd, 0xed, 0x95, 0x3f, 0xce, 0x48, 0x03, 0xa6, 0xde, 0x0a, 0xf8,
		0xe9, 0x20, 0xa4, 0x5d, 0x90, 0x90, 0x90, 0xc6, 0xaa, 0xd7, 0xc4, 0x8b, 0x73, 0x7a, 0xed, 0x9b,
		0x95, 0x69, 0x92, 0x31, 0x2d, 0x5c, 0x3b, 0xe7, 0x9a, 0x38, 0xd5, 0x34, 0xc9, 0xff, 0x6b, 0xd0,
		0x3f, 0x95, 0xbd, 0x27, 0xba, 0x8a, 0xaf, 0x40, 0x17, 0xf5, 0x6e, 0xe2, 0x51, 0x3f, 0x19, 0x88,
		0x74, 0xe4, 0x20, 0x12, 0x2f, 0x6a, 0x75, 0x8e, 0xa9, 0x67, 0x00, 0xb2, 0x95, 0x39, 0xa1, 0x69,
		0x4a, 0xeb, 0x1f, 0x50, 0xa7, 0xf5, 0x07, 0xd4, 0x97, 0x64, 0x54, 0x60, 0x74, 0x76, 0xcd, 0xd5,
		0x80, 0x33, 0x7f, 0x15, 0x0e, 0xac, 0x98, 0x95, 0x76, 0xb6, 0xa4, 0xe6, 0xca, 0x8b, 0xa4, 0xe4,
		0x1e, 0xf1, 0x96, 0x9b, 0xdb, 0xc4, 0x1b, 0x98, 0x6c, 0xd3, 0xee, 0x93, 0x38, 0x6e, 0x2e, 0xf8,
		0xb9, 0xb3, 0x12, 0xa5, 0xcf, 0x2d, 0xe2, 0x27, 0x26, 0xaf, 0xc0, 0x46, 0xd1, 0x84, 0x57, 0x6e,
		0x30, 0xff, 0x98, 0xf5, 0x69, 0xe7, 0x0d, 0xf1, 0xfe, 0x4a, 0x1c, 0x3d, 0xaa, 0x92, 0x7a, 0xa3,
		0x4e, 0xbc, 0x55, 0xd7, 0x0a, 0x9c, 0x9f, 0x25, 0xfa, 0x42, 0xb3, 0xa0, 0x1d, 0xdd, 0x70, 0x15,
		0x08, 0x49, 0xbc, 0x81, 0x68, 0xb5, 0x9f, 0x90, 0x0e, 0x36, 0xfa, 0x7b, 0x7b, 0xbb, 0xf5, 0x55,
		0x28, 0x83, 0xbc, 0x88, 0xbe, 0x73, 0x79, 0x4e, 0xfc, 0x40, 0xf7, 0xc9, 0xcb, 0x6c, 0x9f, 0xd0,
		0x8e, 0x60, 0x6f, 0xeb, 0x5b, 0x31, 0x6d, 0x23, 0xd5, 0xd7, 0x31, 0xf5, 0x3e, 0xa7, 0xc7, 0x6d,
		0xe2, 0x99, 0x05, 0xab, 0x90, 0x54, 0x50, 0x27, 0xde, 0x09, 0xb1, 0xb6, 0xb9, 0x4b, 0x7a, 0x07,
		0x92, 0x31, 0xda, 0xbc, 0x4d, 0x4f, 0x1d, 0x04, 0x9e, 0x38, 0x94, 0x7e, 0x9b, 0x7c, 0x2d, 0x4e,
		0x3b, 0x12, 0x52, 0x5f, 0x44, 0xa3, 0x1f, 0x1d, 0xae, 0x04, 0x5b, 0x11, 0x02, 0xaa, 0xc3, 0xd5,
		0xb5, 0xf0, 0x38, 0xed, 0xe3, 0x46, 0x7a, 0x3d, 0xce, 0xa9, 0x0b, 0xd8, 0x41, 0xe4, 0x25, 0xd3,
		0xdc, 0x95, 0x15, 0x39, 0xf3, 0x59, 0xdc, 0x5e, 0x44, 0x47, 0x51, 0x4a, 0x3a, 0x23, 0x2a, 0xa2,
		0x7e, 0x6e, 0xaa, 0x48, 0x7c, 0x99, 0xae, 0xc0, 0x19, 0x8b, 0xa4, 0x39, 0x28, 0xee, 0x0b, 0x76,
		0xc2, 0x44, 0x40, 0x9f, 0xdc, 0x1c, 0xe7, 0xa5, 0x9d, 0xa5, 0xa4, 0x1d, 0xfa, 0xcd, 0x0d, 0x93,
		0xed, 0x76, 0x7d, 0x05, 0x3a, 0x73, 0x9d, 0xd1, 0xd6, 0x6d, 0xa6, 0xc3, 0x4e, 0xda, 0x1d, 0x6d,
		0x82, 0xf5, 0x18, 0x6d, 0x14, 0x22, 0x64, 0x4f, 0x48, 0xd1, 0x65, 0xb4, 0xcf, 0x70, 0x1f, 0xdc,
		0xc5, 0x5c, 0x79, 0xf4, 0x77, 0x58, 0xfb, 0x7b, 0x7b, 0xb4, 0x43, 0x3f, 0xcf, 0xd3, 0x87, 0x61,
		0x4a, 0x7b, 0x0d, 0x76, 0x36, 0x1a, 0x4c, 0x6f, 0x6f, 0x12, 0x3f, 0xa5, 0x86, 0x76, 0x5a, 0xd1,
		0x94, 0xca, 0xd9, 0xda, 0xa4, 0x1d, 0x20, 0x89, 0x90, 0xa9, 0x3b, 0xea, 0xa7, 0xed, 0x30, 0x16,
		0x6c, 0xad, 0x44, 0x37, 0x8f, 0xc6, 0x0a, 0x6c, 0xe1, 0xfd, 0xae, 0x58, 0x1c, 0x73, 0xb5, 0x42,
		0x69, 0x45, 0x51, 0xac, 0x85, 0xc7, 0x82, 0x15, 0x78, 0x13, 0xaf, 0x1b, 0x7c, 0xe3, 0x9e, 0x66,
		0x1d, 0xcd, 0x48, 0x07, 0xdf, 0xb7, 0xbb, 0xdb, 0xc7, 0x2c, 0x4e, 0xa8, 0x23, 0xa9, 0x1a, 0x75,
		0x02, 0x84, 0x34, 0x02, 0x09, 0xfd, 0xe4, 0xe0, 0x56, 0x50, 0xef, 0xdd, 0x73, 0x91, 0x52, 0x37,
		0x4a, 0x5a, 0x6d, 0x6c, 0xec, 0x52, 0x7e, 0x01, 0xee, 0x51, 0x3f, 0xed, 0x8f, 0xeb, 0x01, 0x57,
		0x92, 0xeb, 0x06, 0xf5, 0xf6, 0x6e, 0x4c, 0x87, 0xad, 0x90, 0xd1, 0x6f, 0x29, 0x4b, 0xfc, 0x10,
		0xe8, 0xbe, 0xe8, 0xb3, 0xae, 0x18, 0x1f, 0xe9, 0x42, 0x5c, 0x35, 0x22, 0x2d, 0xcf, 0xfc, 0x74,
		0x05, 0x8e, 0xb7, 0x25, 0x9d, 0x73, 0xc0, 0xfb, 0x69, 0xc0, 0x14, 0xf5, 0x43, 0xf7, 0x07, 0x22,
		0x8e, 0xc5, 0x4a, 0xb0, 0xb2, 0xe3, 0x66, 0x4a, 0x17, 0x3e, 0x6d, 0x5b, 0xeb, 0xb1, 0xf8, 0x86,
		0xc5, 0x07, 0x91, 0xae, 0xd5, 0xda, 0x2a, 0xea, 0x09, 0xda, 0xd9, 0x69, 0x13, 0x3d, 0x27, 0xbe,
		0x75, 0x31, 0x6d, 0x6e, 0xc5, 0x56, 0xa1, 0x93, 0x77, 0x4c, 0x3c, 0x5f, 0x6d, 0x9c, 0x78, 0xba,
		0x39, 0xca, 0xa2, 0xfd, 0x4c, 0xbb, 0x83, 0x4c, 0xa2, 0x99, 0x3a, 0xa6, 0x9d, 0x40, 0xab, 0x39,
		0xf5, 0x8e, 0x13, 0xd3, 0xce, 0xea, 0x67, 0x9d, 0x15, 0x71, 0x1b, 0x9f, 0x69, 0xb7, 0xda, 0x1c,
		0xbf, 0xc9, 0xef, 0x7a, 0xda, 0x12, 0x9b, 0x7c, 0xdb, 0xae, 0x24, 0xea, 0xe9, 0x1b, 0xa6, 0xf8,
		0x71, 0x14, 0xc5, 0x5d, 0xe2, 0xe7, 0x43, 0x0f, 0xa2, 0x44, 0xb7, 0x99, 0x4f, 0xdb, 0x62, 0xa9,
		0x90, 0xf8, 0x2b, 0x04, 0x2c, 0xee, 0xad, 0xce, 0xe6, 0x05, 0xf9, 0x53, 0x88, 0xc7, 0xe7, 0xde,
		0x7e, 0x95, 0x9e, 0x9b, 0x93, 0x6f, 0xad, 0xae, 0xbc, 0xfc, 0x50, 0xc2, 0xbc, 0xd9, 0xcd, 0xd7,
		0x0f, 0x49, 0x02, 0xf5, 0xd0, 0xa2, 0xc1, 0x42, 0xf9, 0x0f, 0xcb, 0x74, 0x78, 0x94, 0xda, 0x9c,
		0x81, 0x58, 0xfe, 0xa3, 0x6a, 0xab, 0x53, 0x92, 0xca, 0x7f, 0x4e, 0xc1, 0x39, 0xaf, 0x35, 0xf6,
		0x36, 0x89, 0x2c, 0xff, 0x37, 0xeb, 0x72, 0x86, 0x05, 0x4c, 0xed, 0xa4, 0xb6, 0xf0, 0x48, 0x74,
		0x6d, 0x52, 0x98, 0xcb, 0x7f, 0xe0, 0xdb, 0xfa, 0x56, 0x18, 0xc4, 0x14, 0x9e, 0x34, 0x19, 0x58,
		0xa5, 0x05, 0x95, 0xff, 0xa0, 0x31, 0x0d, 0x2b, 0xc0, 0x3c, 0xcd, 0x03, 0x91, 0x9c, 0x70, 0xcd,
		0x8e, 0xcf, 0xce, 0xda, 0x14, 0x1e, 0x99, 0xd7, 0x28, 0x3c, 0xa5, 0xe2, 0xcc, 0x1b, 0x1c, 0x74,
		0x8e, 0x29, 0x3c, 0x6b, 0x57, 0xe8, 0x84, 0xc2, 0x73, 0x5e, 0x87, 0xc3, 0xc8, 0x6d, 0x12, 0x89,
		0x9e, 0x0a, 0x12, 0x0a, 0xd6, 0xb7, 0xeb, 0x38, 0xbe, 0x80, 0xc9, 0x1d, 0x37, 0x5d, 0xed, 0x90,
		0xc0, 0x58, 0x96, 0x29, 0x0d, 0xe5, 0x3f, 0xa9, 0x9f, 0xd4, 0x8e, 0x0e, 0x48, 0x18, 0x81, 0x71,
		0x69, 0x06, 0x09, 0xd7, 0xca, 0x14, 0xa3, 0xf0, 0x9c, 0x01, 0x8b, 0x7d, 0x12, 0x98, 0x4a, 0xc4,
		0x1d, 0xd1, 0xa7, 0xf0, 0xa4, 0x43, 0x5b, 0x7a, 0x68, 0x57, 0x17, 0x58, 0xfe, 0xc3, 0x5a, 0x17,
		0x73, 0x94, 0xff, 0xa8, 0x7f, 0xd7, 0xf7, 0x1a, 0x24, 0x50, 0xd5, 0x64, 0x07, 0xb3, 0x3d, 0xb8,
		0x4b, 0x84, 0xc7, 0x82, 0xaf, 0x34, 0x28, 0x81, 0x34, 0xd0, 0x34, 0x2c, 0xd6, 0x80, 0x08, 0x77,
		0xe1, 0x5f, 0x77, 0x2f, 0xfc, 0x90, 0xc4, 0x93, 0x3e, 0x1c, 0xef, 0x4a, 0xc2, 0x68, 0x05, 0x42,
		0xf2, 0xbe, 0x1d, 0x05, 0xbc, 0x80, 0xc9, 0xf5, 0xe5, 0x1f, 0x36, 0xe7, 0x9b, 0x2e, 0x20, 0x66,
		0x9d, 0xe4, 0xb9, 0xd9, 0x36, 0xdd, 0x5e, 0x80, 0x29, 0x48, 0x12, 0x12, 0xb6, 0x75, 0x94, 0x31,
		0x45, 0x42, 0xb3, 0xea, 0x76, 0x0d, 0xa6, 0x17, 0x80, 0xaf, 0x7f, 0x68, 0x8a, 0x61, 0x9f, 0x67,
		0xb3, 0x10, 0x71, 0xe0, 0x2a, 0x60, 0xb2, 0x4e, 0x88, 0x27, 0xae, 0x07, 0x34, 0xbc, 0xee, 0x50,
		0x2e, 0xac, 0xd2, 0x8e, 0x17, 0x20, 0x06, 0x51, 0xc8, 0x63, 0x49, 0x02, 0x73, 0xf5, 0xad, 0x32,
		0x6f, 0xcb, 0x7f, 0xce, 0x48, 0xcb, 0x33, 0x9d, 0x92, 0x90, 0xd3, 0x38, 0x26, 0x12, 0x76, 0x93,
		0x90, 0x4f, 0xd5, 0xd8, 0x68, 0xb4, 0x0e, 0x2e, 0xa8, 0x58, 0xa8, 0xcf, 0xbf, 0x37, 0xe3, 0xfa,
		0x09, 0x89, 0xa9, 0x15, 0x21, 0x09, 0x66, 0x38, 0x8c, 0x7c, 0x4e, 0xc2, 0xea, 0xf3, 0xc4, 0xa3,
		0x61, 0x4b, 0xfd, 0x20, 0xb9, 0x21, 0x41, 0xb7, 0x28, 0x46, 0x43, 0x91, 0x62, 0x52, 0x5c, 0x00,
		0x25, 0x40, 0xdd, 0xed, 0xc7, 0x71, 0x14, 0x08, 0xef, 0x8e, 0x79, 0x5e, 0x94, 0x4a, 0x6d, 0xd5,
		0x29, 0x79, 0x01, 0x9e, 0xc0, 0x97, 0x23, 0xa2, 0xf8, 0x38, 0x8a, 0x62, 0x12, 0xb1, 0xc0, 0x6d,
		0x37, 0xba, 0x9d, 0x06, 0x5c, 0x24, 0x6c, 0x6d, 0x44, 0x26, 0x96, 0xdd, 0x97, 0x41, 0x42, 0x31,
		0xee, 0x3e, 0x61, 0x5e, 0x60, 0x77, 0x12, 0xfd, 0x02, 0xa2, 0x83, 0x71, 0x12, 0x69, 0x8e, 0xf3,
		0x1e, 0x16, 0x02, 0xc0, 0x2f, 0x68, 0x18, 0x33, 0x1a, 0xfe, 0xed, 0xda, 0xee, 0xb4, 0xab, 0x25,
		0x70, 0xc4, 0xe7, 0xbd, 0x36, 0x15, 0x99, 0x8d, 0x24, 0xd7, 0xdf, 0x2e, 0x28, 0x65, 0x41, 0x1e,
		0x68, 0x12, 0x16, 0x8c, 0xc7, 0x81, 0x22, 0xe1, 0x26, 0x3c, 0x4e, 0xe2, 0x31, 0x55, 0xac, 0x88,
		0xa4, 0x16, 0x5b, 0xf5, 0x78, 0x59, 0xa0, 0xd5, 0xa2, 0x84, 0x0b, 0x46, 0x65, 0xe0, 0x5e, 0x9e,
		0xb6, 0xda, 0x0b, 0xb0, 0xb1, 0x8a, 0x84, 0xbb, 0xed, 0xa9, 0x5e, 0x6d, 0xfb, 0xa4, 0xa7, 0x6c,
		0x8f, 0x76, 0x5a, 0x02, 0xbf, 0xbb, 0x4f, 0x27, 0x45, 0xa6, 0xe7, 0x89, 0xd8, 0xae, 0xb8, 0x76,
		0x21, 0x36, 0xad, 0x1b, 0x49, 0x9f, 0x86, 0x10, 0x4f, 0xcf, 0x43, 0x38, 0x69, 0xb7, 0x48, 0xcc,
		0x6d, 0xad, 0x7e, 0x12, 0xc7, 0x9d, 0x1b, 0xa1, 0xbd, 0x01, 0x89, 0xe7, 0xbd, 0x16, 0x9e, 0x38,
		0x1b, 0x47, 0x67, 0x64, 0x52, 0xe7, 0x92, 0x80, 0x46, 0xc4, 0x13, 0x8a, 0xe8, 0x96, 0x46, 0x02,
		0xca, 0xd8, 0x0f, 0x9f, 0x30, 0xef, 0x98, 0x0a, 0x72, 0x18, 0xed, 0x3b, 0x9d, 0x1f, 0x10, 0x09,
		0x75, 0x68, 0x24, 0x4c, 0x5d, 0x8f, 0x4b, 0x27, 0x68, 0xb0, 0x1e, 0x93, 0xe3, 0x27, 0x8e, 0xbe,
		0x1c, 0x90, 0x30, 0x59, 0xa1, 0x9f, 0xb4, 0x3c, 0x1a, 0x66, 0x8b, 0x25, 0x77, 0x92, 0x44, 0xc6,
		0x49, 0x18, 0xd3, 0x48, 0x47, 0xf5, 0x48, 0x70, 0xe1, 0x83, 0x46, 0xbd, 0xd1, 0x56, 0xd1, 0xed,
		0x1d, 0x09, 0x93, 0x4a, 0x24, 0x59, 0x2e, 0x21, 0x92, 0x32, 0xfd, 0x00, 0xb4, 0x69, 0x6c, 0x3c,
		0x7b, 0x56, 0x5d, 0x21, 0x17, 0xe0, 0xa5, 0x1a, 0x5b, 0x34, 0x10, 0x8a, 0x2f, 0x69, 0xb0, 0x9b,
		0x51, 0x18, 0x47, 0x89, 0xb0, 0xed, 0x64, 0xb5, 0x80, 0x99, 0x25, 0x52, 0x90, 0x3e, 0xf0, 0x07,
		0x76, 0xdd, 0x31, 0x17, 0xb3, 0x11, 0x7a, 0x92, 0x06, 0x5a, 0xc4, 0x01, 0xbf, 0x8d, 0x14, 0x1d,
		0xb0, 0x2a, 0x3d, 0x1a, 0xf9, 0x32, 0xa3, 0xa7, 0xb5, 0xee, 0x22, 0xbc, 0x80, 0x24, 0x14, 0x25,
		0xfc, 0x3e, 0x09, 0x8a, 0x53, 0xf4, 0xbe, 0xf5, 0xc4, 0xc5, 0x5d, 0x4c, 0x8b, 0x8f, 0xa5, 0xc5,
		0xcf, 0xa7, 0x49, 0x97, 0x94, 0x92, 0x8d, 0xa6, 0x98, 0xd6, 0x0e, 0xd3, 0x7e, 0xa8, 0x13, 0x5a,
		0x42, 0x31, 0xa9, 0x0c, 0x3d, 0x8e, 0xfa, 0xc2, 0x63, 0x01, 0x15, 0xf0, 0x90, 0xf8, 0x1e, 0x89,
		0xbd, 0xc7, 0x2e, 0x4b, 0x84, 0x67, 0x77, 0x08, 0xd4, 0x82, 0x72, 0x24, 0x68, 0x34, 0x87, 0xd8,
		0xa0, 0xd2, 0x7d, 0x6b, 0x4c, 0x1c, 0x92, 0x00, 0x8f, 0x91, 0xac, 0x6d, 0x6d, 0x51, 0xcb, 0x51,
		0xa5, 0xd1, 0xd3, 0xa8, 0xe7, 0xed, 0xee, 0xec, 0x10, 0xd9, 0xf1, 0x60, 0x3a, 0x9c, 0x38, 0x03,
		0x12, 0x36, 0x4b, 0x33, 0xef, 0xfb, 0x45, 0xd4, 0xd1, 0x56, 0x2d, 0x69, 0x17, 0xd5, 0x8a, 0xe9,
		0x54, 0x78, 0x17, 0x44, 0xf0, 0xc1, 0x0c, 0xdb, 0x74, 0x3c, 0xcd, 0xb7, 0xb6, 0xfc, 0xda, 0xd1,
		0x8d, 0x7f, 0x16, 0x75, 0x89, 0xf4, 0x91, 0xe9, 0x52, 0xe9, 0x28, 0xb9, 0xbb, 0x51, 0xaf, 0xd5,
		0x68, 0x94, 0x8c, 0x8c, 0xa0, 0x39, 0x11, 0xf6, 0xf6, 0xb6, 0xbe, 0x35, 0x48, 0xa5, 0xfe, 0x42,
		0xa6, 0x33, 0x03, 0x0d, 0x5e, 0x61, 0x16, 0xa2, 0x1d, 0x91, 0x62, 0xc7, 0xc7, 0x2d, 0x8e, 0xf7,
		0x73, 0x35, 0x38, 0x5e, 0x60, 0xf3, 0xa6, 0xa3, 0x3f, 0xa8, 0xec, 0x96, 0x7d, 0x61, 0x9a, 0x7f,
		0xe7, 0x3c, 0xa6, 0x91, 0x31, 0x21, 0x89, 0x54, 0x14, 0x07, 0x91, 0xc7, 0x82, 0x0b, 0x16, 0x7c,
		0x27, 0x13, 0x4c, 0xb6, 0x99, 0x26, 0x91, 0xec, 0x15, 0x34, 0x44, 0x4c, 0xa5, 0xcb, 0x48, 0x98,
		0x10, 0xd9, 0x38, 0x09, 0xaf, 0x49, 0x3c, 0xa6, 0xf7, 0x94, 0xc8, 0xa5, 0x53, 0xd2, 0xc2, 0x82,
		0xf4, 0x0b, 0xbd, 0x9e, 0x6e, 0x43, 0x6f, 0x46, 0xa5, 0x15, 0xb5, 0x8a, 0x34, 0x8f, 0x64, 0x6d,
		0xc3, 0xee, 0xec, 0xce, 0xc5, 0x55, 0x0e, 0xed, 0x9f, 0x1f, 0xb5, 0x5b, 0x92, 0xc6, 0x23, 0x4b,
		0xcd, 0x55, 0xc0, 0xd9, 0x35, 0x09, 0xa2, 0x5f, 0xf6, 0x18, 0x8d, 0x1a, 0x22, 0x46, 0x44, 0xc5,
		0x86, 0x8e, 0xf7, 0x96, 0x8a, 0xe7, 0x15, 0xdd, 0xb0, 0xb1, 0xb3, 0x11, 0x33, 0xb5, 0x3f, 0x20,
		0xd2, 0x90, 0x2c, 0x1e, 0xa7, 0x03, 0x04, 0x42, 0x7e, 0xa7, 0x53, 0xed, 0x32, 0x61, 0x18, 0x02,
		0x46, 0xa2, 0xd5, 0x87, 0x1e, 0x55, 0x6e, 0xff, 0x4a, 0xa7, 0x01, 0xe8, 0xb9, 0xe7, 0x51, 0xea,
		0xa3, 0xd1, 0xf3, 0x7d, 0x12, 0xb8, 0xe6, 0x6f, 0x22, 0xcd, 0xe8, 0xa6, 0x07, 0x05, 0x1e, 0x36,
		0x4f, 0x9b, 0x64, 0x9e, 0xf7, 0xa0, 0x45, 0x22, 0x97, 0xfd, 0x6f, 0x46, 0xad, 0xb7, 0x6e, 0x8f,
		0x10, 0x0e, 0xdf, 0x25, 0x83, 0xc3, 0x63, 0x15, 0xc5, 0x84, 0x76, 0x7e, 0x59, 0x2f, 0x60, 0x92,
		0x0f, 0x03, 0x07, 0x1a, 0xf0, 0x80, 0x4e, 0x11, 0xe1, 0x6d, 0xbd, 0xd6, 0xa0, 0x51, 0x2f, 0x42,
		0xa4, 0xd3, 0x4f, 0x44, 0x25, 0xfc, 0x12, 0xd1, 0x49, 0x73, 0x9f, 0x84, 0xf2, 0x53, 0x61, 0x13,
		0xef, 0x94, 0xa0, 0x52, 0xda, 0x30, 0x36, 0xfd, 0xad, 0xb8, 0xe9, 0xfb, 0x8a, 0x48, 0x5b, 0xb2,
		0x1f, 0xb7, 0xf9, 0xeb, 0x5f, 0x13, 0x22, 0xbb, 0xfc, 0x2a, 0x51, 0x5d, 0x2a, 0x8a, 0x56, 0x8f,
		0x83, 0x34, 0x21, 0x13, 0x27, 0x26, 0x94, 0xca, 0x9e, 0x87, 0x02, 0x7c, 0xd6, 0xf3, 0x43, 0x5a,
		0xd9, 0xb7, 0x3d, 0x75, 0x14, 0xa9, 0x1b, 0xa6, 0x7c, 0x1a, 0x47, 0xb2, 0xd1, 0x68, 0x2e, 0x10,
		0x79, 0xec, 0x1b, 0x57, 0x89, 0x88, 0x64, 0x8d, 0xca, 0x8e, 0x08, 0x89, 0x1d, 0xdd, 0x64, 0xa7,
		0x23, 0xfa, 0x84, 0x7a, 0xb9, 0x58, 0x9e, 0xb9, 0xbf, 0xb8, 0x04, 0xb0, 0xed, 0xdf, 0x4f, 0x9a,
		0xa7, 0x74, 0xca, 0x4c, 0xdb, 0x44, 0x9c, 0x99, 0x27, 0x69, 0x94, 0xc2, 0x35, 0x76, 0xa8, 0x90,
		0x1b, 0xd3, 0x4e, 0xab, 0xed, 0x7a, 0x9b, 0x08, 0x9a, 0x69, 0x26, 0xa2, 0x45, 0xa3, 0xc5, 0x79,
		0xd2, 0x20, 0x74, 0xea, 0xe9, 0x19, 0x09, 0x40, 0xd0, 0x23, 0xe4, 0xb7, 0x82, 0x30, 0x26, 0x72,
		0x3e, 0x2b, 0x09, 0x31, 0x25, 0x92, 0x54, 0xdd, 0x6b, 0xdf, 0x90, 0x2b, 0x7e, 0x9d, 0x16, 0x04,
		0x9c, 0x73, 0x4d, 0x84, 0x2a, 0x98, 0xe4, 0xc7, 0x34, 0xe8, 0x9c, 0x26, 0xd7, 0x13, 0x5d, 0xc5,
		0x09, 0x75, 0x7b, 0xec, 0x26, 0x1e, 0x95, 0x8e, 0xdb, 0x24, 0x90, 0xab, 0x48, 0xbc, 0xa8, 0xd5,
		0x39, 0xa6, 0x92, 0x21, 0xc3, 0xc8, 0x75, 0x32, 0x9f, 0xd2, 0x9d, 0x07, 0x54, 0xe8, 0xce, 0x01,
		0x95, 0x29, 0x1e, 0x25, 0x80, 0x9f, 0x5d, 0x73, 0x35, 0xe0, 0xcc, 0xa7, 0xd4, 0xb0, 0x76, 0x56,
		0xd2, 0xd2, 0x92, 0x9a, 0x2b, 0x2f, 0x92, 0x92, 0x7b, 0x44, 0x5a, 0x2a, 0x6d, 0x13, 0x29, 0x34,
		0xde, 0xa6, 0xd1, 0x4f, 0x67, 0xdc, 0x9c, 0xe6, 0x73, 0x87, 0x54, 0x49, 0x56, 0x8b, 0xc8, 0xc9,
		0x53, 0x84, 0x88, 0xef, 0x09, 0x3f, 0xd7, 0x60, 0xfe, 0x31, 0xeb, 0xd3, 0xd8, 0xcf, 0xe7, 0x7d,
		0x52, 0x47, 0xca, 0xa8, 0xa4, 0xde, 0xa8, 0x13, 0x69, 0x3d, 0x41, 0xa8, 0x6f, 0xbc, 0xe8, 0x0b,
		0xcd, 0x82, 0x76, 0x74, 0xc3, 0x55, 0x20, 0x24, 0x91, 0x46, 0x50, 0xd5, 0x7e, 0x42, 0x02, 0xec,
		0xf6, 0xf7, 0xf6, 0x76, 0x29, 0x1d, 0x97, 0xbc, 0x75, 0x11, 0x7d, 0xe7, 0xf2, 0x9c, 0xc8, 0x41,
		0x74, 0x93, 0x87, 0xde, 0x3e, 0xa1, 0x11, 0xf9, 0xdc, 0xd6, 0xb7, 0x62, 0x1a, 0x46, 0xa1, 0xaf,
		0x63, 0x2a, 0x7d, 0xa9, 0x8e, 0xdb, 0x44, 0x76, 0x1a, 0x29, 0x6d, 0x32, 0xd6, 0x89, 0x74, 0xcc,
		0xa9, 0x6d, 0xee, 0x92, 0xd8, 0x09, 0x61, 0x8c, 0x46, 0x3c, 0xde, 0x53, 0x07, 0x81, 0x27, 0x0e,
		0xa5, 0xdf, 0x26, 0x93, 0x43, 0xdd, 0x8e, 0x84, 0xd4, 0x17, 0xd1, 0xe8, 0x47, 0x87, 0x2b, 0xc1,
		0x88, 0x11, 0x08, 0x1d, 0xae, 0xae, 0x85, 0xc7, 0x69, 0xb4, 0x0f, 0xee, 0xf5, 0x38, 0xa7, 0x78,
		0xda, 0x27, 0xb1, 0x33, 0xb2, 0xc4, 0xed, 0x45, 0x74, 0x14, 0xa5, 0x34, 0x0e, 0x27, 0xa5, 0x72,
		0xee, 0x8d, 0x48, 0x7c, 0x99, 0x12, 0x3a, 0x9b, 0x83, 0x04, 0x87, 0xc0, 0x7d, 0xc1, 0x4e, 0x98,
		0x08, 0xe8, 0x90, 0x4a, 0xe3, 0x3c, 0x8f, 0xb3, 0x94, 0x84, 0x83, 0xbb, 0xb9, 0x61, 0xb2, 0xdd,
		0xae, 0x13, 0xea, 0x34, 0x71, 0x46, 0x43, 0xc7, 0x98, 0x0e, 0x3b, 0x69, 0x77, 0x44, 0xde, 0xf7,
		0x18, 0x0d, 0xef, 0x2b, 0x64, 0x4f, 0x48, 0xd1, 0x65, 0x34, 0xce, 0x9e, 0x1b, 0xdc, 0xc5, 0x5c,
		0x79, 0x74, 0x76, 0x74, 0xfa, 0x7b, 0x7b, 0x34, 0x42, 0x09, 0xcf, 0xd3, 0x87, 0x61, 0x4a, 0x63,
		0x4e, 0x77, 0x36, 0x1a, 0x4c, 0x6f, 0x6f, 0x12, 0xe9, 0x16, 0x4d, 0x63, 0xbb, 0x7f, 0x1a, 0xa2,
		0x6f, 0x6d, 0xd2, 0x00, 0xe2, 0x22, 0x64, 0xea, 0x8e, 0x4a, 0x77, 0x6b, 0xc6, 0x82, 0x2d, 0x52,
		0xd5, 0xb8, 0x0d, 0x42, 0x5b, 0x0c, 0xbf, 0x2b, 0x16, 0xc7, 0x5c, 0x11, 0xdc, 0xee, 0x8f, 0xc6,
		0x47, 0x7c, 0x12, 0x7a, 0x62, 0xaf, 0x1b, 0x7c, 0xe3, 0x9e, 0x66, 0x1d, 0xcd, 0x48, 0x04, 0x67,
		0xb7, 0xbb, 0xdb, 0xc7, 0x2c, 0x4e, 0xa8, 0x20, 0x85, 0x1a, 0x95, 0x80, 0x97, 0xca, 0xe9, 0x8e,
		0x44, 0x8e, 0x89, 0x0f, 0xe3, 0x20, 0xb9, 0x48, 0xa9, 0x18, 0x01, 0xad, 0x36, 0x36, 0x76, 0x29,
		0x3c, 0x28, 0xf7, 0xa8, 0x9c, 0x2a, 0xc1, 0xf5, 0x80, 0x2b, 0xc9, 0x75, 0x83, 0x4a, 0x9b, 0x11,
		0xa6, 0xc3, 0x56, 0xc8, 0xe8, 0xb4, 0xf4, 0x22, 0x72, 0x68, 0x56, 0x5f, 0xf4, 0x59, 0x57, 0x8c,
		0x5b, 0x2e, 0x13, 0x11, 0xdd, 0x48, 0xcb, 0x33, 0x3f, 0x25, 0x74, 0xdc, 0x10, 0x89, 0x3d, 0x48,
		0xde, 0x4f, 0x03, 0xa6, 0xa8, 0x1c, 0xfe, 0x37, 0x10, 0x71, 0x2c, 0x48, 0xb1, 0x5e, 0xe3, 0x26,
		0x03, 0x17, 0x3e, 0x0d, 0x1b, 0xe6, 0xb1, 0xf8, 0x86, 0xc5, 0x07, 0x91, 0xae, 0xd5, 0xda, 0x2a,
		0xea, 0x09, 0x1a, 0xd9, 0x1e, 0x13, 0x7d, 0x23, 0x42, 0xdd, 0x4e, 0x9b, 0x38, 0x30, 0x4a, 0x1d,
		0x0a, 0x63, 0x22, 0xf9, 0x1f, 0xe3, 0x84, 0xaa, 0xcd, 0x51, 0x16, 0xd8, 0x67, 0x1a, 0x95, 0xdb,
		0x89, 0x66, 0xea, 0x98, 0x46, 0x02, 0x18, 0x9d, 0x83, 0x77, 0xa7, 0x1d, 0x20, 0xcf, 0x3a, 0xc4,
		0xcc, 0xee, 0x67, 0x1a, 0xad, 0x94, 0xc6, 0x4f, 0xfc, 0xbb, 0x9e, 0xb6, 0x00, 0x24, 0xd3, 0x86,
		0x22, 0x89, 0x7a, 0xfa, 0x86, 0x29, 0x7e, 0x1c, 0x45, 0x71, 0x97, 0xc8, 0x79, 0x5a, 0x83, 0x28,
		0xd1, 0x6d, 0xe6, 0xd3, 0xb0, 0x10, 0x2a, 0x24, 0xf2, 0xa8, 0x01, 0x8b, 0x7b, 0xf4, 0xc8, 0x5b,
		0x32, 0xa7, 0x3c, 0x8d, 0xcf, 0x21, 0xfa, 0x2a, 0xbd, 0x7c, 0x27, 0x11, 0x19, 0x5d, 0x71, 0xf9,
		0xc1, 0xed, 0xb8, 0x6f, 0x7f, 0xeb, 0xf5, 0x6f, 0xbc, 0x31, 0xeb, 0x95, 0xc3, 0x5b, 0x9d, 0x54,
		0x3e, 0xad, 0xfd, 0xf9, 0xc1, 0xcd, 0x5a, 0x54, 0x7e, 0xe3, 0x77, 0x37, 0x91, 0xf2, 0x47, 0x52,
		0xe3, 0x55, 0xf9, 0xad, 0xfe, 0xa4, 0x79, 0xc0, 0x43, 0xae, 0xd5, 0x5d, 0x35, 0x92, 0x55, 0x6f,
		0xc0, 0x64, 0x9f, 0x57, 0xb2, 0x89, 0x42, 0xe5, 0x57, 0x96, 0x34, 0x55, 0x3f, 0x0d, 0xb9, 0xd4,
		0x95, 0x4f, 0x6b, 0x3d, 0x16, 0x24, 0x3c, 0xe3, 0x95, 0x8f, 0x2e, 0xab, 0x54, 0x72, 0x4e, 0xe1,
		0xe5, 0x1b, 0x53, 0xd8, 0x94, 0x32, 0xd2, 0x4c, 0x8b, 0x48, 0x56, 0x3e, 0x65, 0x98, 0xa6, 0x4a,
		0xe2, 0x0d, 0x78, 0xc8, 0x62, 0xa6, 0x07, 0xc3, 0xa7, 0x5b, 0x8f, 0x62, 0x3e, 0x94, 0xd0, 0x9e,
		0xe8, 0x57, 0xc5, 0x34, 0xac, 0x4c, 0xd6, 0x9f, 0xfb, 0xb8, 0x3e, 0xfe, 0x5a, 0x86, 0xd9, 0xab,
		0x24, 0x5a, 0xa5, 0x9e, 0x96, 0x13, 0x45, 0x38, 0x9b, 0xdd, 0x62, 0x16, 0xb8, 0x26, 0x57, 0xcf,
		0x7d, 0xbc, 0xda, 0x1f, 0xdf, 0xe1, 0x83, 0xdd, 0x6c, 0xbd, 0x22, 0x6c, 0x95, 0x41, 0x14, 0xf8,
		0x55, 0x2d, 0x46, 0x0f, 0xf4, 0xfa, 0x24, 0x3d, 0x72, 0x3a, 0xd3, 0x4b, 0xde, 0x58, 0x81, 0xdf,
		0x84, 0x1c, 0x4a, 0x5c, 0xed, 0x8d, 0xaf, 0x4d, 0x5e, 0xee, 0xd3, 0xda, 0xc6, 0x1b, 0x5f, 0x6c,
		0x2b, 0xde, 0x13, 0xb7, 0xd9, 0x56, 0x73, 0x66, 0x23, 0xbd, 0xaa, 0xe8, 0x65, 0x59, 0x9a, 0x4e,
		0x94, 0x2a, 0x8f, 0x67, 0x1a, 0xfc, 0x47, 0x8d, 0x8a, 0xc7, 0xcf, 0x65, 0xa5, 0x3d, 0x5a, 0xa5,
		0x36, 0xca, 0x33, 0x7e, 0xad, 0x82, 0x8d, 0xd0, 0x81, 0x50, 0xd9, 0x26, 0xdb, 0x9b, 0xae, 0x60,
		0xc6, 0xb9, 0x7b, 0x48, 0xbb, 0xcd, 0xa8, 0x38, 0x06, 0xe2, 0x64, 0x2c, 0x56, 0x36, 0xe2, 0x65,
		0x2d, 0x66, 0xb6, 0xe2, 0x96, 0x5b, 0xec, 0x72, 0x8b, 0x5f, 0x1e, 0x31, 0x34, 0xf4, 0xad, 0x19,
		0xd7, 0x2b, 0xab, 0x78, 0xce, 0x2e, 0xf0, 0xa3, 0x1b, 0x69, 0x3e, 0xe3, 0x0f, 0xec, 0xcc, 0x8d,
		0x34, 0x9d, 0xec, 0x03, 0xde, 0x63, 0x69, 0x30, 0x9a, 0xaa, 0x0d, 0xd3, 0x6b, 0x27, 0xe2, 0xbe,
		0x61, 0x78, 0x99, 0xa9, 0xd8, 0xe7, 0x11, 0xff, 0xdc, 0x6a, 0x90, 0x57, 0x1d, 0x9c, 0xa9, 0x85,
		0x33, 0xf5, 0x70, 0xa1, 0x26, 0x76, 0x10, 0xd7, 0x10, 0xc8, 0x57, 0x46, 0x1d, 0x97, 0x72, 0xad,
		0x76, 0x2a, 0xa4, 0x6e, 0xd4, 0x6d, 0x96, 0x7b, 0x22, 0xdb, 0x3b, 0x16, 0x97, 0x9e, 0x8f, 0x90,
		0x6a, 0x16, 0x68, 0xec, 0x2e, 0x74, 0x19, 0xdd, 0xf8, 0x44, 0x48, 0x6b, 0xf9, 0xcc, 0xa9, 0xd4,
		0x73, 0xc3, 0x7c, 0x63, 0x41, 0xca, 0x1d, 0x8c, 0x73, 0xa4, 0x98, 0x37, 0x44, 0xc8, 0x07, 0xa2,
		0x2f, 0x46, 0x01, 0xc7, 0x86, 0xf5, 0x78, 0xf7, 0x1f, 0x73, 0x4c, 0x2d, 0xbb, 0x5d, 0xba, 0xa9,
		0xdd, 0xac, 0xef, 0x6d, 0xee, 0x6d, 0xef, 0xd4, 0xf7, 0xb6, 0x96, 0x68, 0x8e, 0x3f, 0x94, 0x73,
		0xd5, 0xe5, 0x87, 0x62, 0xc6, 0x37, 0x90, 0x91, 0x4a, 0x1a, 0xdb, 0xbb, 0xea, 0x34, 0x86, 0xa3,
		0x86, 0xa3, 0x86, 0xa3, 0x86, 0xa3, 0x86, 0xa3, 0x86, 0xa3, 0x86, 0xa3, 0x36, 0x77, 0xd4, 0x4e,
		0x03, 0xf5, 0xcc, 0x64, 0xb6, 0x9d, 0xf2, 0x3b, 0x25, 0xb7, 0x5f, 0xf0, 0x2f, 0x06, 0x24, 0xf7,
		0xb3, 0x8e, 0xc5, 0x35, 0x47, 0x72, 0x99, 0x95, 0x33, 0x34, 0x23, 0xc1, 0x67, 0xd7, 0xd9, 0x93,
		0xe1, 0x33, 0x76, 0x78, 0xdd, 0x88, 0xdd, 0x5b, 0xcb, 0x43, 0x8f, 0xff, 0x1a, 0x05, 0xfe, 0x85,
		0x08, 0xb3, 0xf1, 0xe4, 0xd9, 0x27, 0xfa, 0x3e, 0x13, 0xa3, 0xcf, 0x34, 0x37, 0x67, 0x3e, 0xc7,
		0x97, 0x15, 0x4c, 0x7c, 0xd6, 0x41, 0x7c, 0x82, 0xf8, 0x04, 0xf1, 0x89, 0x78, 0x0a, 0xf1, 0x14,
		0xe2, 0x29, 0xc4, 0x53, 0x88, 0xa7, 0x10, 0x4f, 0x81, 0xf8, 0x84, 0xa3, 0x86, 0xa3, 0x86, 0xa3,
		0x86, 0xa3, 0x86, 0xa3, 0x86, 0xa3, 0x86, 0xa3, 0x2e, 0x36, 0x50, 0x5f, 0x24, 0xfb, 0x66, 0xc2,
		0x30, 0xb9, 0x21, 0xdf, 0x3a, 0xa3, 0x3b, 0x2e, 0x45, 0xfa, 0x74, 0x79, 0xb9, 0xbf, 0x59, 0x93,
		0x61, 0x9d, 0x4c, 0x71, 0x11, 0x09, 0xc0, 0x93, 0xa7, 0xc9, 0x98, 0xfb, 0x3b, 0xfa, 0x76, 0xb6,
		0xb4, 0xdf, 0x0d, 0xa4, 0xfd, 0xba, 0x80, 0x6d, 0xe5, 0xa7, 0xfd, 0x66, 0x86, 0x5d, 0x0f, 0x05,
		0x33, 0x9c, 0xf5, 0x14, 0xcf, 0x34, 0xdf, 0x53, 0x2e, 0x3b, 0x03, 0xb0, 0xaa, 0xb4, 0x27, 0xfa,
		0xf8, 0xcb, 0x2f, 0x93, 0xbd, 0x84, 0xf5, 0x91, 0xf8, 0x15, 0xa0, 0x04, 0xd9, 0x58, 0x7c, 0x23,
		0xf6, 0xde, 0x38, 0xfb, 0xbd, 0x0e, 0x35, 0x58, 0x2a, 0x35, 0xc8, 0x9c, 0xfd, 0xce, 0xfc, 0x50,
		0xc8, 0xea, 0x50, 0x26, 0xd2, 0xc4, 0x7c, 0x27, 0xe8, 0xc9, 0xd5, 0x66, 0x1b, 0x42, 0x1b, 0xc8,
		0x84, 0xc7, 0x86, 0xd0, 0x38, 0x3a, 0x91, 0x3e, 0xd3, 0x91, 0xba, 0x33, 0xd8, 0x25, 0x34, 0x0e,
		0xae, 0x1f, 0x3a, 0x05, 0xc9, 0x34, 0xe4, 0x6a, 0x8c, 0xae, 0x0c, 0xd6, 0x79, 0x6a, 0x0f, 0x37,
		0x0d, 0xae, 0x39, 0x94, 0x69, 0x38, 0x7c, 0x48, 0xe4, 0x23, 0x2c, 0x2e, 0x1f, 0xe1, 0x63, 0x79,
		0xd3, 0x14, 0xc5, 0x13, 0xb9, 0x62, 0xc1, 0x8a, 0xa5, 0x6b, 0x38, 0xc9, 0x35, 0xf0, 0xa2, 0x74,
		0x18, 0x12, 0x24, 0x36, 0x85, 0x56, 0x93, 0x2b, 0x51, 0x6a, 0x05, 0x07, 0x63, 0x61, 0x31, 0x8d,
		0x33, 0x0e, 0x3c, 0xa6, 0x94, 0xe0, 0xaa, 0xaa, 0x15, 0x93, 0x89, 0x18, 0xaa, 0x74, 0x62, 0xbf,
		0xab, 0xf1, 0xdc, 0x60, 0xd8, 0xaa, 0x70, 0x2e, 0xf0, 0xce, 0x04, 0xdf, 0x99, 0x02, 0xb8, 0x50,
		0x04, 0x3b, 0x8e, 0xb1, 0xfc, 0xad, 0x8a, 0x89, 0x89, 0xde, 0xde, 0xcc, 0xb1, 0x5b, 0xb1, 0x8b,
		0xdd, 0x8a, 0x7c, 0x94, 0x3a, 0x76, 0x2b, 0x0a, 0x9b, 0xda, 0xda, 0xee, 0xe6, 0xe6, 0xf6, 0xce,
		0xe6, 0xe6, 0xc6, 0x4e, 0x63, 0x67, 0x63, 0x6f, 0x6b, 0xab, 0xb6, 0x5d, 0xc3, 0xbe, 0x85, 0x63,
		0x2b, 0x64, 0x1c, 0xd8, 0xe4, 0x53, 0xe3, 0x42, 0x02, 0x1d, 0x77, 0x88, 0x3e, 0x27, 0xb2, 0xb7,
		0x5b, 0xe4, 0xcb, 0x42, 0x72, 0x42, 0x84, 0xac, 0x76, 0x55, 0xc4, 0x7c, 0x8f, 0x25, 0xba, 0x1a,
		0x7f, 0xd7, 0x39, 0xc0, 0xd4, 0xfc, 0x50, 0x80, 0x52, 0x80, 0x52, 0x80, 0x52, 0x80, 0x52, 0x80,
		0x52, 0x80, 0x52, 0x48, 0x01, 0x31, 0xf5, 0xcb, 0xbe, 0x48, 0x3c, 0xa6, 0xfc, 0x7c, 0x1e, 0x79,
		0x36, 0x08, 0x7c, 0x31, 0x7c, 0x31, 0x7c, 0x31, 0x7c, 0x31, 0x7c, 0x31, 0x7c, 0x31, 0x7c, 0xb1,
		0xa9, 0x2f, 0xe6, 0x4a, 0x45, 0x2a, 0x9f, 0x27, 0x9e, 0x0c, 0x01, 0x3f, 0x0c, 0x3f, 0x0c, 0x3f,
		0x0c, 0x3f, 0x0c, 0x3f, 0x0c, 0x3f, 0x0c, 0x3f, 0x6c, 0xea, 0x87, 0x7b, 0x5e, 0xe2, 0xc2, 0x17,
		0x3f, 0x1a, 0x06, 0xfe, 0x18, 0xfe, 0x18, 0xfe, 0x18, 0xfe, 0x18, 0xfe, 0x18, 0xfe, 0x18, 0xfe,
		0xd8, 0xd4, 0x1f, 0x87, 0x69, 0xa0, 0x85, 0x9b, 0xbd, 0xe3, 0x1f, 0x86, 0x82, 0x5f, 0x86, 0x5f,
		0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x36, 0xf5, 0xcb, 0x91, 0xa7, 0x79,
		0x4e, 0x7f, 0x3c, 0x19, 0x02, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e,
		0x18, 0x7e, 0xd8, 0xd4, 0x0f, 0xe7, 0x8e, 0x8a, 0x11, 0x0b, 0xc3, 0x07, 0xc3, 0x07, 0xc3, 0x07,
		0xc3, 0x07, 0xc3, 0x07, 0xc3, 0x07, 0x5b, 0xf9, 0xe0, 0x54, 0x3a, 0x62, 0xa8, 0x9f, 0x0c, 0x04,
		0x9f, 0x0c, 0x9f, 0x0c, 0x9f, 0x0c, 0x9f, 0x0c, 0x9f, 0x0c, 0x9f, 0x0c, 0x9f, 0x6c, 0xee, 0x93,
		0xbf, 0xcb, 0xe8, 0x46, 0x56, 0x63, 0x15, 0xe9, 0x28, 0xaf, 0x57, 0x7e, 0x32, 0x14, 0xfc, 0x32,
		0xfc, 0x32, 0xfc, 0x32, 0xfc, 0x32, 0xfc, 0x32, 0xfc, 0x32, 0xfc, 0xb2, 0x91, 0x5f, 0x0e, 0x86,
		0xc1, 0xad, 0x17, 0x70, 0xa6, 0xec, 0x1d, 0xf2, 0xa3, 0x31, 0xe0, 0x89, 0xe1, 0x89, 0x57, 0xca,
		0x13, 0x6b, 0x11, 0x72, 0x2d, 0xbc, 0xef, 0x49, 0xe9, 0xbe, 0xf8, 0xab, 0x1c, 0xdb, 0xb1, 0x8a,
		0x64, 0x32, 0x4a, 0xb8, 0x17, 0x49, 0xe3, 0x8a, 0x7e, 0xf8, 0x74, 0xf8, 0x74, 0xf8, 0xf4, 0x65,
		0xf6, 0xe9, 0x68, 0xc9, 0x86, 0x96, 0x6c, 0xc3, 0x37, 0x88, 0x52, 0xed, 0xac, 0x27, 0xdb, 0x33,
		0x63, 0x01, 0x96, 0x01, 0x96, 0x81, 0x20, 0x01, 0x41, 0x02, 0x30, 0x05, 0x30, 0x05, 0x82, 0xc4,
		0xd8, 0x33, 0xe7, 0xef, 0xca, 0xf6, 0x64, 0x14, 0x78, 0x63, 0x78, 0x63, 0x78, 0x63, 0x78, 0x63,
		0x78, 0x63, 0x78, 0x63, 0x78, 0x63, 0x63, 0x6f, 0x9c, 0xb7, 0x17, 0xcc, 0xa3, 0x31, 0xe0, 0x89,
		0xe1, 0x89, 0xe1, 0x89, 0xe1, 0x89, 0xe1, 0x89, 0xe1, 0x89, 0xe1, 0x89, 0x8d, 0x3d, 0xb1, 0xab,
		0x4e, 0x30, 0xcf, 0x8c, 0x05, 0xcf, 0x0c, 0xcf, 0x0c, 0xcf, 0x0c, 0xcf, 0x0c, 0xcf, 0x0c, 0xcf,
		0x0c, 0xcf, 0x6c, 0xec, 0x99, 0xf3, 0xf6, 0x82, 0x79, 0x34, 0x06, 0x3c, 0x31, 0x3c, 0x31, 0x3c,
		0x31, 0x3c, 0x31, 0x3c, 0x31, 0x3c, 0x31, 0x3c, 0xb1, 0xb1, 0x27, 0xce, 0x1f, 0x19, 0x23, 0x1e,
		0x86, 0x17, 0x86, 0x17, 0x86, 0x17, 0x86, 0x17, 0x86, 0x17, 0x86, 0x17, 0xb6, 0xf3, 0xc2, 0x6e,
		0xfa, 0xc1, 0xcc, 0x8d, 0x04, 0xaf, 0x0c, 0xaf, 0x0c, 0xaf, 0x0c, 0xaf, 0x0c, 0xaf, 0x0c, 0xaf,
		0x0c, 0xaf, 0x9c, 0xf1, 0x9b, 0x19, 0x65, 0xca, 0xbc, 0xd8, 0xcd, 0xd0, 0xab, 0xcf, 0x17, 0xb7,
		0x45, 0x31, 0x57, 0x6c, 0xb8, 0x96, 0x2c, 0x30, 0x75, 0xed, 0xb9, 0x8b, 0xd9, 0x2c, 0x8b, 0xd8,
		0xb2, 0x4d, 0xf9, 0x65, 0xc6, 0x29, 0x6f, 0x4a, 0x19, 0xe9, 0xd1, 0x0c, 0x18, 0x69, 0x6e, 0x25,
		0xf1, 0x06, 0x3c, 0x64, 0x31, 0xd3, 0x83, 0xe1, 0xd3, 0xaf, 0x47, 0x31, 0x97, 0xde, 0x08, 0xb4,
		0x54, 0xc5, 0xd0, 0x9d, 0xf4, 0x98, 0xc7, 0x93, 0xf5, 0xe7, 0x3e, 0xae, 0x27, 0x9a, 0x69, 0xbe,
		0x3e, 0x71, 0x3b, 0x26, 0x80, 0xaa, 0x92, 0x68, 0x95, 0x7a, 0x5a, 0x4e, 0x1c, 0xd7, 0xd9, 0xec,
		0x96, 0xad, 0xd9, 0x6d, 0xae, 0x9e, 0xfb, 0x78, 0xd5, 0x19, 0xde, 0xf1, 0x6a, 0x7f, 0x7a, 0xc7,
		0x0f, 0x6e, 0x66, 0x39, 0x83, 0x50, 0x57, 0x7c, 0x9e, 0x78, 0x4a, 0xc4, 0x46, 0xd3, 0x3b, 0xf3,
		0xcc, 0x8f, 0x2f, 0xce, 0xb8, 0x9a, 0x66, 0xb6, 0xd3, 0x18, 0x66, 0xda, 0xc0, 0x4b, 0x6b, 0x58,
		0x69, 0x0b, 0x27, 0x73, 0xc3, 0xc8, 0xdc, 0xf0, 0x31, 0x0f, 0x6c, 0x74, 0x6b, 0x50, 0x8d, 0xe1,
		0xe1, 0x6c, 0xb5, 0x12, 0xad, 0x84, 0xec, 0x9b, 0x2c, 0xd7, 0x44, 0xf6, 0x6a, 0xbb, 0x25, 0xea,
		0x17, 0x97, 0xac, 0x1b, 0x70, 0xdf, 0x5c, 0xb7, 0xa6, 0x17, 0x66, 0x9c, 0xc7, 0x03, 0xde, 0x63,
		0x69, 0x30, 0x5a, 0xcf, 0xa1, 0x38, 0x40, 0x1d, 0xa1, 0x8e, 0xe5, 0xaa, 0x63, 0x37, 0x8a, 0x02,
		0xce, 0xa4, 0x8d, 0x3e, 0xd6, 0x4a, 0xd4, 0x47, 0xd1, 0x13, 0xd2, 0xe7, 0xb7, 0xe6, 0xfa, 0x38,
		0xbd, 0x10, 0x8a, 0x05, 0xc5, 0x2a, 0x55, 0xb1, 0x52, 0x21, 0x75, 0xa3, 0x6e, 0xa1, 0x57, 0x3b,
		0x06, 0x97, 0xd8, 0x71, 0x1d, 0x16, 0xa4, 0x4e, 0x1e, 0x6e, 0x23, 0x67, 0xe0, 0x9d, 0x97, 0xcb,
		0x70, 0x11, 0x55, 0x5b, 0x70, 0x17, 0xb9, 0x38, 0x0b, 0x57, 0x53, 0xb6, 0x59, 0xdf, 0xdb, 0xdc,
		0xdb, 0xde, 0xa9, 0xef, 0x6d, 0x2d, 0x70, 0xee, 0x0a, 0x62, 0x08, 0x2e, 0x89, 0x33, 0x04, 0xf9,
		0xdb, 0xdf, 0x2c, 0x8e, 0x29, 0xf8, 0x08, 0x22, 0x25, 0x3f, 0x91, 0xe2, 0x04, 0x18, 0x8d, 0x1b,
		0x26, 0x0e, 0x26, 0x7e, 0xc0, 0x10, 0x1c, 0x3d, 0xbe, 0x18, 0x00, 0x09, 0x00, 0xa9, 0x54, 0x80,
		0x64, 0xd7, 0x0e, 0xd1, 0x62, 0x67, 0x28, 0x6f, 0xfb, 0x43, 0xa0, 0x2c, 0xa0, 0xac, 0x57, 0xa7,
		0xcc, 0xdd, 0x4e, 0x10, 0xf0, 0x16, 0xf0, 0x16, 0xf0, 0xd6, 0x52, 0xe3, 0xad, 0xa8, 0x2f, 0x3c,
		0x16, 0x58, 0x60, 0xad, 0xc9, 0x85, 0xc0, 0x59, 0xc0, 0x59, 0x2b, 0xc6, 0xf0, 0xc2, 0xe4, 0xc3,
		0xe4, 0xaf, 0xb4, 0xc9, 0x8f, 0xe2, 0x2e, 0xf3, 0xbe, 0x57, 0xc3, 0xc8, 0xb7, 0x09, 0xb2, 0x9f,
		0x5c, 0x6e, 0xbe, 0x2f, 0x38, 0x9a, 0x54, 0xb8, 0x0d, 0xb8, 0x8d, 0x55, 0x73, 0x1b, 0x4e, 0x94,
		0x33, 0xd4, 0xa9, 0xb9, 0x4a, 0x0e, 0x2f, 0x82, 0x42, 0x41, 0xa1, 0x4a, 0x55, 0xa8, 0x54, 0x48,
		0x5d, 0xdb, 0xb6, 0xd0, 0xa7, 0x6d, 0x50, 0x55, 0xa0, 0xaa, 0x1c, 0x4d, 0xd9, 0xf6, 0xd6, 0x56,
		0xe3, 0xfd, 0x72, 0x53, 0x4e, 0x3c, 0xce, 0x24, 0x4d, 0xd4, 0xd0, 0xe5, 0x8c, 0xae, 0x82, 0xcf,
		0x81, 0xcf, 0x29, 0xd5, 0xe7, 0xd0, 0x48, 0xb6, 0x1c, 0xc6, 0x9f, 0xd5, 0x44, 0x33, 0x9d, 0x26,
		0xe6, 0x8a, 0xf5, 0xf8, 0x62, 0xe8, 0x17, 0xf4, 0xcb, 0x42, 0xbf, 0x4e, 0x98, 0xf4, 0x99, 0x8e,
		0xd4, 0xdd, 0x50, 0xf0, 0x0b, 0xd7, 0x49, 0x2e, 0xd3, 0x70, 0xc2, 0xb7, 0xd8, 0x28, 0xe6, 0xa6,
		0xc1, 0x35, 0x87, 0x32, 0x0d, 0x87, 0x0f, 0x79, 0x0f, 0x1e, 0x0f, 0x3c, 0xde, 0xbb, 0xe7, 0xf1,
		0xb4, 0x89, 0xca, 0x3e, 0xa4, 0x29, 0x0c, 0xaf, 0x82, 0x63, 0x81, 0x63, 0x59, 0x7a, 0xc7, 0x22,
		0x7c, 0x2e, 0xb5, 0xd0, 0x77, 0x8a, 0xf7, 0x6c, 0x1c, 0x8b, 0x41, 0x58, 0x58, 0x69, 0x4d, 0x6e,
		0xf5, 0x99, 0x25, 0xdc, 0xbe, 0x07, 0xc2, 0xac, 0x74, 0xaf, 0x6a, 0xa0, 0x64, 0x4f, 0x43, 0xda,
		0x52, 0x8f, 0x30, 0x9c, 0x3d, 0x37, 0x93, 0xac, 0x9a, 0xeb, 0xe1, 0x5d, 0xbc, 0x44, 0xbe, 0x97,
		0x99, 0x7b, 0xa9, 0xfe, 0xce, 0x46, 0x83, 0xe9, 0x7a, 0xd8, 0xad, 0x2c, 0xa2, 0xc2, 0xdb, 0xd1,
		0x4b, 0x30, 0x1d, 0x1e, 0xa5, 0x52, 0x50, 0x7e, 0x05, 0xed, 0x07, 0x1e, 0xe5, 0xe7, 0x17, 0x9c,
		0xf3, 0x5a, 0x63, 0x6f, 0x93, 0xb8, 0x18, 0x7d, 0xf3, 0xc4, 0xa1, 0xf4, 0xdb, 0x9a, 0xf4, 0x52,
		0x24, 0xd1, 0xee, 0xee, 0x46, 0x7d, 0xeb, 0x48, 0x74, 0xb9, 0xa2, 0xfc, 0x22, 0xb7, 0xf5, 0xad,
		0x30, 0x88, 0x29, 0xbf, 0x41, 0x32, 0xf0, 0x93, 0x80, 0xf2, 0x0b, 0xc4, 0xb4, 0xad, 0x12, 0xf3,
		0x34, 0x0f, 0x44, 0x72, 0xc2, 0x35, 0x3b, 0x3e, 0x3b, 0x6b, 0x53, 0x7e, 0x15, 0x5e, 0xa3, 0xfc,
		0xf4, 0x8a, 0x33, 0x6f, 0x70, 0xd0, 0x39, 0xa6, 0xfc, 0x0e, 0x5d, 0xa1, 0x13, 0xca, 0xcf, 0x7f,
		0x1d, 0xde, 0x30, 0xc5, 0xbf, 0x09, 0xa5, 0x53, 0x16, 0x9c, 0x0a, 0xd2, 0x8a, 0xdd, 0xef, 0xb1,
		0x84, 0xb4, 0x93, 0xbe, 0x8e, 0x84, 0xc7, 0x8f, 0xfe, 0xe8, 0x90, 0xc6, 0xac, 0xa9, 0x94, 0x9c,
		0xb4, 0x7b, 0xf3, 0x93, 0xda, 0xd1, 0x01, 0x69, 0xa3, 0x74, 0x73, 0xc3, 0x64, 0x9b, 0xb4, 0x63,
		0x8b, 0x99, 0x62, 0x94, 0x9f, 0x3f, 0x60, 0xb1, 0x4f, 0x1a, 0xa3, 0x8a, 0xb8, 0x23, 0xfa, 0x94,
		0xdf, 0x60, 0xe8, 0x0b, 0x0e, 0xf5, 0x80, 0x76, 0xb0, 0xe3, 0x0d, 0x18, 0x75, 0x6b, 0xfa, 0x77,
		0x7d, 0xaf, 0x41, 0x1a, 0xa5, 0xb2, 0x20, 0x3d, 0x8c, 0x23, 0xd9, 0x1e, 0xdc, 0x25, 0xc2, 0x63,
		0xc1, 0x57, 0xda, 0x94, 0x52, 0x1a, 0x68, 0xda, 0x96, 0x75, 0x40, 0x9c, 0x13, 0xf3, 0xaf, 0xbb,
		0x17, 0x7e, 0x48, 0xfa, 0x0d, 0x22, 0x2f, 0xd9, 0x67, 0xdd, 0x80, 0x9f, 0xfa, 0xa4, 0x8d, 0x6b,
		0x20, 0x24, 0xef, 0xab, 0x28, 0x25, 0x4d, 0x26, 0xf9, 0xbe, 0xfc, 0xa3, 0xbe, 0x45, 0x9a, 0xc3,
		0x18, 0x3a, 0x69, 0xc9, 0xf5, 0x7e, 0x12, 0x32, 0x8f, 0x34, 0x68, 0x1a, 0x24, 0x09, 0x69, 0xdf,
		0x30, 0x10, 0x71, 0x4c, 0xfa, 0x05, 0x82, 0xfa, 0x75, 0xc0, 0x24, 0xe9, 0xb8, 0x47, 0x45, 0xf1,
		0x41, 0xe4, 0x25, 0xbf, 0x0b, 0xc5, 0x03, 0x9e, 0x24, 0x5f, 0xe3, 0x44, 0x2b, 0xce, 0x42, 0xe2,
		0x62, 0xc5, 0x55, 0xc0, 0x64, 0x7d, 0x05, 0xf6, 0x4f, 0xea, 0x01, 0x6d, 0xf4, 0x31, 0x94, 0xaf,
		0xa6, 0xa6, 0x2d, 0x4e, 0x51, 0xc8, 0x63, 0x49, 0x1a, 0xc3, 0xf6, 0xe3, 0x88, 0xb4, 0x95, 0x8a,
		0xb4, 0x3c, 0xd3, 0x29, 0x69, 0x3d, 0x88, 0x63, 0xe2, 0xf4, 0x0c, 0x69, 0xf9, 0x57, 0x8d, 0x8d,
		0x46, 0xeb, 0xe0, 0x82, 0xba, 0x25, 0xfd, 0xfc, 0x7b, 0x33, 0xae, 0x9f, 0x90, 0x5e, 0x0a, 0x11,
		0x92, 0xde, 0x31, 0x09, 0x23, 0x9f, 0x93, 0xf6, 0x66, 0x3c, 0xf1, 0x68, 0xfb, 0x02, 0x3f, 0x48,
		0x6e, 0x48, 0xd3, 0x7b, 0x8a, 0xd1, 0x56, 0xe0, 0x78, 0x25, 0xb8, 0xa4, 0x55, 0x08, 0x74, 0xba,
		0xfd, 0x38, 0x8e, 0x02, 0xe1, 0xdd, 0x31, 0x6f, 0x74, 0xf2, 0x84, 0x90, 0xa4, 0x77, 0x50, 0x62,
		0x5f, 0x8e, 0x36, 0x50, 0x8e, 0xa3, 0x28, 0x26, 0x1d, 0xbb, 0xdd, 0x76, 0xa3, 0xdb, 0x69, 0x40,
		0x4d, 0xda, 0x57, 0x44, 0xe4, 0xb9, 0x8d, 0x7d, 0x19, 0x24, 0xab, 0xc4, 0xcf, 0x9c, 0x30, 0x2f,
		0x60, 0x77, 0xb4, 0x37, 0x19, 0xa3, 0x58, 0x0b, 0x8f, 0x05, 0x17, 0x8a, 0xc9, 0x24, 0x8e, 0x94,
		0x26, 0x1e, 0x18, 0x5d, 0xd0, 0x36, 0xba, 0xb4, 0xfd, 0xf9, 0xb5, 0x9f, 0x04, 0xf5, 0x95, 0x02,
		0x24, 0xe7, 0xbd, 0x36, 0x75, 0x9d, 0x88, 0x24, 0xd7, 0xdf, 0x2e, 0x56, 0x21, 0x7b, 0xfd, 0x40,
		0x93, 0xb6, 0xb4, 0x3c, 0x0e, 0x14, 0x69, 0xf7, 0xe7, 0x71, 0xd2, 0x8f, 0xaf, 0x62, 0x45, 0xbc,
		0x14, 0xe5, 0xe0, 0x56, 0xac, 0x84, 0x75, 0x5d, 0x05, 0xdc, 0xe4, 0x5f, 0x77, 0xcf, 0x3d, 0xef,
		0x20, 0xba, 0x91, 0xf4, 0x43, 0xd7, 0x44, 0x91, 0x86, 0x1d, 0x3d, 0xd5, 0xab, 0x6d, 0x9f, 0xf4,
		0xd4, 0xe7, 0x54, 0xfa, 0x01, 0x5f, 0x29, 0xfc, 0xb1, 0x4f, 0x3f, 0x05, 0xb0, 0xe7, 0x89, 0xf8,
		0x58, 0xc8, 0xef, 0xc4, 0x6d, 0x6f, 0x37, 0x92, 0x3e, 0x6d, 0x25, 0x61, 0x21, 0x3f, 0xe7, 0x01,
		0xbb, 0x3b, 0x69, 0xb7, 0x48, 0xaf, 0x45, 0xad, 0x7e, 0x12, 0xc7, 0x9d, 0x1b, 0xa1, 0xbd, 0x01,
		0xe9, 0xf7, 0xb8, 0x16, 0x9e, 0x38, 0x1b, 0x47, 0xdf, 0xe4, 0x53, 0x95, 0x93, 0x80, 0x76, 0xe4,
		0x1a, 0x8a, 0xe8, 0x96, 0x76, 0x22, 0xdd, 0x18, 0x8f, 0x9c, 0x30, 0xef, 0x98, 0x3a, 0xb2, 0x1a,
		0xed, 0x0f, 0x9f, 0x1f, 0x10, 0x0f, 0x59, 0x69, 0x27, 0x96, 0x5e, 0x8f, 0x4b, 0x02, 0x69, 0xb3,
		0x69, 0xa3, 0x82, 0xba, 0xc3, 0x93, 0xa3, 0x2f, 0x07, 0xa4, 0x4d, 0x6b, 0xe8, 0x27, 0x2d, 0x8f,
		0xb6, 0x79, 0x65, 0xc9, 0x9d, 0x24, 0x9d, 0x39, 0x17, 0xc6, 0xb4, 0xcb, 0x0e, 0x3c, 0xd2, 0x7b,
		0x47, 0x83, 0x46, 0xbd, 0xd1, 0x56, 0xd1, 0xed, 0x1d, 0x69, 0x97, 0x40, 0x3c, 0x39, 0x39, 0x21,
		0x5e, 0x7a, 0xf3, 0x10, 0x00, 0xd1, 0x4e, 0x58, 0xf1, 0x24, 0xa7, 0x5d, 0xe6, 0xde, 0xd8, 0xa2,
		0x8d, 0xec, 0x7c, 0x49, 0x9b, 0xc5, 0x8f, 0xc2, 0x38, 0x4a, 0x84, 0xe6, 0xd4, 0x49, 0x19, 0x41,
		0xbc, 0x91, 0xce, 0xc0, 0x1f, 0xd4, 0x76, 0xeb, 0x75, 0xea, 0x09, 0x11, 0x27, 0x69, 0xa0, 0x45,
		0x1c, 0xf0, 0xdb, 0x48, 0xd1, 0x0f, 0x16, 0xa4, 0x47, 0x3b, 0x1f, 0x70, 0xf4, 0x16, 0x67, 0xd7,
		0x5c, 0x11, 0x2f, 0xf3, 0xe8, 0x2a, 0xe1, 0xf7, 0x49, 0x53, 0xf9, 0xa2, 0xf7, 0xad, 0x27, 0x46,
		0x2d, 0x3c, 0x57, 0x61, 0x3f, 0x62, 0x35, 0xf6, 0xb9, 0xd2, 0xa4, 0xbb, 0x12, 0xca, 0x3d, 0x5a,
		0x92, 0xd5, 0xd8, 0x09, 0xde, 0x0f, 0x75, 0xb2, 0x1a, 0xc2, 0x35, 0xe9, 0x14, 0x71, 0x3c, 0x3e,
		0xdd, 0x93, 0x3a, 0xb8, 0x4a, 0x7c, 0x8f, 0x74, 0xae, 0x41, 0x97, 0x25, 0xc2, 0x6b, 0x75, 0x0e,
		0x4e, 0xc9, 0xe7, 0x6e, 0xd1, 0x6e, 0xa6, 0xb5, 0x41, 0xbd, 0xfb, 0xeb, 0x98, 0x08, 0x27, 0x0d,
		0xd2, 0x23, 0x59, 0xdb, 0xda, 0x5a, 0x95, 0x5a, 0x04, 0xda, 0x3d, 0x2f, 0x7b, 0xde, 0xee, 0xce,
		0x0e, 0xf1, 0x9d, 0x46, 0xa6, 0xc3, 0x89, 0x93, 0x23, 0x6d, 0x5b, 0x35, 0xf3, 0xbe, 0x5f, 0x44,
		0x9d, 0xe1, 0x0f, 0xfa, 0x2d, 0x3c, 0x4f, 0x85, 0x77, 0x41, 0x1c, 0x3f, 0xcd, 0x30, 0x61, 0xc7,
		0xd3, 0x7c, 0x6b, 0xcb, 0xaf, 0x1d, 0xdd, 0xf8, 0x67, 0x51, 0x97, 0x78, 0x1f, 0xc0, 0x2e, 0xf5,
		0x0e, 0xee, 0xbb, 0x1b, 0xf5, 0x5a, 0x8d, 0x76, 0x89, 0xe4, 0x28, 0x64, 0x22, 0xbe, 0x7b, 0x71,
		0x5b, 0xdf, 0x1a, 0xa4, 0x52, 0x7f, 0x21, 0xdf, 0xb1, 0x8a, 0x36, 0x2f, 0x35, 0x0b, 0xc1, 0x8f,
		0x56, 0x62, 0x37, 0x29, 0x64, 0x5e, 0x87, 0x7b, 0xfb, 0x91, 0xd4, 0x2a, 0x0a, 0x02, 0xee, 0xb7,
		0x8e, 0x56, 0xa2, 0xe9, 0xe7, 0xd1, 0x1f, 0xd4, 0x77, 0xbb, 0xbf, 0x30, 0xcd, 0xbf, 0x73, 0x1e,
		0xd3, 0xce, 0xe4, 0x92, 0xc4, 0x3b, 0x95, 0x04, 0x91, 0xc7, 0x82, 0x0b, 0x16, 0x7c, 0x27, 0x4f,
		0x22, 0xb4, 0x99, 0x26, 0x9d, 0x2c, 0x1b, 0x34, 0x44, 0x4c, 0xbd, 0xbb, 0x5b, 0x98, 0x10, 0xdf,
		0xb0, 0x0c, 0xaf, 0x49, 0x3f, 0xbe, 0xf7, 0x74, 0x23, 0x83, 0x7e, 0x69, 0x27, 0x0b, 0xd2, 0x2f,
		0xab, 0xd3, 0x9b, 0x78, 0xe8, 0xbd, 0xa9, 0x1f, 0x8d, 0xa3, 0x22, 0xcd, 0x23, 0x59, 0xdb, 0x38,
		0xe9, 0x8a, 0x95, 0x38, 0x2f, 0x6a, 0xff, 0xfc, 0xa8, 0xdd, 0x92, 0xb4, 0x5f, 0x45, 0x6a, 0xae,
		0x02, 0xce, 0xae, 0x49, 0x6f, 0x98, 0xc9, 0x1e, 0xa3, 0x5d, 0x7b, 0xcb, 0x88, 0xab, 0xf6, 0x10,
		0x80, 0xdc, 0x52, 0x47, 0x20, 0xa2, 0x1b, 0x36, 0x76, 0x36, 0x62, 0xa6, 0xf6, 0x07, 0xc4, 0x1b,
		0xe5, 0xc6, 0xe3, 0xb4, 0xa3, 0x40, 0xc8, 0xef, 0xf4, 0xab, 0x3e, 0x27, 0x0c, 0x55, 0xc0, 0x48,
		0xb7, 0x52, 0xd3, 0xa3, 0x0e, 0x32, 0xbf, 0xd2, 0x6f, 0xd0, 0x7f, 0xee, 0x79, 0xab, 0xd0, 0x8f,
		0xac, 0xe7, 0xfb, 0xa4, 0xf1, 0xe0, 0xdf, 0xc4, 0x9b, 0x2d, 0x8f, 0x8f, 0xf3, 0xfa, 0x72, 0x70,
		0xd8, 0x3c, 0x6d, 0x92, 0x7f, 0x8f, 0x83, 0x16, 0xe9, 0x1a, 0xaa, 0xbf, 0xd9, 0xaa, 0x9c, 0xb9,
		0xd1, 0x5b, 0x81, 0xf8, 0x68, 0x97, 0x7c, 0x7c, 0x14, 0xab, 0x28, 0x5e, 0x81, 0xcc, 0x10, 0xd6,
		0x0b, 0x98, 0xe4, 0xc3, 0x40, 0x8f, 0x36, 0x7c, 0xa2, 0xdf, 0x0c, 0xe0, 0xb6, 0x5e, 0x6b, 0xd0,
		0xae, 0x8f, 0x24, 0xde, 0xd9, 0x31, 0xa2, 0x1e, 0x5e, 0x8b, 0xe8, 0xa4, 0xb9, 0x4f, 0xda, 0x18,
		0x51, 0x67, 0xc7, 0xef, 0x94, 0xa0, 0x5e, 0x9a, 0x37, 0x76, 0x69, 0xad, 0xb8, 0xe9, 0xfb, 0x8a,
		0x78, 0xbb, 0xdc, 0x1f, 0xd3, 0x89, 0xea, 0x5f, 0x13, 0xe2, 0xd9, 0x44, 0x2a, 0x51, 0x5d, 0xea,
		0x0a, 0x5e, 0x8f, 0x83, 0x34, 0x21, 0xcf, 0x0f, 0x24, 0xab, 0xd0, 0x66, 0x65, 0xa8, 0x20, 0x67,
		0x3d, 0x3f, 0x5c, 0x8d, 0xea, 0x8b, 0x9e, 0x3a, 0x8a, 0xd4, 0x0d, 0x53, 0x3e, 0xed, 0x23, 0xcc,
		0x69, 0x37, 0x51, 0x8a, 0x3c, 0xf6, 0x8d, 0xab, 0x44, 0x44, 0xb2, 0x46, 0x7d, 0x27, 0x92, 0x74,
		0xc6, 0x47, 0xb2, 0xd3, 0x11, 0xfd, 0x15, 0xe8, 0xb9, 0x77, 0x3e, 0x84, 0xb5, 0xab, 0x90, 0x40,
		0xbb, 0xfd, 0xfb, 0x49, 0xf3, 0x94, 0x7e, 0xdb, 0x89, 0x36, 0x71, 0xe7, 0xed, 0x49, 0xda, 0x25,
		0xea, 0x8d, 0x1d, 0xea, 0xa4, 0xd9, 0xf4, 0xe4, 0x84, 0x76, 0xbd, 0x4d, 0x1c, 0x05, 0x36, 0x13,
		0xd1, 0xa2, 0x7d, 0x74, 0x53, 0xd2, 0xa0, 0xbf, 0xbd, 0xf2, 0xc7, 0x19, 0x69, 0xc0, 0xd4, 0x5b,
		0x01, 0x3f, 0x1d, 0x84, 0xb4, 0x0b, 0x12, 0x12, 0xd2, 0x58, 0xf5, 0x9a, 0x78, 0x71, 0x4e, 0xaf,
		0x7d, 0xb3, 0x32, 0x4d, 0x32, 0xa6, 0x85, 0x6b, 0xe7, 0x5c, 0x13, 0xa7, 0x9a, 0x26, 0xf9, 0x7f,
		0x0d, 0xfa, 0xa7, 0xb2, 0xf7, 0x44, 0x57, 0xf1, 0x15, 0xe8, 0xa2, 0xde, 0x4d, 0x3c, 0xea, 0x27,
		0x03, 0x91, 0x8e, 0x1c, 0x44, 0xe2, 0x45, 0xad, 0xce, 0x31, 0xf5, 0x0c, 0x40, 0xb6, 0x32, 0x27,
		0x34, 0x4d, 0x69, 0xfd, 0x03, 0xea, 0xb4, 0xfe, 0x80, 0xfa, 0x92, 0x8c, 0x0a, 0x8c, 0xce, 0xae,
		0xb9, 0x1a, 0x70, 0xe6, 0xaf, 0xc2, 0x81, 0x15, 0xb3, 0xd2, 0xce, 0x96, 0xd4, 0x5c, 0x79, 0x91,
		0x94, 0xdc, 0x23, 0xde, 0x72, 0x73, 0x9b, 0x78, 0x03, 0x93, 0x6d, 0xda, 0x7d, 0x12, 0xc7, 0xcd,
		0x05, 0x3f, 0x77, 0x56, 0xa2, 0xf4, 0xb9, 0x45, 0xfc, 0xc4, 0xe4, 0x15, 0xd8, 0x28, 0x9a, 0xf0,
		0xca, 0x0d, 0xe6, 0x1f, 0xb3, 0x3e, 0xed, 0xbc, 0x21, 0xde, 0x5f, 0x89, 0xa3, 0x47, 0x55, 0x52,
		0x6f, 0xd4, 0x89, 0xb7, 0xea, 0x5a, 0x81, 0xf3, 0xb3, 0x44, 0x5f, 0x68, 0x16, 0xb4, 0xa3, 0x1b,
		0xae, 0x02, 0x21, 0x89, 0x37, 0x10, 0xad, 0xf6, 0x13, 0xd2, 0xc1, 0x46, 0x7f, 0x6f, 0x6f, 0xb7,
		0xbe, 0x0a, 0x65, 0x90, 0x17, 0xd1, 0x77, 0x2e, 0xcf, 0x89, 0x1f, 0xe8, 0x3e, 0x79, 0x99, 0xed,
		0x13, 0xda, 0x11, 0xec, 0x6d, 0x7d, 0x2b, 0xa6, 0x6d, 0xa4, 0xfa, 0x3a, 0xa6, 0xde, 0xe7, 0xf4,
		0xb8, 0x4d, 0x3c, 0xb3, 0x60, 0x15, 0x92, 0x0a, 0xea, 0xc4, 0x3b, 0x21, 0xd6, 0x36, 0x77, 0x49,
		0xef, 0x40, 0x32, 0x46, 0x9b, 0xb7, 0xe9, 0xa9, 0x83, 0xc0, 0x13, 0x87, 0xd2, 0x6f, 0x93, 0xaf,
		0xc5, 0x69, 0x47, 0x42, 0xea, 0x8b, 0x68, 0xf4, 0xa3, 0xc3, 0x95, 0x60, 0x2b, 0x42, 0x40, 0x75,
		0xb8, 0xba, 0x16, 0x1e, 0xa7, 0x7d, 0xdc, 0x48, 0xaf, 0xc7, 0x39, 0x75, 0x01, 0x3b, 0x88, 0xbc,
		0x64, 0x9a, 0xbb, 0xb2, 0x22, 0x67, 0x3e, 0x8b, 0xdb, 0x8b, 0xe8, 0x28, 0x4a, 0x49, 0x67, 0x44,
		0x45, 0xd4, 0xcf, 0x4d, 0x15, 0x89, 0x2f, 0xd3, 0x15, 0x38, 0x63, 0x91, 0x34, 0x07, 0xc5, 0x7d,
		0xc1, 0x4e, 0x98, 0x08, 0xe8, 0x93, 0x9b, 0xe3, 0xbc, 0xb4, 0xb3, 0x94, 0xb4, 0x43, 0xbf, 0xb9,
		0x61, 0xb2, 0xdd, 0xae, 0xaf, 0x40, 0x67, 0xae, 0x33, 0xda, 0xba, 0xcd, 0x74, 0xd8, 0x49, 0xbb,
		0xa3, 0x4d, 0xb0, 0x1e, 0xa3, 0x8d, 0x42, 0x84, 0xec, 0x09, 0x29, 0xba, 0x8c, 0xf6, 0x19, 0xee,
		0x83, 0xbb, 0x98, 0x2b, 0x8f, 0xfe, 0x0e, 0x6b, 0x7f, 0x6f, 0x8f, 0x76, 0xe8, 0xe7, 0x79, 0xfa,
		0x30, 0x4c, 0x69, 0xaf, 0xc1, 0xce, 0x46, 0x83, 0xe9, 0xed, 0x4d, 0xe2, 0xa7, 0xd4, 0xd0, 0x4e,
		0x2b, 0x9a, 0x52, 0x39, 0x5b, 0x9b, 0xb4, 0x03, 0x24, 0x11, 0x32, 0x75, 0x47, 0xfd, 0xb4, 0x1d,
		0xc6, 0x82, 0xad, 0x95, 0xe8, 0xe6, 0xd1, 0x58, 0x81, 0x2d, 0xbc, 0xdf, 0x15, 0x8b, 0x63, 0xae,
		0x56, 0x28, 0xad, 0x28, 0x8a, 0xb5, 0xf0, 0x58, 0xb0, 0x02, 0x6f, 0xe2, 0x75, 0x83, 0x6f, 0xdc,
		0xd3, 0xac, 0xa3, 0x19, 0xe9, 0xe0, 0xfb, 0x76, 0x77, 0xfb, 0x98, 0xc5, 0x09, 0x75, 0x24, 0x55,
		0xa3, 0x4e, 0x80, 0x90, 0x46, 0x20, 0xa1, 0x9f, 0x1c, 0xdc, 0x0a, 0xea, 0xbd, 0x7b, 0x2e, 0x52,
		0xea, 0x46, 0x49, 0xab, 0x8d, 0x8d, 0x5d, 0xca, 0x2f, 0xc0, 0x3d, 0xea, 0xa7, 0xfd, 0x71, 0x3d,
		0xe0, 0x4a, 0x72, 0xdd, 0xa0, 0xde, 0xde, 0x8d, 0xe9, 0xb0, 0x15, 0x32, 0xfa, 0x2d, 0x65, 0x89,
		0x1f, 0x02, 0xdd, 0x17, 0x7d, 0xd6, 0x15, 0xe3, 0x23, 0x5d, 0x88, 0xab, 0x46, 0xa4, 0xe5, 0x99,
		0x9f, 0xae, 0xc0, 0xf1, 0xb6, 0xa4, 0x73, 0x0e, 0x78, 0x3f, 0x0d, 0x98, 0xa2, 0x7e, 0xe8, 0xfe,
		0x40, 0xc4, 0xb1, 0x58, 0x09, 0x56, 0x76, 0xdc, 0x4c, 0xe9, 0xc2, 0xa7, 0x6d, 0x6b, 0x3d, 0x16,
		0xdf, 0xb0, 0xf8, 0x20, 0xd2, 0xb5, 0x5a, 0x5b, 0x45, 0x3d, 0x41, 0x3b, 0x3b, 0x6d, 0xa2, 0xe7,
		0xc4, 0xb7, 0x2e, 0xa6, 0xcd, 0xad, 0xd8, 0x2a, 0x74, 0xf2, 0x8e, 0x89, 0xe7, 0xab, 0x8d, 0x13,
		0x4f, 0x37, 0x47, 0x59, 0xb4, 0x9f, 0x69, 0x77, 0x90, 0x49, 0x34, 0x53, 0xc7, 0xb4, 0x13, 0x68,
		0x35, 0xa7, 0xde, 0x71, 0x62, 0xda, 0x59, 0xfd, 0xac, 0xb3, 0x22, 0x6e, 0xe3, 0x33, 0xed, 0x56,
		0x9b, 0xe3, 0x37, 0xf9, 0x5d, 0x4f, 0x5b, 0x62, 0x93, 0x6f, 0xdb, 0x95, 0x44, 0x3d, 0x7d, 0xc3,
		0x14, 0x3f, 0x8e, 0xa2, 0xb8, 0x4b, 0xfc, 0x7c, 0xe8, 0x41, 0x94, 0xe8, 0x36, 0xf3, 0x69, 0x5b,
		0x2c, 0x15, 0x12, 0x7f, 0x85, 0x80, 0xc5, 0xbd, 0xd5, 0xd9, 0xbc, 0x20, 0x7f, 0x0a, 0xf1, 0xf8,
		0xdc, 0xdb, 0xaf, 0xd2, 0x73, 0x73, 0xf2, 0xad, 0xd5, 0x95, 0x97, 0x1f, 0x4a, 0x98, 0x37, 0xbb,
		0xf9, 0xfa, 0x21, 0x49, 0xa0, 0x1e, 0x5a, 0x34, 0x58, 0x28, 0xff, 0x61, 0x99, 0x0e, 0x8f, 0x52,
		0x9b, 0x33, 0x10, 0xcb, 0x7f, 0x54, 0x6d, 0x75, 0x4a, 0x52, 0xf9, 0xcf, 0x29, 0x38, 0xe7, 0xb5,
		0xc6, 0xde, 0x26, 0x91, 0xe5, 0xff, 0x66, 0x5d, 0xce, 0xb0, 0x80, 0xa9, 0x9d, 0xd4, 0x16, 0x1e,
		0x89, 0xae, 0x4d, 0x0a, 0x73, 0xf9, 0x0f, 0x7c, 0x5b, 0xdf, 0x0a, 0x83, 0x98, 0xc2, 0x93, 0x26,
		0x03, 0xab, 0xb4, 0xa0, 0xf2, 0x1f, 0x34, 0xa6, 0x61, 0x05, 0x98, 0xa7, 0x79, 0x20, 0x92, 0x13,
		0xae, 0xd9, 0xf1, 0xd9, 0x59, 0x9b, 0xc2, 0x23, 0xf3, 0x1a, 0x85, 0xa7, 0x54, 0x9c, 0x79, 0x83,
		0x83, 0xce, 0x31, 0x85, 0x67, 0xed, 0x0a, 0x9d, 0x50, 0x78, 0xce, 0xeb, 0x70, 0x18, 0xb9, 0x4d,
		0x22, 0xd1, 0x53, 0x41, 0x42, 0xc1, 0xfa, 0x76, 0x1d, 0xc7, 0x17, 0x30, 0xb9, 0xe3, 0xa6, 0xab,
		0x1d, 0x12, 0x18, 0xcb, 0x32, 0xa5, 0xa1, 0xfc, 0x27, 0xf5, 0x93, 0xda, 0xd1, 0x01, 0x09, 0x23,
		0x30, 0x2e, 0xcd, 0x20, 0xe1, 0x5a, 0x99, 0x62, 0x14, 0x9e, 0x33, 0x60, 0xb1, 0x4f, 0x02, 0x53,
		0x89, 0xb8, 0x23, 0xfa, 0x14, 0x9e, 0x74, 0x68, 0x4b, 0x0f, 0xed, 0xea, 0x02, 0xcb, 0x7f, 0x58,
		0xeb, 0x62, 0x8e, 0xf2, 0x1f, 0xf5, 0xef, 0xfa, 0x5e, 0x83, 0x04, 0xaa, 0x9a, 0xec, 0x60, 0xb6,
		0x07, 0x77, 0x89, 0xf0, 0x58, 0xf0, 0x95, 0x06, 0x25, 0x90, 0x06, 0x9a, 0x86, 0xc5, 0x1a, 0x10,
		0xe1, 0x2e, 0xfc, 0xeb, 0xee, 0x85, 0x1f, 0x92, 0x78, 0xd2, 0x87, 0xe3, 0x5d, 0x49, 0x18, 0xad,
		0x40, 0x48, 0xde, 0xb7, 0xa3, 0x80, 0x17, 0x30, 0xb9, 0xbe, 0xfc, 0xc3, 0xe6, 0x7c, 0xd3, 0x05,
		0xc4, 0xac, 0x93, 0x3c, 0x37, 0xdb, 0xa6, 0xdb, 0x0b, 0x30, 0x05, 0x49, 0x42, 0xc2, 0xb6, 0x8e,
		0x32, 0xa6, 0x48, 0x68, 0x56, 0xdd, 0xae, 0xc1, 0xf4, 0x02, 0xf0, 0xf5, 0x0f, 0x4d, 0x31, 0xec,
		0xf3, 0x6c, 0x16, 0x22, 0x0e, 0x5c, 0x05, 0x4c, 0xd6, 0x09, 0xf1, 0xc4, 0xf5, 0x80, 0x86, 0xd7,
		0x1d, 0xca, 0x85, 0x55, 0xda, 0xf1, 0x02, 0xc4, 0x20, 0x0a, 0x79, 0x2c, 0x49, 0x60, 0xae, 0xbe,
		0x55, 0xe6, 0x6d, 0xf9, 0xcf, 0x19, 0x69, 0x79, 0xa6, 0x53, 0x12, 0x72, 0x1a, 0xc7, 0x44, 0xc2,
		0x6e, 0x12, 0xf2, 0xa9, 0x1a, 0x1b, 0x8d, 0xd6, 0xc1, 0x05, 0x15, 0x0b, 0xf5, 0xf9, 0xf7, 0x66,
		0x5c, 0x3f, 0x21, 0x31, 0xb5, 0x22, 0x24, 0xc1, 0x0c, 0x87, 0x91, 0xcf, 0x49, 0x58, 0x7d, 0x9e,
		0x78, 0x34, 0x6c, 0xa9, 0x1f, 0x24, 0x37, 0x24, 0xe8, 0x16, 0xc5, 0x68, 0x28, 0x52, 0x4c, 0x8a,
		0x0b, 0xa0, 0x04, 0xa8, 0xbb, 0xfd, 0x38, 0x8e, 0x02, 0xe1, 0xdd, 0x31, 0xcf, 0x8b, 0x52, 0xa9,
		0xad, 0x3a, 0x25, 0x2f, 0xc0, 0x13, 0xf8, 0x72, 0x44, 0x14, 0x1f, 0x47, 0x51, 0x4c, 0x22, 0x16,
		0xb8, 0xed, 0x46, 0xb7, 0xd3, 0x80, 0x8b, 0x84, 0xad, 0x8d, 0xc8, 0xc4, 0xb2, 0xfb, 0x32, 0x48,
		0x28, 0xc6, 0xdd, 0x27, 0xcc, 0x0b, 0xec, 0x4e, 0xa2, 0x5f, 0x40, 0x74, 0x30, 0x4e, 0x22, 0xcd,
		0x71, 0xde, 0xc3, 0x42, 0x00, 0xf8, 0x05, 0x0d, 0x63, 0x46, 0xc3, 0xbf, 0x5d, 0xdb, 0x9d, 0x76,
		0xb5, 0x04, 0x8e, 0xf8, 0xbc, 0xd7, 0xa6, 0x22, 0xb3, 0x91, 0xe4, 0xfa, 0xdb, 0x05, 0xa5, 0x2c,
		0xc8, 0x03, 0x4d, 0xc2, 0x82, 0xf1, 0x38, 0x50, 0x24, 0xdc, 0x84, 0xc7, 0x49, 0x3c, 0xa6, 0x8a,
		0x15, 0x91, 0xd4, 0x62, 0xab, 0x1e, 0x2f, 0x0b, 0xb4, 0x5a, 0x94, 0x70, 0xc1, 0xa8, 0x0c, 0xdc,
		0xcb, 0xd3, 0x56, 0x7b, 0x01, 0x36, 0x56, 0x91, 0x70, 0xb7, 0x3d, 0xd5, 0xab, 0x6d, 0x9f, 0xf4,
		0x94, 0xed, 0xd1, 0x4e, 0x4b, 0xe0, 0x77, 0xf7, 0xe9, 0xa4, 0xc8, 0xf4, 0x3c, 0x11, 0xdb, 0x15,
		0xd7, 0x2e, 0xc4, 0xa6, 0x75, 0x23, 0xe9, 0xd3, 0x10, 0xe2, 0xe9, 0x79, 0x08, 0x27, 0xed, 0x16,
		0x89, 0xb9, 0xad, 0xd5, 0x4f, 0xe2, 0xb8, 0x73, 0x23, 0xb4, 0x37, 0x20, 0xf1, 0xbc, 0xd7, 0xc2,
		0x13, 0x67, 0xe3, 0xe8, 0x8c, 0x4c, 0xea, 0x5c, 0x12, 0xd0, 0x88, 0x78, 0x42, 0x11, 0xdd, 0xd2,
		0x48, 0x40, 0x19, 0xfb, 0xe1, 0x13, 0xe6, 0x1d, 0x53, 0x41, 0x0e, 0xa3, 0x7d, 0xa7, 0xf3, 0x03,
		0x22, 0xa1, 0x0e, 0x8d, 0x84, 0xa9, 0xeb, 0x71, 0xe9, 0x04, 0x0d, 0xd6, 0x63, 0x72, 0xfc, 0xc4,
		0xd1, 0x97, 0x03, 0x12, 0x26, 0x2b, 0xf4, 0x93, 0x96, 0x47, 0xc3, 0x6c, 0xb1, 0xe4, 0x4e, 0x92,
		0xc8, 0x38, 0x09, 0x63, 0x1a, 0xe9, 0xa8, 0x1e, 0x09, 0x2e, 0x7c, 0xd0, 0xa8, 0x37, 0xda, 0x2a,
		0xba, 0xbd, 0x23, 0x61, 0x52, 0x89, 0x24, 0xcb, 0x25, 0x44, 0x52, 0xa6, 0x1f, 0x80, 0x36, 0x8d,
		0x8d, 0x67, 0xcf, 0xaa, 0x2b, 0xe4, 0x02, 0xbc, 0x54, 0x63, 0x8b, 0x06, 0x42, 0xf1, 0x25, 0x0d,
		0x76, 0x33, 0x0a, 0xe3, 0x28, 0x11, 0xb6, 0x9d, 0xac, 0x16, 0x30, 0xb3, 0x44, 0x0a, 0xd2, 0x07,
		0xfe, 0xc0, 0xae, 0x3b, 0xe6, 0x62, 0x36, 0x42, 0x4f, 0xd2, 0x40, 0x8b, 0x38, 0xe0, 0xb7, 0x91,
		0xa2, 0x03, 0x56, 0xa5, 0x47, 0x23, 0x5f, 0x66, 0xf4, 0xb4, 0xd6, 0x5d, 0x84, 0x17, 0x90, 0x84,
		0xa2, 0x84, 0xdf, 0x27, 0x41, 0x71, 0x8a, 0xde, 0xb7, 0x9e, 0xb8, 0xb8, 0x8b, 0x69, 0xf1, 0xb1,
		0xb4, 0xf8, 0xf9, 0x34, 0xe9, 0x92, 0x52, 0xb2, 0xd1, 0x14, 0xd3, 0xda, 0x61, 0xda, 0x0f, 0x75,
		0x42, 0x4b, 0x28, 0x26, 0x95, 0xa1, 0xc7, 0x51, 0x5f, 0x78, 0x2c, 0xa0, 0x02, 0x1e, 0x12, 0xdf,
		0x23, 0xb1, 0xf7, 0xd8, 0x65, 0x89, 0xf0, 0xec, 0x0e, 0x81, 0x5a, 0x50, 0x8e, 0x04, 0x8d, 0xe6,
		0x10, 0x1b, 0x54, 0xba, 0x6f, 0x8d, 0x89, 0x43, 0x12, 0xe0, 0x31, 0x92, 0xb5, 0xad, 0x2d, 0x6a,
		0x39, 0xaa, 0x34, 0x7a, 0x1a, 0xf5, 0xbc, 0xdd, 0x9d, 0x1d, 0x22, 0x3b, 0x1e, 0x4c, 0x87, 0x13,
		0x67, 0x40, 0xc2, 0x66, 0x69, 0xe6, 0x7d, 0xbf, 0x88, 0x3a, 0xda, 0xaa, 0x25, 0xed, 0xa2, 0x5a,
		0x31, 0x9d, 0x0a, 0xef, 0x82, 0x08, 0x3e, 0x98, 0x61, 0x9b, 0x8e, 0xa7, 0xf9, 0xd6, 0x96, 0x5f,
		0x3b, 0xba, 0xf1, 0xcf, 0xa2, 0x2e, 0x91, 0x3e, 0x32, 0x5d, 0x2a, 0x1d, 0x25, 0x77, 0x37, 0xea,
		0xb5, 0x1a, 0x8d, 0x92, 0x91, 0x11, 0x34, 0x27, 0xc2, 0xde, 0xde, 0xd6, 0xb7, 0x06, 0xa9, 0xd4,
		0x5f, 0xc8, 0x74, 0x66, 0xa0, 0xc1, 0x2b, 0xcc, 0x42, 0xb4, 0x23, 0x52, 0xec, 0xf8, 0xb8, 0xc5,
		0xf1, 0x7e, 0xae, 0x06, 0xc7, 0x0b, 0x6c, 0xde, 0x74, 0xf4, 0x07, 0x95, 0xdd, 0xb2, 0x2f, 0x4c,
		0xf3, 0xef, 0x9c, 0xc7, 0x34, 0x32, 0x26, 0x24, 0x91, 0x8a, 0xe2, 0x20, 0xf2, 0x58, 0x70, 0xc1,
		0x82, 0xef, 0x64, 0x82, 0xc9, 0x36, 0xd3, 0x24, 0x92, 0xbd, 0x82, 0x86, 0x88, 0xa9, 0x74, 0x19,
		0x09, 0x13, 0x22, 0x1b, 0x27, 0xe1, 0x35, 0x89, 0xc7, 0xf4, 0x9e, 0x12, 0xb9, 0x74, 0x4a, 0x5a,
		0x58, 0x90, 0x7e, 0xa1, 0xd7, 0xd3, 0x6d, 0xe8, 0xcd, 0xa8, 0xb4, 0xa2, 0x56, 0x91, 0xe6, 0x91,
		0xac, 0x6d, 0xd8, 0x9d, 0xdd, 0xb9, 0xb8, 0xca, 0xa1, 0xfd, 0xf3, 0xa3, 0x76, 0x4b, 0xd2, 0x78,
		0x64, 0xa9, 0xb9, 0x0a, 0x38, 0xbb, 0x26, 0x41, 0xf4, 0xcb, 0x1e, 0xa3, 0x51, 0x43, 0xc4, 0x88,
		0xa8, 0xd8, 0xd0, 0xf1, 0xde, 0x52, 0xf1, 0xbc, 0xa2, 0x1b, 0x36, 0x76, 0x36, 0x62, 0xa6, 0xf6,
		0x07, 0x44, 0x1a, 0x92, 0xc5, 0xe3, 0x74, 0x80, 0x40, 0xc8, 0xef, 0x74, 0xaa, 0x5d, 0x26, 0x0c,
		0x43, 0xc0, 0x48, 0xb4, 0xfa, 0xd0, 0xa3, 0xca, 0xed, 0x5f, 0xe9, 0x34, 0x00, 0x3d, 0xf7, 0x3c,
		0x4a, 0x7d, 0x34, 0x7a, 0xbe, 0x4f, 0x02, 0xd7, 0xfc, 0x4d, 0xa4, 0x19, 0xdd, 0xf4, 0xa0, 0xc0,
		0xc3, 0xe6, 0x69, 0x93, 0xcc, 0xf3, 0x1e, 0xb4, 0x48, 0xe4, 0xb2, 0xff, 0xcd, 0xa8, 0xf5, 0xd6,
		0xed, 0x11, 0xc2, 0xe1, 0xbb, 0x64, 0x70, 0x78, 0xac, 0xa2, 0x98, 0xd0, 0xce, 0x2f, 0xeb, 0x05,
		0x4c, 0xf2, 0x61, 0xe0, 0x40, 0x03, 0x1e, 0xd0, 0x29, 0x22, 0xbc, 0xad, 0xd7, 0x1a, 0x34, 0xea,
		0x45, 0x88, 0x74, 0xfa, 0x89, 0xa8, 0x84, 0x5f, 0x22, 0x3a, 0x69, 0xee, 0x93, 0x50, 0x7e, 0x2a,
		0x6c, 0xe2, 0x9d, 0x12, 0x54, 0x4a, 0x1b, 0xc6, 0xa6, 0xbf, 0x15, 0x37, 0x7d, 0x5f, 0x11, 0x69,
		0x4b, 0xf6, 0xe3, 0x36, 0x7f, 0xfd, 0x6b, 0x42, 0x64, 0x97, 0x5f, 0x25, 0xaa, 0x4b, 0x45, 0xd1,
		0xea, 0x71, 0x90, 0x26, 0x64, 0xe2, 0xc4, 0x84, 0x52, 0xd9, 0xf3, 0x50, 0x80, 0xcf, 0x7a, 0x7e,
		0x48, 0x2b, 0xfb, 0xb6, 0xa7, 0x8e, 0x22, 0x75, 0xc3, 0x94, 0x4f, 0xe3, 0x48, 0x36, 0x1a, 0xcd,
		0x05, 0x22, 0x8f, 0x7d, 0xe3, 0x2a, 0x11, 0x91, 0xac, 0x51, 0xd9, 0x11, 0x21, 0xb1, 0xa3, 0x9b,
		0xec, 0x74, 0x44, 0x9f, 0x50, 0x2f, 0x17, 0xcb, 0x33, 0xf7, 0x17, 0x97, 0x00, 0xb6, 0xfd, 0xfb,
		0x49, 0xf3, 0x94, 0x4e, 0x99, 0x69, 0x9b, 0x88, 0x33, 0xf3, 0x24, 0x8d, 0x52, 0xb8, 0xc6, 0x0e,
		0x15, 0x72, 0x63, 0xda, 0x69, 0xb5, 0x5d, 0x6f, 0x13, 0x41, 0x33, 0xcd, 0x44, 0xb4, 0x68, 0xb4,
		0x38, 0x4f, 0x1a, 0x84, 0x4e, 0x3d, 0x3d, 0x23, 0x01, 0x08, 0x7a, 0x84, 0xfc, 0x56, 0x10, 0xc6,
		0x44, 0xce, 0x67, 0x25, 0x21, 0xa6, 0x44, 0x92, 0xaa, 0x7b, 0xed, 0x1b, 0x72, 0xc5, 0xaf, 0xd3,
		0x82, 0x80, 0x73, 0xae, 0x89, 0x50, 0x05, 0x93, 0xfc, 0x98, 0x06, 0x9d, 0xd3, 0xe4, 0x7a, 0xa2,
		0xab, 0x38, 0xa1, 0x6e, 0x8f, 0xdd, 0xc4, 0xa3, 0xd2, 0x71, 0x9b, 0x04, 0x72, 0x15, 0x89, 0x17,
		0xb5, 0x3a, 0xc7, 0x54, 0x32, 0x64, 0x18, 0xb9, 0x4e, 0xe6, 0x53, 0xba, 0xf3, 0x80, 0x0a, 0xdd,
		0x39, 0xa0, 0x32, 0xc5, 0xa3, 0x04, 0xf0, 0xb3, 0x6b, 0xae, 0x06, 0x9c, 0xf9, 0x94, 0x1a, 0xd6,
		0xce, 0x4a, 0x5a, 0x5a, 0x52, 0x73, 0xe5, 0x45, 0x52, 0x72, 0x8f, 0x48, 0x4b, 0xa5, 0x6d, 0x22,
		0x85, 0xc6, 0xdb, 0x34, 0xfa, 0xe9, 0x8c, 0x9b, 0xd3, 0x7c, 0xee, 0x90, 0x2a, 0xc9, 0x6a, 0x11,
		0x39, 0x79, 0x8a, 0x10, 0xf1, 0x3d, 0xe1, 0xe7, 0x1a, 0xcc, 0x3f, 0x66, 0x7d, 0x1a, 0xfb, 0xf9,
		0xbc, 0x4f, 0xea, 0x48, 0x19, 0x95, 0xd4, 0x1b, 0x75, 0x22, 0xad, 0x27, 0x08, 0xf5, 0x8d, 0x17,
		0x7d, 0xa1, 0x59, 0xd0, 0x8e, 0x6e, 0xb8, 0x0a, 0x84, 0x24, 0xd2, 0x08, 0xaa, 0xda, 0x4f, 0x48,
		0x80, 0xdd, 0xfe, 0xde, 0xde, 0x2e, 0xa5, 0xe3, 0x92, 0xb7, 0x2e, 0xa2, 0xef, 0x5c, 0x9e, 0x13,
		0x39, 0x88, 0x6e, 0xf2, 0xd0, 0xdb, 0x27, 0x34, 0x22, 0x9f, 0xdb, 0xfa, 0x56, 0x4c, 0xc3, 0x28,
		0xf4, 0x75, 0x4c, 0xa5, 0x2f, 0xd5, 0x71, 0x9b, 0xc8, 0x4e, 0x23, 0xa5, 0x4d, 0xc6, 0x3a, 0x91,
		0x8e, 0x39, 0xb5, 0xcd, 0x5d, 0x12, 0x3b, 0x21, 0x8c, 0xd1, 0x88, 0xc7, 0x7b, 0xea, 0x20, 0xf0,
		0xc4, 0xa1, 0xf4, 0xdb, 0x64, 0x72, 0xa8, 0xdb, 0x91, 0x90, 0xfa, 0x22, 0x1a, 0xfd, 0xe8, 0x70,
		0x25, 0x18, 0x31, 0x02, 0xa1, 0xc3, 0xd5, 0xb5, 0xf0, 0x38, 0x8d, 0xf6, 0xc1, 0xbd, 0x1e, 0xe7,
		0x14, 0x4f, 0xfb, 0x24, 0x76, 0x46, 0x96, 0xb8, 0xbd, 0x88, 0x8e, 0xa2, 0x94, 0xc6, 0xe1, 0xa4,
		0x54, 0xce, 0xbd, 0x11, 0x89, 0x2f, 0x53, 0x42, 0x67, 0x73, 0x90, 0xe0, 0x10, 0xb8, 0x2f, 0xd8,
		0x09, 0x13, 0x01, 0x1d, 0x52, 0x69, 0x9c, 0xe7, 0x71, 0x96, 0x92, 0x70, 0x70, 0x37, 0x37, 0x4c,
		0xb6, 0xdb, 0x75, 0x42, 0x9d, 0x26, 0xce, 0x68, 0xe8, 0x18, 0xd3, 0x61, 0x27, 0xed, 0x8e, 0xc8,
		0xfb, 0x1e, 0xa3, 0xe1, 0x7d, 0x85, 0xec, 0x09, 0x29, 0xba, 0x8c, 0xc6, 0xd9, 0x73, 0x83, 0xbb,
		0x98, 0x2b, 0x8f, 0xce, 0x8e, 0x4e, 0x7f, 0x6f, 0x8f, 0x46, 0x28, 0xe1, 0x79, 0xfa, 0x30, 0x4c,
		0x69, 0xcc, 0xe9, 0xce, 0x46, 0x83, 0xe9, 0xed, 0x4d, 0x22, 0xdd, 0xa2, 0x69, 0x6c, 0xf7, 0x4f,
		0x43, 0xf4, 0xad, 0x4d, 0x1a, 0x40, 0x5c, 0x84, 0x4c, 0xdd, 0x51, 0xe9, 0x6e, 0xcd, 0x58, 0xb0,
		0x45, 0xaa, 0x1a, 0xb7, 0x41, 0x68, 0x8b, 0xe1, 0x77, 0xc5, 0xe2, 0x98, 0x2b, 0x82, 0xdb, 0xfd,
		0xd1, 0xf8, 0x88, 0x4f, 0x42, 0x4f, 0xec, 0x75, 0x83, 0x6f, 0xdc, 0xd3, 0xac, 0xa3, 0x19, 0x89,
		0xe0, 0xec, 0x76, 0x77, 0xfb, 0x98, 0xc5, 0x09, 0x15, 0xa4, 0x50, 0xa3, 0x12, 0xf0, 0x52, 0x39,
		0xdd, 0x91, 0xc8, 0x31, 0xf1, 0x61, 0x1c, 0x24, 0x17, 0x29, 0x15, 0x23, 0xa0, 0xd5, 0xc6, 0xc6,
		0x2e, 0x85, 0x07, 0xe5, 0x1e, 0x95, 0x53, 0x25, 0xb8, 0x1e, 0x70, 0x25, 0xb9, 0x6e, 0x50, 0x69,
		0x33, 0xc2, 0x74, 0xd8, 0x0a, 0x19, 0x9d, 0x96, 0x5e, 0x44, 0x0e, 0xcd, 0xea, 0x8b, 0x3e, 0xeb,
		0x8a, 0x71, 0xcb, 0x65, 0x22, 0xa2, 0x1b, 0x69, 0x79, 0xe6, 0xa7, 0x84, 0x8e, 0x1b, 0x22, 0xb1,
		0x07, 0xc9, 0xfb, 0x69, 0xc0, 0x14, 0x95, 0xc3, 0xff, 0x06, 0x22, 0x8e, 0x05, 0x29, 0xd6, 0x6b,
		0xdc, 0x64, 0xe0, 0xc2, 0xa7, 0x61, 0xc3, 0x3c, 0x16, 0xdf, 0xb0, 0xf8, 0x20, 0xd2, 0xb5, 0x5a,
		0x5b, 0x45, 0x3d, 0x41, 0x23, 0xdb, 0x63, 0xa2, 0x6f, 0x44, 0xa8, 0xdb, 0x69, 0x13, 0x07, 0x46,
		0xa9, 0x43, 0x61, 0x4c, 0x24, 0xff, 0x63, 0x9c, 0x50, 0xb5, 0x39, 0xca, 0x02, 0xfb, 0x4c, 0xa3,
		0x72, 0x3b, 0xd1, 0x4c, 0x1d, 0xd3, 0x48, 0x00, 0xa3, 0x73, 0xf0, 0xee, 0xb4, 0x03, 0xe4, 0x59,
		0x87, 0x98, 0xd9, 0xfd, 0x4c, 0xa3, 0x95, 0xd2, 0xf8, 0x89, 0x7f, 0xd7, 0xd3, 0x16, 0x80, 0x64,
		0xda, 0x50, 0x24, 0x51, 0x4f, 0xdf, 0x30, 0xc5, 0x8f, 0xa3, 0x28, 0xee, 0x12, 0x39, 0x4f, 0x6b,
		0x10, 0x25, 0xba, 0xcd, 0x7c, 0x1a, 0x16, 0x42, 0x85, 0x44, 0x1e, 0x35, 0x60, 0x71, 0x8f, 0x1e,
		0x79, 0x4b, 0xe6, 0x94, 0xa7, 0xf1, 0x39, 0x44, 0x5f, 0xa5, 0x97, 0xef, 0x24, 0x22, 0xa3, 0x2b,
		0x2e, 0x3f, 0xb8, 0x1d, 0xf7, 0xed, 0x6f, 0xbd, 0xfe, 0x8d, 0x37, 0x66, 0xbd, 0xd2, 0x94, 0x32,
		0xd2, 0x4c, 0x8b, 0x48, 0x56, 0x3e, 0x65, 0x98, 0xef, 0x4a, 0xe2, 0x0d, 0x78, 0xc8, 0x62, 0xa6,
		0x07, 0xc3, 0x19, 0x5e, 0x8f, 0x62, 0x3e, 0x9c, 0xde, 0x9e, 0xe8, 0x57, 0xc5, 0x34, 0x26, 0x4a,
		0xd6, 0x9f, 0xfb, 0xb8, 0x9e, 0x68, 0xa6, 0x79, 0xe5, 0x63, 0x86, 0x5b, 0x68, 0x95, 0x7a, 0x5a,
		0x4e, 0x16, 0xf1, 0x6c, 0x76, 0x87, 0x59, 0xd0, 0x95, 0x5c, 0x3d, 0xf7, 0xf1, 0xaa, 0x33, 0xba,
		0xc1, 0x07, 0xbb, 0xb9, 0x7a, 0x65, 0x9e, 0x2a, 0x49, 0xda, 0x7d, 0x78, 0xa3, 0x37, 0xa7, 0xe9,
		0xc1, 0xce, 0x3f, 0xb9, 0xec, 0x8d, 0x75, 0xf8, 0x4d, 0x48, 0xbf, 0xf2, 0x69, 0xad, 0xf6, 0xc6,
		0xd7, 0xf6, 0x47, 0x33, 0x51, 0xf9, 0xb4, 0xb6, 0xf1, 0xc6, 0x17, 0xdb, 0x8a, 0xf7, 0xc4, 0x6d,
		0xb6, 0x35, 0x9d, 0xa9, 0xb9, 0x57, 0x15, 0xbd, 0x2c, 0x2b, 0xd4, 0x89, 0x52, 0xe5, 0xf1, 0x4c,
		0x83, 0x8f, 0x5f, 0x8e, 0xdf, 0xdd, 0x44, 0xca, 0x1f, 0xef, 0x66, 0x8e, 0x9e, 0x2b, 0x9b, 0x2d,
		0xa8, 0xfc, 0xca, 0x92, 0xa6, 0xea, 0xa7, 0x21, 0x97, 0xba, 0xf2, 0x69, 0x4d, 0xab, 0x94, 0x67,
		0xbc, 0xf0, 0xd1, 0x55, 0x93, 0xd7, 0x2a, 0x58, 0x8f, 0x0e, 0x84, 0xca, 0xa8, 0x40, 0x8f, 0xa4,
		0x22, 0xfb, 0x0c, 0x3e, 0x27, 0x53, 0x59, 0x27, 0x31, 0x9b, 0x68, 0x19, 0x8b, 0x98, 0x8d, 0xa8,
		0x59, 0x8b, 0x9c, 0xad, 0xe8, 0xe5, 0x16, 0xc1, 0xdc, 0xa2, 0x98, 0x47, 0x24, 0x0d, 0x5d, 0x45,
		0xc6, 0xf5, 0xca, 0x2a, 0xaa, 0xb3, 0x0b, 0xbc, 0xa9, 0x44, 0x18, 0xce, 0xf9, 0x43, 0xd2, 0xf3,
		0xe8, 0x7a, 0xc3, 0xf9, 0x32, 0x13, 0x5b, 0x6b, 0xf1, 0xcd, 0x23, 0xc6, 0xb9, 0xc5, 0x39, 0xaf,
		0x58, 0x3b, 0x13, 0x6f, 0x67, 0x62, 0xee, 0x42, 0xdc, 0xed, 0x90, 0x97, 0x21, 0xbe, 0x34, 0x56,
		0x83, 0xd9, 0x85, 0x3e, 0x4f, 0x3c, 0x25, 0xe2, 0xcc, 0x98, 0xe9, 0x75, 0x2a, 0xee, 0xd1, 0x60,
		0x96, 0x33, 0x3d, 0x51, 0x94, 0x0d, 0xcb, 0xcb, 0x6d, 0x15, 0xc6, 0x85, 0xe2, 0x38, 0x53, 0x20,
		0x57, 0x8a, 0xe4, 0x5c, 0xa1, 0x9c, 0x2b, 0x96, 0x4b, 0x05, 0xb3, 0x53, 0xb4, 0x1c, 0x01, 0xdd,
		0xe8, 0xc1, 0x47, 0x1d, 0xb8, 0x9c, 0x48, 0x4b, 0xa2, 0x95, 0x90, 0xfd, 0x3c, 0xe2, 0x32, 0x75,
		0x32, 0xbb, 0x1f, 0xca, 0x99, 0x37, 0x8b, 0x39, 0xab, 0x70, 0xc9, 0xba, 0x01, 0xf7, 0xf3, 0xdb,
		0x9a, 0xe9, 0x40, 0x96, 0xeb, 0x76, 0xc0, 0x7b, 0x2c, 0x0d, 0xf4, 0x38, 0x2d, 0x22, 0xe5, 0x30,
		0x57, 0x30, 0x57, 0x30, 0x57, 0x26, 0xd2, 0xd2, 0x8d, 0xa2, 0x80, 0x33, 0xe9, 0xc2, 0x5e, 0xd5,
		0x96, 0xd8, 0x5e, 0x09, 0xe9, 0xf3, 0xdb, 0xfc, 0xd6, 0x6a, 0x3c, 0x4c, 0x7e, 0x5b, 0xb5, 0x01,
		0x43, 0x05, 0x43, 0x05, 0x43, 0x65, 0x22, 0x2d, 0xa9, 0x90, 0xba, 0x51, 0x77, 0x60, 0xa7, 0x76,
		0x72, 0x0c, 0x71, 0xce, 0x64, 0x7f, 0xf8, 0x34, 0x7f, 0xe6, 0x5a, 0xce, 0x7c, 0xe2, 0x3a, 0x7a,
		0x90, 0x13, 0x21, 0x73, 0xcb, 0xbd, 0x23, 0xa3, 0x32, 0x37, 0xdc, 0x37, 0x16, 0xa4, 0xdc, 0xe1,
		0x78, 0x47, 0x8a, 0x79, 0xc3, 0x58, 0xf4, 0x40, 0xf4, 0x85, 0x4e, 0x86, 0x03, 0xe7, 0x1e, 0xf7,
		0xfe, 0xa3, 0x83, 0x25, 0x60, 0xb7, 0x4b, 0xbf, 0x04, 0x9b, 0xf5, 0xbd, 0xcd, 0xbd, 0xed, 0x9d,
		0xfa, 0xde, 0xd6, 0x12, 0xaf, 0xc5, 0x87, 0xc5, 0x5c, 0x7d, 0x59, 0x16, 0x5c, 0x29, 0x94, 0x31,
		0x3a, 0xbc, 0x1d, 0x2d, 0xc3, 0x9f, 0x65, 0xed, 0x63, 0x3e, 0xf2, 0x95, 0x91, 0x57, 0xe5, 0xb7,
		0xfa, 0x93, 0xe6, 0x01, 0x0f, 0xb9, 0x56, 0x77, 0xd5, 0x48, 0x56, 0xbd, 0xc1, 0xc8, 0x42, 0x3a,
		0x21, 0xfa, 0x7a, 0x2c, 0x48, 0x5c, 0x30, 0x7d, 0x85, 0x6f, 0xaf, 0x9a, 0x92, 0xee, 0x66, 0xdb,
		0x9b, 0x73, 0xd7, 0xe7, 0xd8, 0xee, 0x7c, 0xbc, 0xfb, 0xf7, 0xe4, 0xb7, 0x75, 0x2b, 0x3e, 0x7c,
		0x2d, 0xd7, 0xd6, 0xe8, 0xe3, 0x87, 0x79, 0xf2, 0xdb, 0xd5, 0x04, 0xa6, 0x7e, 0x28, 0x66, 0xcd,
		0x0c, 0x54, 0xcc, 0x32, 0x6e, 0xc8, 0x15, 0x2f, 0x58, 0xfa, 0x02, 0x6c, 0x32, 0x60, 0x93, 0xa1,
		0x60, 0x4c, 0xfe, 0x90, 0x23, 0xc4, 0x59, 0x4f, 0x71, 0xab, 0xf5, 0x9e, 0x92, 0x05, 0x16, 0x28,
		0xbc, 0xd2, 0x9e, 0x98, 0xbc, 0x5f, 0x7e, 0x99, 0x98, 0xab, 0xf5, 0xb1, 0x7e, 0x2d, 0x81, 0x9d,
		0x18, 0x27, 0x92, 0x58, 0xdb, 0x89, 0xac, 0x79, 0x28, 0xcf, 0x4e, 0xa5, 0xad, 0x9d, 0xa8, 0xc3,
		0x4e, 0xc0, 0x4e, 0xbc, 0xc6, 0x57, 0xd9, 0x6e, 0x46, 0x32, 0x3f, 0x14, 0xb2, 0x3a, 0x94, 0xe9,
		0x34, 0xc9, 0xcf, 0xb9, 0x3d, 0x19, 0x0d, 0xb4, 0x19, 0x68, 0xb3, 0x77, 0x40, 0x9b, 0x9d, 0x30,
		0xe9, 0x33, 0x1d, 0xa9, 0x3b, 0x73, 0xfb, 0x5e, 0x00, 0xf5, 0xc6, 0x65, 0x1a, 0x72, 0xc5, 0x72,
		0xe4, 0x03, 0x3c, 0xf1, 0x57, 0x9b, 0x39, 0xc6, 0x38, 0x94, 0x69, 0x38, 0x7c, 0xa9, 0x72, 0x97,
		0xc3, 0x3a, 0xc8, 0x76, 0xc3, 0xf8, 0x15, 0x1a, 0x74, 0xbb, 0x0f, 0xbe, 0x1d, 0x05, 0xe1, 0x0e,
		0xb8, 0x3a, 0xe7, 0xd3, 0x1e, 0xc5, 0x13, 0x3d, 0x60, 0x01, 0xa6, 0x1b, 0xd3, 0xed, 0x62, 0xba,
		0x3f, 0x94, 0xc3, 0x5d, 0xda, 0x6c, 0x9a, 0x7a, 0x51, 0x2a, 0x35, 0x57, 0x0e, 0x30, 0xdc, 0x6c,
		0xa4, 0x7c, 0xf8, 0xad, 0x06, 0xfc, 0x06, 0xfc, 0x46, 0x01, 0xbf, 0xd9, 0x86, 0x4e, 0x0f, 0xaa,
		0xc7, 0x94, 0x12, 0x5c, 0x55, 0xb5, 0x62, 0x32, 0x11, 0x43, 0x13, 0x98, 0xe4, 0x5f, 0xf0, 0x87,
		0x2a, 0xc5, 0xf9, 0xc1, 0x73, 0xae, 0x94, 0x9b, 0xfd, 0xab, 0xdc, 0x8a, 0xea, 0x52, 0x61, 0x9d,
		0x2b, 0xae, 0x6b, 0x05, 0x2e, 0x4c, 0x91, 0x0b, 0x53, 0xe8, 0x22, 0x14, 0x3b, 0x9f, 0x82, 0x3b,
		0x40, 0x3d, 0x6e, 0x82, 0xad, 0x97, 0x5c, 0xe6, 0xf6, 0xa6, 0x0b, 0x89, 0x9b, 0xa8, 0xe7, 0xae,
		0x83, 0xa1, 0xdc, 0xa4, 0x40, 0xb8, 0x81, 0x8c, 0x4f, 0x63, 0x66, 0x87, 0x29, 0x11, 0x8e, 0xed,
		0xda, 0xdc, 0xb0, 0x8e, 0x53, 0x24, 0x66, 0xe3, 0x16, 0xb0, 0x3d, 0xef, 0x48, 0x43, 0x7e, 0xa0,
		0x37, 0x6e, 0xc9, 0x2d, 0x55, 0x6d, 0x77, 0x73, 0x73, 0x7b, 0x67, 0x73, 0x73, 0x63, 0xa7, 0xb1,
		0xb3, 0xb1, 0xb7, 0xb5, 0x55, 0xdb, 0xae, 0x6d, 0x11, 0x5a, 0xbd, 0x0f, 0xcb, 0x31, 0xca, 0xe5,
		0x42, 0xad, 0x74, 0x6e, 0x1e, 0xc7, 0xad, 0xd9, 0x2a, 0x85, 0xd7, 0x29, 0x2e, 0x02, 0x76, 0x1c,
		0x09, 0xbb, 0x11, 0xb2, 0xcb, 0x45, 0x10, 0x1f, 0x15, 0x21, 0xab, 0x5d, 0x15, 0x31, 0xdf, 0x63,
		0x89, 0xae, 0xc6, 0xdf, 0xb5, 0x43, 0xb0, 0x3e, 0x3f, 0x34, 0xa0, 0x3a, 0xa0, 0x3a, 0xa0, 0x3a,
		0xa0, 0x3a, 0xa0, 0x3a, 0xa0, 0x3a, 0xa0, 0x3a, 0xa0, 0xfa, 0x72, 0x42, 0xf5, 0x45, 0xe1, 0x30,
		0x5f, 0x24, 0x1e, 0x53, 0xbe, 0x5b, 0x04, 0x36, 0x1b, 0x14, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b,
		0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0xeb, 0x31, 0xf6, 0xe2, 0x4a,
		0x45, 0xca, 0x2d, 0xf2, 0x9a, 0x0c, 0x09, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc,
		0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0xf5, 0x18, 0x77, 0xf5, 0xbc, 0xa4, 0x08, 0xec,
		0xf5, 0x68, 0x58, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0,
		0x2f, 0xe0, 0x2f, 0xe0, 0xaf, 0xc7, 0xf8, 0x2b, 0x4c, 0x03, 0x2d, 0x8a, 0xc9, 0xfd, 0xfa, 0x61,
		0x68, 0xe0, 0x30, 0xe0, 0x30, 0xe0, 0x30, 0xe0, 0x30, 0xe0, 0x30, 0xe0, 0x30, 0xe0, 0x30, 0xe0,
		0x30, 0xe0, 0xb0, 0xc7, 0x38, 0x2c, 0xf2, 0x34, 0x77, 0x8c, 0xbf, 0x26, 0x43, 0x02, 0x77, 0x01,
		0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x3d,
		0xc6, 0x5d, 0xce, 0x59, 0x2f, 0x70, 0x5d, 0xc0, 0x5c, 0xc0, 0x5c, 0xc0, 0x5c, 0xc0, 0x5c, 0xc0,
		0x5c, 0xc0, 0x5c, 0xc0, 0x5c, 0xc0, 0x5c, 0x73, 0x98, 0x2b, 0x95, 0x05, 0xed, 0x38, 0x3e, 0x19,
		0x18, 0x18, 0x0c, 0x18, 0x0c, 0x18, 0x0c, 0x18, 0x0c, 0x18, 0x0c, 0x18, 0x0c, 0x18, 0x0c, 0x18,
		0x0c, 0x18, 0xec, 0x29, 0x06, 0xfb, 0x2e, 0xa3, 0x1b, 0x59, 0x8d, 0x55, 0xa4, 0x23, 0xd7, 0x28,
		0xec, 0xc9, 0xd0, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0,
		0x61, 0xc0, 0x61, 0xc0, 0x61, 0xb3, 0x65, 0x09, 0x58, 0xa2, 0xab, 0x5e, 0xc0, 0x99, 0x72, 0x07,
		0xc0, 0x1e, 0x8d, 0x09, 0xe4, 0x05, 0xe4, 0x05, 0xe4, 0xb5, 0x44, 0xc8, 0x4b, 0x8b, 0x90, 0x6b,
		0xe1, 0x7d, 0x4f, 0x96, 0x0e, 0x7b, 0x7d, 0x95, 0x63, 0xbf, 0x50, 0x91, 0x4c, 0x46, 0x09, 0xf7,
		0x22, 0x99, 0xbb, 0x63, 0x20, 0x30, 0x1d, 0x30, 0x1d, 0x30, 0x1d, 0x30, 0xdd, 0xe2, 0x30, 0x1d,
		0x8e, 0x5c, 0x70, 0x05, 0x13, 0x70, 0xe4, 0x82, 0x4b, 0xd8, 0x1f, 0xa5, 0xba, 0xb0, 0x33, 0x17,
		0x9e, 0x19, 0x1b, 0x61, 0x00, 0xc2, 0x00, 0x84, 0x01, 0x4b, 0x14, 0x06, 0x80, 0x80, 0x05, 0x58,
		0x07, 0x58, 0x07, 0x58, 0x07, 0x58, 0x77, 0x71, 0xff, 0xbc, 0x48, 0xcc, 0xfd, 0xa9, 0x0b, 0x4f,
		0x46, 0x05, 0xfa, 0x02, 0xfa, 0x02, 0xfa, 0x02, 0xfa, 0x02, 0xfa, 0x02, 0xfa, 0x02, 0xfa, 0x02,
		0xfa, 0x02, 0xfa, 0x7a, 0x82, 0xbe, 0x5c, 0xf7, 0xfe, 0x7d, 0x34, 0x26, 0x90, 0x17, 0x90, 0x17,
		0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0xd7, 0x13, 0xe4,
		0x55, 0x54, 0xe7, 0xdf, 0x67, 0xc6, 0x06, 0x12, 0x03, 0x12, 0x03, 0x12, 0x03, 0x12, 0x03, 0x12,
		0x03, 0x12, 0x03, 0x12, 0x03, 0x12, 0x03, 0x12, 0x7b, 0x82, 0xc4, 0x5c, 0xf7, 0xfe, 0x7d, 0x34,
		0x26, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90, 0x17, 0x90,
		0x17, 0x90, 0xd7, 0x13, 0xe4, 0xe5, 0x9e, 0xf9, 0x02, 0xdf, 0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4,
		0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x35, 0x8f, 0xba, 0x8a, 0xe9, 0xff,
		0x3b, 0x37, 0x32, 0x50, 0x18, 0x50, 0x18, 0x50, 0x18, 0x50, 0x18, 0x50, 0x18, 0x50, 0x18, 0x50,
		0x18, 0x50, 0xd8, 0xaa, 0xa1, 0xb0, 0x0f, 0x25, 0xca, 0x7c, 0xfe, 0x66, 0x28, 0x39, 0x51, 0xde,
		0x7c, 0xf3, 0x93, 0x28, 0xe6, 0x8a, 0x0d, 0x65, 0x8b, 0x05, 0x79, 0xa1, 0x9e, 0xf3, 0x66, 0x27,
		0x8e, 0x9a, 0x9c, 0xe4, 0x30, 0x50, 0x98, 0xee, 0xb2, 0x34, 0xea, 0xd2, 0x52, 0xa3, 0x9a, 0x52,
		0x46, 0x7a, 0x34, 0xa3, 0xb9, 0x1c, 0x47, 0x25, 0xf1, 0x06, 0x3c, 0x64, 0x31, 0xd3, 0x83, 0xe1,
		0xdb, 0xaf, 0x47, 0x31, 0x97, 0xde, 0x28, 0xe6, 0xa8, 0x8a, 0x21, 0xda, 0xea, 0x31, 0x8f, 0x27,
		0xeb, 0xcf, 0x7d, 0x5c, 0x4f, 0xd2, 0xee, 0xa3, 0xbf, 0x3f, 0xfe, 0x6d, 0x3d, 0xd1, 0x4c, 0xf3,
		0xf5, 0x09, 0x60, 0xcb, 0x13, 0x4a, 0x55, 0x12, 0xad, 0x52, 0x4f, 0xcb, 0x09, 0x04, 0x3c, 0x9b,
		0x3d, 0x5d, 0x6b, 0x76, 0xe7, 0xab, 0xe7, 0x3e, 0x5e, 0x75, 0x1e, 0x3f, 0xdc, 0x93, 0xdf, 0xae,
		0x3a, 0xc3, 0x87, 0xbb, 0xda, 0x9f, 0x3e, 0xdc, 0x87, 0x72, 0xd6, 0xda, 0x42, 0x19, 0x2b, 0x3e,
		0x4f, 0x3c, 0x25, 0xe2, 0x5c, 0x8b, 0x3c, 0x83, 0xcf, 0x8f, 0x07, 0xb3, 0x94, 0xb9, 0x7c, 0x80,
		0x22, 0x77, 0x2c, 0xeb, 0x22, 0x86, 0x75, 0x16, 0xbb, 0xba, 0x8a, 0x59, 0x9d, 0xc7, 0xaa, 0xce,
		0x63, 0x54, 0x97, 0xb1, 0x69, 0xb9, 0xa8, 0x23, 0x77, 0x0c, 0x3a, 0x93, 0x96, 0x44, 0x2b, 0x21,
		0xfb, 0x79, 0xc4, 0x65, 0xa2, 0x3b, 0xb5, 0xdd, 0x25, 0xb6, 0x37, 0x5c, 0xb2, 0x6e, 0xc0, 0xfd,
		0xfc, 0xb6, 0x66, 0x3a, 0x90, 0xe5, 0xba, 0x1d, 0xf0, 0x1e, 0x4b, 0x83, 0x91, 0xbc, 0x0d, 0xc5,
		0x17, 0xe6, 0x0a, 0xe6, 0x0a, 0xe6, 0xca, 0x44, 0x5a, 0xba, 0x51, 0x14, 0x70, 0x26, 0x5d, 0xd8,
		0xab, 0xda, 0x12, 0xdb, 0x2b, 0xd1, 0x13, 0xd2, 0xe7, 0xb7, 0xf9, 0xed, 0xd5, 0x74, 0x20, 0x18,
		0x1a, 0x18, 0x1a, 0x18, 0x1a, 0x03, 0x69, 0x49, 0x85, 0xd4, 0x8d, 0xba, 0x03, 0x3b, 0xb3, 0x93,
		0x63, 0x08, 0x37, 0x04, 0xbc, 0x83, 0x9d, 0x0a, 0x97, 0x84, 0xbb, 0x63, 0xf6, 0xd6, 0x35, 0xc1,
		0x5e, 0x04, 0x35, 0xeb, 0x80, 0x50, 0x77, 0x4a, 0xa4, 0x17, 0xb5, 0x04, 0x9b, 0xf5, 0xbd, 0xcd,
		0xbd, 0xed, 0x9d, 0xfa, 0xde, 0xd6, 0x12, 0xaf, 0xc5, 0x82, 0x68, 0xe9, 0xcb, 0x77, 0x4e, 0x4b,
		0xbb, 0xef, 0xc9, 0x0d, 0x7a, 0x3a, 0xc3, 0xb4, 0x63, 0x37, 0x00, 0xd3, 0xed, 0x78, 0xba, 0x3f,
		0x94, 0x63, 0xfe, 0xac, 0xe2, 0x26, 0x47, 0x51, 0x53, 0x9e, 0x98, 0xe9, 0x11, 0xc7, 0xb3, 0x81,
		0xb8, 0x0b, 0x71, 0x17, 0xe2, 0x2e, 0xc4, 0x5d, 0x88, 0xbb, 0x10, 0x77, 0x21, 0xee, 0xa2, 0x14,
		0x77, 0x95, 0x02, 0x57, 0xc6, 0x67, 0x52, 0x0e, 0x26, 0xd6, 0x26, 0x27, 0x68, 0x79, 0x3c, 0x18,
		0x60, 0x07, 0x60, 0x07, 0x60, 0x87, 0x81, 0xb4, 0xb8, 0x39, 0x81, 0xd2, 0x41, 0xf2, 0xb5, 0xeb,
		0x13, 0x27, 0x81, 0x65, 0x80, 0x65, 0x48, 0x61, 0x99, 0xe2, 0x92, 0xaf, 0x81, 0x6a, 0xc0, 0x26,
		0x53, 0xe4, 0xdb, 0x40, 0x6f, 0x62, 0xba, 0xc1, 0x26, 0xe7, 0x34, 0x7f, 0x56, 0xe1, 0x59, 0xd4,
		0x17, 0x1e, 0x0b, 0x1c, 0x84, 0x66, 0x93, 0x81, 0x10, 0x96, 0x21, 0x2c, 0x43, 0x58, 0x66, 0x20,
		0x2d, 0x8b, 0x4f, 0xf7, 0x03, 0x62, 0x82, 0x0b, 0x87, 0x0b, 0xc7, 0x74, 0x03, 0x31, 0x65, 0x79,
		0xc3, 0x49, 0x39, 0x5b, 0x4e, 0xb8, 0x34, 0x1a, 0x05, 0x58, 0x09, 0x58, 0x09, 0x58, 0xc9, 0x40,
		0x5a, 0x16, 0x5e, 0xc9, 0x05, 0xa8, 0x04, 0xdf, 0x0d, 0xdf, 0x4d, 0xd6, 0x77, 0x0f, 0xa7, 0xbf,
		0x9a, 0x68, 0xa6, 0xd3, 0x24, 0xbf, 0x0b, 0x7f, 0x3c, 0x18, 0x3c, 0x39, 0x3c, 0xf9, 0x3b, 0xf0,
		0xe4, 0x27, 0x4c, 0xfa, 0x4c, 0x47, 0xea, 0x6e, 0xe8, 0x42, 0x17, 0x8e, 0x06, 0xb8, 0x4c, 0xc3,
		0x89, 0x39, 0x75, 0x01, 0x09, 0x36, 0x73, 0x8c, 0x71, 0x28, 0xd3, 0x70, 0xf8, 0x52, 0xf7, 0x80,
		0x15, 0x80, 0x15, 0x80, 0x15, 0x98, 0x6e, 0xa0, 0xb8, 0x22, 0xee, 0x63, 0x28, 0x04, 0x79, 0xfb,
		0x2c, 0x15, 0xd8, 0x5f, 0xc9, 0x42, 0x6e, 0x0a, 0x6b, 0xa7, 0x64, 0x26, 0x25, 0xd9, 0x57, 0x2c,
		0xdb, 0x37, 0x33, 0xae, 0xe9, 0x50, 0x0d, 0x4d, 0xeb, 0x56, 0x2a, 0xc7, 0x22, 0xd1, 0x4d, 0xad,
		0x95, 0xd1, 0xea, 0x57, 0x4e, 0x84, 0x3c, 0x1c, 0xba, 0x31, 0x39, 0x4e, 0xa0, 0xf9, 0x68, 0x70,
		0x25, 0xbb, 0x7d, 0x74, 0x65, 0xbe, 0x34, 0x9f, 0xca, 0x99, 0xf2, 0xb9, 0xe2, 0xfe, 0xe7, 0xe1,
		0x6b, 0xcb, 0x34, 0x08, 0x9c, 0xce, 0xa6, 0xa5, 0x66, 0x14, 0xa2, 0x11, 0x06, 0xba, 0x50, 0x80,
		0x0e, 0x64, 0x93, 0xfe, 0xb7, 0x65, 0xf9, 0xf5, 0x6f, 0xbc, 0xb1, 0x2e, 0xa6, 0xeb, 0xe1, 0x6a,
		0x1d, 0x32, 0x4c, 0xbd, 0x9b, 0x29, 0x7f, 0x7d, 0x96, 0x5f, 0x9e, 0xbb, 0xe7, 0xff, 0xe5, 0x85,
		0xd9, 0x9c, 0xda, 0x88, 0x57, 0xc8, 0xf5, 0x6c, 0x26, 0x21, 0xbb, 0x09, 0xc8, 0xa5, 0xf2, 0xd9,
		0x54, 0xfc, 0xa5, 0x97, 0xcd, 0x28, 0x32, 0xf6, 0xa2, 0xf2, 0x8a, 0x70, 0xd8, 0x0a, 0xc5, 0xf3,
		0x62, 0x30, 0xbf, 0xc8, 0x4f, 0xff, 0xf2, 0xc3, 0x0c, 0xbc, 0xf5, 0xe6, 0xa6, 0x6f, 0xfc, 0xcc,
		0x7b, 0x9a, 0xbd, 0xdf, 0xd3, 0xb7, 0x7a, 0x78, 0xf6, 0x47, 0xcf, 0x5d, 0x09, 0x79, 0x92, 0xb0,
		0x3e, 0x9f, 0xe7, 0x9d, 0x66, 0xe1, 0xec, 0xec, 0x1b, 0x3f, 0xbc, 0xed, 0x34, 0x3e, 0xfd, 0xe1,
		0xcf, 0x2f, 0x91, 0x3f, 0xaf, 0x91, 0x3a, 0x8f, 0xc9, 0x9a, 0x17, 0x6e, 0x97, 0x85, 0x8a, 0xc9,
		0x4c, 0xb1, 0x64, 0xa6, 0x4e, 0x7e, 0xa4, 0x44, 0x66, 0x0f, 0x67, 0x28, 0x19, 0x07, 0xe2, 0x79,
		0xc5, 0xae, 0x78, 0xd3, 0xd9, 0x7a, 0xe1, 0x8d, 0x1e, 0xfa, 0x94, 0x8f, 0xbe, 0xf7, 0x92, 0x7d,
		0x79, 0x76, 0x29, 0x32, 0xf3, 0x71, 0x59, 0xf8, 0xb6, 0x8c, 0x4b, 0x64, 0xca, 0x9a, 0x19, 0xb3,
		0x62, 0xc6, 0xac, 0x57, 0xf6, 0x25, 0xb4, 0xb3, 0xed, 0x2f, 0x2d, 0xed, 0x83, 0xca, 0xf2, 0x6b,
		0xae, 0x84, 0xbe, 0x7b, 0x7b, 0x2e, 0x66, 0xdb, 0x49, 0xd3, 0x2b, 0xde, 0x78, 0xb3, 0x6c, 0x34,
		0x6d, 0x66, 0x3a, 0xd6, 0x84, 0x76, 0x35, 0x14, 0x07, 0x5b, 0x32, 0xd5, 0x9a, 0x34, 0xb5, 0x26,
		0x47, 0xcd, 0xc5, 0xc5, 0x0d, 0xd0, 0xca, 0x4c, 0x3f, 0x3e, 0x48, 0xc9, 0x5d, 0x12, 0x44, 0xfd,
		0x6a, 0x46, 0x61, 0x31, 0xa5, 0x14, 0x33, 0x52, 0x87, 0xae, 0x10, 0x52, 0x7e, 0xd0, 0x30, 0x5d,
		0xa8, 0xf5, 0xd9, 0x87, 0x57, 0x6d, 0xe6, 0xab, 0xde, 0xf4, 0x64, 0x32, 0xc4, 0xd5, 0xec, 0xc3,
		0x44, 0x87, 0xb2, 0xc2, 0x84, 0x67, 0x7c, 0x97, 0xcf, 0xbb, 0x69, 0xbf, 0xca, 0xa5, 0x56, 0x82,
		0x27, 0x6f, 0x1b, 0xfc, 0xa7, 0x5f, 0x87, 0xdd, 0xa7, 0x67, 0xf7, 0xc7, 0x2b, 0x98, 0x70, 0x75,
		0x2d, 0xb2, 0x4c, 0xc8, 0xd3, 0x85, 0x9f, 0x5e, 0x96, 0xcd, 0x03, 0xd4, 0xe0, 0x01, 0xe8, 0x7b,
		0x80, 0xb7, 0x04, 0x2a, 0x2b, 0x66, 0xb4, 0xc3, 0x90, 0x96, 0xa2, 0x65, 0x2c, 0x62, 0x36, 0xa2,
		0x96, 0x53, 0xe4, 0x6c, 0x45, 0x2f, 0xb7, 0x08, 0xe6, 0x16, 0xc5, 0xfc, 0x22, 0x59, 0x0c, 0xe7,
		0x99, 0x55, 0x54, 0x67, 0x17, 0xd8, 0x36, 0x81, 0xce, 0xd9, 0xfc, 0xf9, 0x71, 0x43, 0xa0, 0xd1,
		0x1e, 0x86, 0xe9, 0xf5, 0x76, 0x89, 0x10, 0xd6, 0x09, 0x10, 0x79, 0x12, 0x1f, 0x72, 0x2a, 0x47,
		0x5e, 0x25, 0x71, 0xa6, 0x2c, 0xce, 0x94, 0xc6, 0x9d, 0xf2, 0x94, 0xb3, 0x29, 0x64, 0x9d, 0x80,
		0xe0, 0xa0, 0x64, 0xc3, 0xb2, 0x54, 0xc3, 0x60, 0xcf, 0xc5, 0x84, 0x4b, 0xcf, 0x08, 0x99, 0x5e,
		0x89, 0x9f, 0xb3, 0x80, 0x27, 0x28, 0x3b, 0x94, 0x9d, 0xb0, 0xb2, 0x0b, 0x9f, 0x4b, 0x2d, 0xf4,
		0x9d, 0xe2, 0xbd, 0x3c, 0x0a, 0x6f, 0x51, 0xe0, 0x5f, 0x69, 0x4d, 0x6e, 0xfd, 0x99, 0x25, 0x0e,
		0x4a, 0x0e, 0x0e, 0x0e, 0x3f, 0x7f, 0xfd, 0x72, 0xd5, 0x39, 0x3c, 0xff, 0xd6, 0xda, 0x3f, 0x2c,
		0x7c, 0x9d, 0x16, 0x84, 0x98, 0xdc, 0xef, 0x6b, 0xce, 0xf3, 0x1d, 0x4f, 0x28, 0x83, 0xf5, 0x27,
		0x71, 0xe4, 0xba, 0x11, 0xf6, 0x37, 0xe4, 0x46, 0x0e, 0x86, 0x77, 0x3a, 0x1c, 0xdf, 0x76, 0xfc,
		0x4b, 0x67, 0x7c, 0xd7, 0x57, 0x59, 0x13, 0xf3, 0xf9, 0xbe, 0xcf, 0xb2, 0x29, 0x68, 0xe8, 0x3b,
		0x2c, 0x7d, 0x86, 0xa1, 0xaf, 0x40, 0x74, 0xf4, 0x9e, 0xa2, 0x23, 0x63, 0xdb, 0xfe, 0x50, 0xac,
		0xce, 0x59, 0xcf, 0xcc, 0x9e, 0xcf, 0xec, 0xb8, 0x41, 0xcf, 0xc5, 0x4a, 0x7b, 0x62, 0x4e, 0x7e,
		0xf9, 0x65, 0x62, 0x17, 0xd6, 0xa7, 0xd2, 0x5f, 0xa6, 0xa6, 0x8e, 0x52, 0x7c, 0xcc, 0xf5, 0xd4,
		0x20, 0x4b, 0xc9, 0x9a, 0xc3, 0xa8, 0x43, 0x4b, 0xc1, 0x61, 0x80, 0xc3, 0x40, 0x58, 0x83, 0xb0,
		0x06, 0x1c, 0x06, 0x38, 0x0c, 0x28, 0x3b, 0x94, 0x1d, 0x1c, 0x06, 0x38, 0x8c, 0x05, 0x73, 0x18,
		0xa6, 0x05, 0x0a, 0x4e, 0x28, 0x0c, 0x83, 0x4a, 0x84, 0xa2, 0x73, 0xb1, 0x27, 0x59, 0xc4, 0x19,
		0x53, 0x03, 0x8c, 0x6a, 0x0c, 0xcc, 0x6b, 0x0b, 0x9c, 0xd4, 0x14, 0x98, 0xd5, 0x12, 0x94, 0x97,
		0xab, 0x6e, 0x24, 0x97, 0x79, 0x72, 0xd5, 0x0d, 0x24, 0xb1, 0x42, 0x36, 0x0f, 0x2b, 0x4b, 0x2a,
		0x53, 0x8e, 0x59, 0xca, 0x93, 0x94, 0xf5, 0x3a, 0x09, 0x91, 0x89, 0x74, 0xc8, 0x9c, 0x84, 0x55,
		0x47, 0x12, 0x56, 0xf9, 0x49, 0x58, 0x93, 0x1b, 0x66, 0x4f, 0xbf, 0x9a, 0x5e, 0xe0, 0x38, 0xf1,
		0xaa, 0x8e, 0xc4, 0xab, 0x02, 0x71, 0x6f, 0x49, 0x89, 0x57, 0x2c, 0x8e, 0xab, 0x46, 0x6d, 0xb6,
		0x66, 0x4b, 0x35, 0xbb, 0x12, 0xdb, 0x0b, 0x20, 0x2e, 0x17, 0xb6, 0xbd, 0x60, 0xdc, 0xa6, 0xca,
		0xb0, 0x2d, 0x95, 0x9b, 0x8d, 0x81, 0x30, 0xb1, 0xc8, 0x6d, 0x1c, 0x5e, 0x04, 0xdd, 0x82, 0x6e,
		0x41, 0xb7, 0xde, 0xd2, 0x2d, 0xe1, 0x5b, 0x69, 0x97, 0xf0, 0xa1, 0x5f, 0xd0, 0x2f, 0xe8, 0xd7,
		0xeb, 0xf7, 0x8c, 0x95, 0x88, 0x32, 0xd5, 0xfa, 0xcd, 0xbd, 0xdf, 0xec, 0x4a, 0x68, 0x19, 0xb4,
		0x6c, 0x61, 0x5a, 0x96, 0x0a, 0xa9, 0x77, 0x2d, 0x94, 0xcc, 0xa4, 0x7f, 0x88, 0xdd, 0xa9, 0x58,
		0x16, 0xbb, 0x0c, 0x79, 0x4e, 0xbd, 0xca, 0xdb, 0x02, 0x31, 0xe7, 0xa9, 0x56, 0x2e, 0xce, 0x4b,
		0xb2, 0x69, 0x44, 0x99, 0xe7, 0x94, 0x2a, 0x57, 0x53, 0x56, 0xdf, 0xda, 0x5a, 0xe0, 0xa4, 0x15,
		0xb4, 0x13, 0x73, 0x59, 0xaa, 0x13, 0x8a, 0x3c, 0x1b, 0x94, 0x37, 0xb9, 0x0e, 0x0e, 0x08, 0x0e,
		0xe8, 0x3d, 0xc3, 0xbc, 0x5c, 0x5c, 0x62, 0xe6, 0xd6, 0x97, 0xe6, 0x24, 0xec, 0x5c, 0x2b, 0x4b,
		0xa6, 0xa3, 0x50, 0x78, 0x76, 0xac, 0xac, 0x41, 0x47, 0x3f, 0xc3, 0xce, 0x7d, 0xaf, 0xcf, 0xdf,
		0xe5, 0x02, 0xf7, 0xf0, 0x46, 0xbb, 0x38, 0xeb, 0xd9, 0x08, 0xfe, 0x35, 0xb3, 0xfd, 0xa8, 0xd1,
		0x2e, 0xf1, 0xf4, 0x57, 0xeb, 0x9d, 0xba, 0x8f, 0x68, 0x22, 0x82, 0x9d, 0x8c, 0x3c, 0xd6, 0x07,
		0x4d, 0x44, 0x9c, 0x6f, 0x5e, 0xbf, 0x95, 0x74, 0x62, 0x6a, 0x24, 0x16, 0xdd, 0x69, 0x6c, 0xee,
		0x0d, 0x4d, 0xba, 0x8c, 0xcd, 0xbd, 0x53, 0x96, 0x0e, 0x63, 0x09, 0x0b, 0xe3, 0x80, 0xbf, 0xdc,
		0x5f, 0x6c, 0xf2, 0xef, 0x25, 0x74, 0x17, 0x93, 0x5c, 0x2f, 0x5f, 0x57, 0xb1, 0xe1, 0x43, 0x39,
		0xec, 0x26, 0xa6, 0x99, 0x90, 0x5c, 0x55, 0xaf, 0x5f, 0x39, 0x3b, 0xf1, 0x71, 0x43, 0x88, 0x47,
		0x5f, 0x5f, 0x82, 0x1e, 0x33, 0xcf, 0x2f, 0x90, 0xa9, 0xdd, 0x2f, 0x39, 0xad, 0xe1, 0xd9, 0x05,
		0xb4, 0x33, 0x60, 0x6f, 0xa6, 0x33, 0x70, 0x99, 0x86, 0xaf, 0xae, 0xed, 0xdc, 0x94, 0xce, 0xae,
		0x20, 0x00, 0x03, 0x5e, 0x5f, 0x7e, 0xa2, 0xee, 0xff, 0x55, 0xf1, 0x58, 0x94, 0xdb, 0x37, 0x3b,
		0xa2, 0xa0, 0x5c, 0x97, 0xff, 0x8a, 0x01, 0x08, 0x38, 0xeb, 0x55, 0x03, 0x91, 0x68, 0x33, 0x1d,
		0x78, 0x7a, 0x19, 0x14, 0x01, 0x8a, 0x60, 0xce, 0x37, 0x64, 0xe4, 0x19, 0xee, 0xdf, 0x5f, 0x56,
		0xee, 0x62, 0xc1, 0xfb, 0x18, 0x3d, 0x4e, 0x7f, 0x64, 0x41, 0x34, 0xcf, 0x20, 0xdc, 0xce, 0xe8,
		0xea, 0xab, 0xc9, 0x8f, 0xfd, 0xe9, 0x20, 0xdf, 0x58, 0x90, 0x27, 0xb9, 0x94, 0x87, 0xb1, 0xbe,
		0xcb, 0x86, 0xc4, 0x1e, 0xbe, 0xfa, 0x3a, 0x0a, 0xdb, 0x00, 0x0a, 0x2b, 0x1e, 0x85, 0xbd, 0x69,
		0x45, 0x9e, 0x2e, 0xdb, 0x6b, 0x73, 0x35, 0x35, 0x1a, 0x8d, 0x1c, 0x62, 0x14, 0xa6, 0x81, 0x16,
		0x71, 0xc0, 0xab, 0xdf, 0xf9, 0xdd, 0xc8, 0x8b, 0xbd, 0x2d, 0x4e, 0xf3, 0x97, 0x00, 0xdc, 0x2f,
		0x3f, 0xb8, 0x17, 0x52, 0xf3, 0x3e, 0x57, 0xd9, 0x71, 0xcd, 0xf4, 0x02, 0x20, 0x1a, 0x20, 0x9a,
		0x27, 0x5b, 0xf8, 0x8d, 0xba, 0x01, 0xa2, 0xc9, 0xd0, 0x39, 0xc2, 0x70, 0xcf, 0xde, 0xec, 0x4c,
		0x13, 0x8b, 0xfd, 0x36, 0xbb, 0x22, 0x57, 0xcb, 0x3d, 0xf9, 0x3c, 0xdb, 0xca, 0xf7, 0x66, 0x87,
		0xb4, 0x94, 0x3e, 0x15, 0x9b, 0xf5, 0xbd, 0xcd, 0xbd, 0xed, 0x9d, 0xfa, 0xde, 0x56, 0x89, 0x73,
		0xe2, 0x68, 0xa3, 0xee, 0xb2, 0x80, 0x00, 0x33, 0xfa, 0x9e, 0xdd, 0xfa, 0x46, 0xdf, 0x61, 0x78,
		0x61, 0x78, 0x6d, 0x3a, 0x17, 0x64, 0xec, 0x54, 0x60, 0xb9, 0x53, 0xa8, 0x0d, 0x10, 0xc4, 0xf0,
		0xcb, 0x10, 0x62, 0x08, 0x71, 0x71, 0x7c, 0x88, 0xdb, 0x13, 0x94, 0x12, 0xad, 0xd6, 0x5e, 0x47,
		0xbd, 0x38, 0x48, 0xe9, 0x29, 0x23, 0x92, 0x35, 0x14, 0x7c, 0x93, 0x15, 0x39, 0x99, 0x0c, 0xf4,
		0x1b, 0xbf, 0x1b, 0x4e, 0x71, 0xae, 0xaa, 0x5b, 0x21, 0xfb, 0x46, 0xf1, 0xec, 0x8f, 0x17, 0x20,
		0x9a, 0x5d, 0xfe, 0x68, 0xd6, 0x8b, 0x52, 0xa9, 0xd5, 0x5d, 0xd5, 0x8b, 0x7c, 0x83, 0xf2, 0xdb,
		0x27, 0x57, 0xc1, 0x33, 0xc1, 0x33, 0x2d, 0xc2, 0x33, 0xbd, 0xa2, 0xd7, 0xbe, 0x60, 0x81, 0xa1,
		0x48, 0x3f, 0x5c, 0x02, 0x79, 0x86, 0x3c, 0x83, 0xa7, 0xc9, 0x4c, 0x4e, 0xd4, 0xc0, 0xd3, 0xcc,
		0x78, 0x9a, 0xbd, 0x3a, 0x08, 0x9a, 0x51, 0x06, 0x80, 0x48, 0xf4, 0x10, 0x07, 0x1a, 0x6c, 0xfe,
		0x4f, 0xaf, 0x80, 0xf5, 0x85, 0xf5, 0xa5, 0x12, 0xe7, 0xbe, 0x21, 0xb4, 0x08, 0x72, 0x9f, 0x06,
		0xb9, 0xd9, 0xe2, 0xc3, 0x37, 0x43, 0xdc, 0xce, 0x68, 0x18, 0x17, 0x01, 0xae, 0xce, 0x98, 0x81,
		0x39, 0xfd, 0x22, 0x76, 0xfd, 0x09, 0xed, 0xfa, 0xbf, 0x69, 0x3b, 0xde, 0xb0, 0x19, 0x05, 0x27,
		0x7b, 0x3f, 0x51, 0x8d, 0xb7, 0xb3, 0xbb, 0x9f, 0xa8, 0x40, 0xa6, 0x7c, 0xee, 0xbb, 0x44, 0xf3,
		0xf0, 0x95, 0x7c, 0xee, 0xf1, 0xbf, 0x97, 0x73, 0x5a, 0x74, 0x72, 0xb7, 0x9c, 0x07, 0x45, 0x0f,
		0x9f, 0xcb, 0x55, 0x56, 0x37, 0x63, 0xec, 0x6d, 0x4b, 0x32, 0xfc, 0xd2, 0x72, 0x9c, 0x12, 0xfa,
		0xf2, 0x93, 0xac, 0x2d, 0x75, 0x6f, 0xba, 0xe1, 0x73, 0x97, 0x45, 0x8e, 0x31, 0x6f, 0x44, 0x74,
		0x0d, 0xcd, 0x48, 0x66, 0x20, 0xfb, 0xe8, 0x1a, 0x1a, 0xa7, 0x82, 0xbe, 0x2e, 0x08, 0x44, 0xd1,
		0xec, 0x5b, 0x82, 0xe2, 0x06, 0xd0, 0xe2, 0x2c, 0x50, 0xf7, 0x82, 0x66, 0x2b, 0x70, 0xb9, 0x05,
		0x2f, 0xb7, 0x00, 0xe6, 0x12, 0x44, 0xc3, 0xa8, 0xbe, 0xa8, 0xd3, 0x33, 0x1e, 0xac, 0x57, 0x35,
		0xe4, 0x7a, 0x10, 0xe5, 0x38, 0x47, 0x63, 0x7e, 0xa8, 0xf7, 0xd1, 0x24, 0xdf, 0x4c, 0xcc, 0xf3,
		0x8a, 0xbb, 0x33, 0xb1, 0x77, 0x26, 0xfe, 0x4e, 0xd4, 0xc0, 0x4c, 0x1d, 0x2c, 0xf8, 0xc1, 0x35,
		0x37, 0xad, 0xf1, 0x53, 0x99, 0xad, 0x36, 0xe7, 0x45, 0x5b, 0xbd, 0x67, 0x71, 0xed, 0xe4, 0xb1,
		0xff, 0xb4, 0x5a, 0x16, 0x3b, 0xf1, 0x5a, 0x73, 0x77, 0x1e, 0xc0, 0xdc, 0x14, 0x6c, 0xe5, 0x18,
		0xc3, 0xc9, 0xf9, 0x00, 0x73, 0x2f, 0xd8, 0x6c, 0x36, 0xaf, 0x4e, 0x0e, 0x2f, 0x7e, 0x3d, 0x3b,
		0xb8, 0xba, 0xf8, 0x4f, 0xfb, 0x30, 0xc7, 0x4b, 0x3e, 0xd0, 0xc3, 0x89, 0xf5, 0x8a, 0xb9, 0x59,
		0xbd, 0x67, 0x5f, 0xf4, 0xa2, 0xb9, 0xdf, 0xdc, 0xef, 0x5c, 0x35, 0x8f, 0x8f, 0x2b, 0xb9, 0x07,
		0xbe, 0xff, 0xb8, 0x6c, 0x6f, 0x77, 0xde, 0x3c, 0x68, 0x7d, 0x5d, 0xd9, 0xb7, 0x3b, 0x3e, 0xdb,
		0x6f, 0xba, 0x78, 0xb1, 0x5c, 0x23, 0x5c, 0x7e, 0x28, 0xf7, 0xbe, 0x96, 0xcb, 0xe0, 0xc0, 0xe8,
		0x19, 0xb7, 0xbc, 0xb1, 0xa4, 0xa8, 0xdd, 0xcd, 0xd7, 0x65, 0xa1, 0xbe, 0xd3, 0xa8, 0x44, 0xce,
		0x9e, 0xf3, 0x2e, 0x84, 0x0b, 0xcf, 0xc4, 0x91, 0xe7, 0x3c, 0x6b, 0x26, 0x4d, 0xde, 0x2c, 0xf9,
		0x28, 0x0a, 0x0b, 0xfe, 0x88, 0x07, 0xa3, 0xf1, 0x5b, 0x55, 0xbb, 0x77, 0x79, 0xc4, 0xd7, 0x15,
		0x2e, 0x9c, 0xc3, 0x86, 0xa3, 0x99, 0x2a, 0x49, 0x27, 0xde, 0xeb, 0x11, 0x3e, 0x63, 0xb6, 0x77,
		0x7d, 0xf2, 0x83, 0x31, 0xb6, 0xfe, 0x10, 0x9e, 0x39, 0x3c, 0x75, 0xb8, 0x33, 0x1a, 0xff, 0x6a,
		0xf2, 0xa3, 0xc9, 0xd8, 0x55, 0x73, 0x76, 0x9b, 0x05, 0x1c, 0x33, 0xcc, 0xaf, 0x27, 0xe6, 0xc1,
		0x90, 0x76, 0x99, 0x5c, 0x07, 0xda, 0x05, 0xb4, 0x4b, 0x39, 0xb4, 0xcb, 0x48, 0xe0, 0x72, 0x1c,
		0x59, 0x3a, 0xba, 0xdc, 0x8e, 0x5e, 0xa9, 0x81, 0x5e, 0x01, 0xbd, 0x52, 0x0c, 0x44, 0x34, 0x55,
		0x83, 0xd9, 0x85, 0x86, 0x74, 0xf9, 0x8b, 0xe2, 0x62, 0xec, 0xd8, 0x1c, 0x28, 0x48, 0x6e, 0x45,
		0x71, 0xa1, 0x30, 0xee, 0x14, 0xc7, 0x25, 0x26, 0x75, 0xaa, 0x48, 0x85, 0xe0, 0x52, 0x67, 0x8a,
		0xb5, 0x90, 0x28, 0xd7, 0x5a, 0xe1, 0x9e, 0xfa, 0xa1, 0xaa, 0xb6, 0xa5, 0x45, 0x5f, 0x76, 0x4e,
		0xe3, 0x31, 0x73, 0x2e, 0x4c, 0xbe, 0xce, 0xd5, 0xce, 0x14, 0xd3, 0xa5, 0x82, 0xba, 0x57, 0x54,
		0xd7, 0x0a, 0x5b, 0x98, 0xe2, 0x16, 0xa6, 0xc0, 0x85, 0x28, 0xb2, 0x1b, 0xba, 0x2c, 0x27, 0x8b,
		0x68, 0xbf, 0x61, 0xf1, 0xa2, 0xbc, 0xb9, 0xe1, 0xf2, 0xe7, 0x7c, 0xe6, 0x96, 0x83, 0xb1, 0x9c,
		0x72, 0xfb, 0x73, 0x2f, 0xde, 0x6c, 0x36, 0xaf, 0x9a, 0xfb, 0xfb, 0x67, 0x5f, 0x4f, 0x2f, 0x5a,
		0xa7, 0x5f, 0xae, 0x0e, 0xbf, 0x1d, 0x9e, 0x5e, 0xb8, 0x60, 0xfb, 0x67, 0x37, 0x72, 0xc8, 0xfa,
		0xe7, 0xa7, 0x31, 0xcd, 0xa7, 0xe2, 0xf8, 0xec, 0x4b, 0xeb, 0xb4, 0xe2, 0xec, 0x86, 0xf7, 0x1f,
		0x49, 0xce, 0xc2, 0xfe, 0xd9, 0xc9, 0x49, 0xf3, 0xf4, 0xc0, 0xe1, 0x3c, 0x38, 0x19, 0xe9, 0x72,
		0xd1, 0x76, 0xec, 0xc3, 0x02, 0xe4, 0xa0, 0xa2, 0xb8, 0x37, 0x76, 0x40, 0x8e, 0x90, 0xc9, 0x64,
		0x3c, 0xa0, 0x12, 0xa0, 0x12, 0xa0, 0x92, 0xa5, 0x42, 0x25, 0x66, 0x8d, 0x4f, 0x33, 0xa3, 0x92,
		0x4d, 0x07, 0x63, 0x65, 0x6b, 0x9c, 0x5a, 0xa0, 0x01, 0x2d, 0x35, 0xa2, 0xb4, 0xdc, 0x89, 0x98,
		0x1b, 0xc7, 0x72, 0x67, 0x62, 0x4c, 0xc4, 0x8f, 0x7f, 0xac, 0xe7, 0x62, 0x73, 0xd6, 0xac, 0xb7,
		0x2d, 0x0e, 0x47, 0xcf, 0x30, 0xfe, 0x61, 0xb4, 0x87, 0x91, 0x7f, 0xe5, 0x6c, 0xce, 0x86, 0x72,
		0x10, 0xc2, 0xbb, 0x0b, 0xdd, 0xf3, 0x1e, 0x36, 0x05, 0x0e, 0x0d, 0x1c, 0x5a, 0xc9, 0x16, 0x2f,
		0xb7, 0x33, 0x7b, 0xd2, 0xcf, 0xda, 0x51, 0x8a, 0xdc, 0x4e, 0x8e, 0x31, 0xda, 0x13, 0xa3, 0xfb,
		0xcb, 0x2f, 0x13, 0x0b, 0xba, 0xfe, 0x48, 0xad, 0x97, 0xd8, 0x90, 0x8d, 0x8f, 0xf4, 0xc8, 0x6d,
		0xc3, 0xde, 0x3a, 0x19, 0x24, 0xd3, 0xfc, 0xe7, 0x35, 0x5f, 0x75, 0x98, 0x2f, 0x98, 0xaf, 0x52,
		0xcc, 0x17, 0xb6, 0x00, 0x10, 0x6c, 0x23, 0xd8, 0x46, 0xb0, 0x6d, 0x20, 0x6f, 0xd8, 0x02, 0xc0,
		0x16, 0x00, 0xb6, 0x00, 0xb0, 0x05, 0x50, 0x1a, 0x83, 0x85, 0x2d, 0x00, 0xa0, 0x12, 0xa0, 0x12,
		0xa0, 0x92, 0xd7, 0x63, 0x06, 0x6c, 0x01, 0x2c, 0x47, 0x44, 0xb9, 0x4c, 0x5b, 0x00, 0x79, 0xc8,
		0x9c, 0x35, 0x37, 0x3b, 0x00, 0xaf, 0x1c, 0x0f, 0x5b, 0x00, 0x6f, 0x56, 0x68, 0x7e, 0xee, 0xa4,
		0x8b, 0x99, 0x75, 0x74, 0xbe, 0xfa, 0x35, 0x60, 0x6f, 0x1e, 0xab, 0x96, 0x77, 0x09, 0x72, 0x2a,
		0x97, 0x0b, 0xa5, 0xaa, 0x58, 0x71, 0xb3, 0x39, 0xd5, 0xa8, 0x82, 0x3a, 0xac, 0x97, 0x56, 0xa5,
		0xf0, 0x3a, 0xac, 0xf1, 0x3a, 0x94, 0x59, 0x87, 0x65, 0x46, 0xe5, 0x5b, 0x51, 0xf7, 0xd6, 0x55,
		0x58, 0x75, 0x54, 0x61, 0xb9, 0xc4, 0xbc, 0x68, 0x7e, 0x83, 0xe6, 0x37, 0xa8, 0xce, 0x42, 0xf3,
		0x9b, 0x4c, 0xb6, 0x1a, 0xcd, 0x6f, 0xd0, 0xfc, 0xa6, 0x74, 0xd6, 0x17, 0xcd, 0x6f, 0x56, 0xe0,
		0xed, 0xd0, 0xfc, 0xa6, 0x54, 0xa3, 0x87, 0xe6, 0x37, 0xef, 0x8c, 0xf8, 0x40, 0xf3, 0x9b, 0x62,
		0x70, 0xe1, 0x1a, 0x9a, 0xdf, 0x2c, 0x19, 0xe9, 0x62, 0x4a, 0x29, 0xdb, 0x71, 0x2e, 0x06, 0xac,
		0xf1, 0x7d, 0xc1, 0x4d, 0x8b, 0x0d, 0xe7, 0xd7, 0x72, 0x5e, 0x2b, 0x99, 0x68, 0x21, 0xf3, 0x99,
		0xac, 0x14, 0x70, 0x5a, 0x0d, 0x4b, 0xf5, 0x60, 0x88, 0xa4, 0xbd, 0x6c, 0xb3, 0xf2, 0x10, 0xe4,
		0x3f, 0xbd, 0x0e, 0xed, 0xbe, 0xd1, 0xee, 0x7b, 0x22, 0x50, 0x7e, 0x28, 0x64, 0x75, 0x64, 0xda,
		0x8d, 0x49, 0xcf, 0x47, 0xd7, 0xa2, 0xff, 0x14, 0x98, 0xcf, 0x72, 0x98, 0x4f, 0xcb, 0x86, 0x3b,
		0xf9, 0x1a, 0xed, 0xa0, 0x03, 0x15, 0x38, 0xce, 0x65, 0xed, 0x40, 0x35, 0xb6, 0xc2, 0x31, 0x4b,
		0x92, 0x9b, 0x3c, 0xf9, 0x66, 0x3f, 0x58, 0xf5, 0xd9, 0x78, 0xa8, 0xa6, 0x43, 0x39, 0x4a, 0xc9,
		0x8a, 0xb6, 0x10, 0xea, 0xc9, 0x61, 0x35, 0xdd, 0xc2, 0x29, 0x28, 0xcb, 0x19, 0x38, 0xbc, 0xd5,
		0xf9, 0xd8, 0x6f, 0x77, 0xd2, 0x1d, 0x79, 0x55, 0x7e, 0xab, 0x3f, 0x3d, 0x8a, 0xe0, 0x06, 0x2c,
		0x19, 0x70, 0xbf, 0x7a, 0x3d, 0x3a, 0xbf, 0xd4, 0xa9, 0xd4, 0xf7, 0x58, 0x90, 0xb8, 0x14, 0xfb,
		0xb2, 0x05, 0xfe, 0xb2, 0x94, 0x1a, 0xc7, 0xa7, 0x6e, 0x61, 0xb2, 0x1c, 0xae, 0xbd, 0xcd, 0x74,
		0x58, 0x38, 0x1d, 0x38, 0x1d, 0x38, 0x1d, 0xb3, 0xb8, 0x46, 0xdd, 0xc5, 0xfa, 0x41, 0x91, 0x72,
		0x56, 0x30, 0x96, 0xbe, 0x09, 0x72, 0xbf, 0x3a, 0xb9, 0x8b, 0x4f, 0xa8, 0xb6, 0xf5, 0x07, 0x92,
		0xc4, 0xbe, 0x2b, 0x88, 0x09, 0xfd, 0xf8, 0xe4, 0xee, 0x57, 0xcd, 0xe1, 0xdd, 0xbf, 0x26, 0x5c,
		0x59, 0xb5, 0x03, 0xb9, 0x2f, 0xe4, 0xb8, 0x73, 0xbb, 0x6a, 0xf9, 0x5c, 0x55, 0xf2, 0xb9, 0xe3,
		0xf7, 0x3a, 0xe2, 0x77, 0xc4, 0xef, 0x88, 0xdf, 0x01, 0xa5, 0x00, 0xa5, 0x10, 0xbf, 0x23, 0x7e,
		0x47, 0xfc, 0x8e, 0xf8, 0x1d, 0xf1, 0x3b, 0x9c, 0x0e, 0x9c, 0x0e, 0xe2, 0xf7, 0xbc, 0x26, 0x69,
		0x18, 0x1a, 0x4f, 0x22, 0x5b, 0x27, 0xb6, 0x68, 0x36, 0x1e, 0x8c, 0x10, 0x8c, 0x10, 0x8c, 0x10,
		0x2d, 0xe4, 0x0b, 0xde, 0xf0, 0x19, 0xde, 0xd0, 0xb6, 0x95, 0x80, 0x0b, 0xda, 0xd0, 0xa2, 0x87,
		0xc0, 0x4a, 0x67, 0xe3, 0xbe, 0xb4, 0x48, 0x05, 0xa5, 0xe5, 0xbe, 0xb0, 0x2c, 0x65, 0x56, 0x44,
		0x1b, 0x26, 0x5c, 0xd9, 0x25, 0x5a, 0x21, 0x33, 0x70, 0x0d, 0x99, 0x81, 0xf9, 0x08, 0xd5, 0x1f,
		0x72, 0x9c, 0xf3, 0xd7, 0x45, 0x3f, 0x3b, 0x1c, 0x6a, 0xa3, 0x8b, 0x03, 0x8b, 0xd8, 0x77, 0x40,
		0x6d, 0x74, 0xc1, 0x3c, 0x25, 0x6a, 0xa3, 0x2d, 0x87, 0x45, 0x6d, 0xf4, 0x62, 0xde, 0x0e, 0xb5,
		0xd1, 0x85, 0x85, 0xdb, 0xd3, 0xff, 0x50, 0x1b, 0xbd, 0xbc, 0xe1, 0x3d, 0x6a, 0xa3, 0x8d, 0x07,
		0x45, 0x6d, 0x74, 0x39, 0xa4, 0x21, 0x6a, 0xa3, 0x97, 0x8d, 0x8d, 0x31, 0xce, 0xaf, 0xb3, 0x67,
		0x62, 0x4c, 0xb2, 0xe9, 0xd0, 0x98, 0x0e, 0x24, 0x0c, 0x48, 0x18, 0x90, 0x30, 0x20, 0x61, 0x40,
		0xc2, 0x80, 0x84, 0x01, 0x09, 0x03, 0x12, 0x06, 0x24, 0x0c, 0x48, 0x18, 0x90, 0x30, 0x20, 0x61,
		0x40, 0xc2, 0x80, 0x84, 0x01, 0x09, 0xb3, 0x5a, 0x24, 0x4c, 0x91, 0x4d, 0xea, 0x9e, 0x72, 0x30,
		0x6e, 0x1b, 0xd5, 0x65, 0xa0, 0x60, 0x86, 0xf2, 0x95, 0x98, 0x53, 0x30, 0xe3, 0xcb, 0x90, 0x07,
		0x03, 0x0a, 0xa6, 0x1c, 0x0a, 0xc6, 0xa8, 0x99, 0x9b, 0x0b, 0x77, 0x83, 0xee, 0x58, 0x20, 0x58,
		0x96, 0xb5, 0xba, 0xd6, 0xb2, 0x5d, 0xdc, 0x9c, 0xb8, 0x58, 0xd7, 0xee, 0xaf, 0xb9, 0x3c, 0x9c,
		0x1d, 0x35, 0x05, 0x45, 0x28, 0x52, 0x21, 0xc8, 0x74, 0xed, 0x9d, 0x1f, 0xce, 0x9e, 0xbb, 0xa0,
		0x7d, 0x4e, 0xf0, 0x72, 0x96, 0xb4, 0xff, 0xa8, 0x8c, 0x38, 0x02, 0xb5, 0x4c, 0x65, 0x2d, 0x4c,
		0x69, 0x0b, 0x53, 0xde, 0x42, 0x94, 0xd8, 0x0d, 0x59, 0xb6, 0x7c, 0x47, 0xa0, 0xe6, 0x26, 0xb5,
		0x1c, 0x91, 0x5b, 0xae, 0x66, 0x28, 0x77, 0x29, 0x7d, 0x7e, 0xc2, 0xf0, 0x45, 0x12, 0xa6, 0xc8,
		0xd2, 0xfa, 0x17, 0xb4, 0xc9, 0x41, 0x89, 0xfd, 0xb3, 0xea, 0x44, 0x98, 0x75, 0xfe, 0x98, 0xdf,
		0x35, 0xe6, 0x2d, 0xc2, 0x7f, 0xd1, 0x43, 0xe6, 0x2b, 0xc3, 0x87, 0xa3, 0x84, 0xa3, 0x84, 0xa3,
		0x2c, 0xc8, 0x51, 0xba, 0x2d, 0xf3, 0x77, 0xed, 0x35, 0x17, 0x62, 0x0e, 0x55, 0x14, 0x38, 0xdc,
		0x72, 0x1f, 0x8d, 0x06, 0xc3, 0x07, 0xc3, 0x07, 0xc3, 0xb7, 0x54, 0x86, 0xcf, 0x36, 0xc1, 0xe9,
		0x45, 0x53, 0xb7, 0xe7, 0x60, 0xac, 0x5c, 0x09, 0x50, 0xc5, 0x40, 0xfd, 0x62, 0xc2, 0x2a, 0xc7,
		0x8e, 0xc2, 0x91, 0x98, 0x15, 0x38, 0x73, 0x6e, 0x52, 0xcb, 0x5e, 0x9c, 0xbe, 0x2d, 0x87, 0x63,
		0x3a, 0x4d, 0x3d, 0x7b, 0x71, 0x42, 0x3a, 0xff, 0xe9, 0x5c, 0x1c, 0x9e, 0x5c, 0x1d, 0x1c, 0x1e,
		0xb5, 0x4e, 0x0f, 0x0f, 0xae, 0xce, 0xcf, 0x8e, 0x0f, 0x3b, 0x0e, 0x67, 0x66, 0xcd, 0x71, 0x7e,
		0x5a, 0x71, 0x22, 0xf2, 0xda, 0xec, 0x0c, 0x67, 0xe5, 0xaa, 0x79, 0x70, 0xd2, 0x3a, 0xad, 0x38,
		0xbf, 0xdf, 0xbd, 0xd3, 0x11, 0x2f, 0x3f, 0x2c, 0xd7, 0x73, 0xe5, 0x1f, 0xe5, 0x92, 0x20, 0x74,
		0x4d, 0x92, 0x41, 0xf5, 0x3b, 0xbf, 0x73, 0x87, 0x5e, 0xa7, 0x03, 0x02, 0xc0, 0x02, 0xc0, 0x02,
		0xc0, 0x2e, 0x15, 0x80, 0x5d, 0x3a, 0x8a, 0x7b, 0x21, 0x16, 0x2f, 0x77, 0xb7, 0xbe, 0xf9, 0xc0,
		0x20, 0x5f, 0xbf, 0x3e, 0xd8, 0x3c, 0xd8, 0x3c, 0xd8, 0x3c, 0xd8, 0xbc, 0x42, 0xae, 0xb4, 0xcd,
		0x9e, 0xc8, 0xd9, 0x37, 0xf0, 0x01, 0x5f, 0xda, 0xe7, 0xe1, 0x8e, 0xb2, 0x4e, 0xd7, 0xf3, 0x9d,
		0x3b, 0xf2, 0xf0, 0x1c, 0xb6, 0x39, 0xba, 0x5f, 0x87, 0x4f, 0x71, 0x65, 0x7d, 0x00, 0x89, 0xfd,
		0xea, 0xdd, 0x5b, 0xb5, 0x4b, 0xb4, 0x39, 0x98, 0xe4, 0x19, 0xa5, 0xb1, 0x6b, 0xd7, 0xb8, 0xe6,
		0x32, 0x53, 0xac, 0x8e, 0x4c, 0xb1, 0x02, 0xbd, 0x13, 0x32, 0xc5, 0x1e, 0x9e, 0x1c, 0x99, 0x62,
		0x80, 0x94, 0x80, 0x94, 0x80, 0x94, 0x54, 0x21, 0x25, 0x32, 0xc5, 0x5c, 0x6a, 0x13, 0x32, 0xc5,
		0x5c, 0xb2, 0x2d, 0xc8, 0x14, 0x83, 0xa3, 0x84, 0xa3, 0x7c, 0x9f, 0x8e, 0x12, 0x99, 0x62, 0x73,
		0xcf, 0x8e, 0x4c, 0x31, 0x18, 0x3e, 0x18, 0xbe, 0x55, 0x37, 0x7c, 0xc8, 0x14, 0x5b, 0x64, 0x58,
		0xe5, 0xd8, 0x51, 0x38, 0x12, 0xb3, 0x02, 0x67, 0x0e, 0x99, 0x62, 0x3f, 0x4c, 0x08, 0x32, 0xc5,
		0x32, 0xcc, 0x0e, 0x32, 0xc5, 0x16, 0x37, 0x0a, 0x32, 0xc5, 0x90, 0x29, 0x06, 0x00, 0x0b, 0x00,
		0xbb, 0xac, 0x00, 0x16, 0x99, 0x62, 0xc8, 0x14, 0x83, 0xcd, 0x83, 0xcd, 0x83, 0xcd, 0x23, 0x69,
		0xf3, 0xde, 0x71, 0xa6, 0x58, 0x9e, 0xd4, 0xa5, 0x35, 0x57, 0x89, 0x62, 0x16, 0x47, 0xce, 0xda,
		0xaf, 0x9d, 0x4d, 0x9e, 0x98, 0xbb, 0x13, 0xcb, 0x71, 0x56, 0x39, 0xb2, 0xc5, 0x16, 0xed, 0x91,
		0xa8, 0x9e, 0x55, 0x1e, 0x70, 0xd6, 0x73, 0x74, 0x70, 0xc0, 0x4e, 0x8e, 0x31, 0xda, 0x13, 0x93,
		0xfb, 0xcb, 0x2f, 0x93, 0x3c, 0xdb, 0xf5, 0x99, 0x52, 0xaf, 0xc4, 0x11, 0xe8, 0xbf, 0x8d, 0x48,
		0x0b, 0x5b, 0x4b, 0xb5, 0xfa, 0xdd, 0xbd, 0x65, 0x1a, 0x04, 0xab, 0x7a, 0x06, 0xfd, 0x03, 0x32,
		0x28, 0xf5, 0xf4, 0xf9, 0x07, 0x2c, 0x80, 0x83, 0xe7, 0x5f, 0x5b, 0x99, 0x52, 0xba, 0x6c, 0x8f,
		0x16, 0xc3, 0x59, 0x97, 0xed, 0x0f, 0x39, 0xe6, 0xdb, 0x74, 0x9e, 0x73, 0xcc, 0x6f, 0x25, 0xd3,
		0x81, 0x6c, 0x76, 0x33, 0xfa, 0xfa, 0x5c, 0xbe, 0x3c, 0x43, 0xaf, 0xcc, 0xce, 0xe8, 0x98, 0xac,
		0x48, 0x89, 0xff, 0xcd, 0x36, 0x39, 0x4f, 0x4e, 0xd7, 0x7a, 0xb8, 0xec, 0x8d, 0xd9, 0xcf, 0x56,
		0x99, 0x90, 0x19, 0x53, 0x9a, 0x60, 0x47, 0x73, 0x8c, 0x68, 0x8a, 0x05, 0xad, 0x31, 0x9f, 0x35,
		0xb6, 0xb3, 0xc2, 0x70, 0xf9, 0xf4, 0x27, 0x6b, 0xa6, 0xbe, 0x69, 0xd3, 0x64, 0xbb, 0x26, 0xc9,
		0x68, 0x75, 0xbf, 0x86, 0x56, 0xf7, 0x76, 0x02, 0xfa, 0xbc, 0xdd, 0x73, 0x72, 0xd8, 0xe0, 0xdc,
		0x68, 0x38, 0x6b, 0xb0, 0xb8, 0x88, 0x1b, 0xad, 0xf0, 0x71, 0xd6, 0x60, 0xa6, 0xff, 0x70, 0xd6,
		0xe0, 0xdb, 0x2f, 0x88, 0xb3, 0x06, 0xcb, 0xa3, 0xb1, 0x0a, 0x7c, 0x3b, 0x9c, 0x35, 0x58, 0x18,
		0x67, 0x39, 0xfd, 0x0f, 0x67, 0x0d, 0x9a, 0xdb, 0x3b, 0x9c, 0x35, 0x88, 0xb3, 0x06, 0x0b, 0xc5,
		0x82, 0x6b, 0x38, 0x6b, 0xd0, 0x11, 0x9e, 0x5c, 0x71, 0x16, 0x74, 0x16, 0xa1, 0x99, 0xf7, 0x35,
		0x31, 0xe4, 0xec, 0x66, 0x77, 0x32, 0xea, 0x5d, 0xe2, 0xe6, 0xac, 0x41, 0x7e, 0x3d, 0x31, 0x12,
		0x86, 0x14, 0xcc, 0xe4, 0x3a, 0x50, 0x30, 0xa0, 0x60, 0xca, 0xa1, 0x60, 0x46, 0x02, 0x67, 0xcf,
		0xb9, 0x8c, 0x2f, 0xc7, 0x79, 0x83, 0x20, 0x59, 0x96, 0x8a, 0x64, 0xc1, 0x79, 0x83, 0xc8, 0x0b,
		0x2a, 0x4c, 0x91, 0x0a, 0x41, 0xa7, 0x6b, 0xef, 0xbc, 0x8b, 0xd4, 0xc8, 0x91, 0x8c, 0xab, 0xe4,
		0x9d, 0x51, 0x6a, 0x8f, 0xc6, 0x44, 0xca, 0x79, 0xf1, 0x8a, 0xea, 0x5a, 0x61, 0x0b, 0x53, 0xdc,
		0xc2, 0x14, 0xb8, 0x10, 0x45, 0x76, 0x43, 0x9a, 0x2d, 0x5f, 0xca, 0xb9, 0xdb, 0xc2, 0x5d, 0x97,
		0x05, 0xbb, 0xc5, 0x14, 0xea, 0x3e, 0x61, 0xfa, 0x9b, 0x5f, 0x2f, 0x7e, 0x3d, 0x3b, 0x6f, 0xfd,
		0xbf, 0xe6, 0x45, 0xeb, 0xec, 0xf4, 0xea, 0xf0, 0xdb, 0xe1, 0xe9, 0x85, 0x0b, 0xda, 0x7f, 0x76,
		0xaf, 0x02, 0x0a, 0x74, 0x0b, 0x2a, 0x57, 0x7e, 0x69, 0x36, 0xf6, 0xcf, 0x4e, 0x4e, 0x9a, 0xa7,
		0x07, 0xee, 0xca, 0x73, 0xef, 0x3f, 0xd2, 0x9d, 0x8a, 0xd3, 0xa3, 0xd6, 0x97, 0xca, 0x92, 0x15,
		0x02, 0x5f, 0x2e, 0xda, 0xa2, 0xa1, 0x44, 0x24, 0x23, 0xd1, 0x36, 0x26, 0x95, 0xc6, 0x3f, 0x4a,
		0xef, 0x26, 0xfc, 0xc0, 0xc2, 0x1d, 0x8e, 0x1e, 0x63, 0xfc, 0x83, 0x40, 0x3b, 0x61, 0x07, 0x88,
		0xd4, 0x1d, 0x12, 0x45, 0xa9, 0x08, 0x42, 0x42, 0x94, 0x8a, 0x2c, 0x5b, 0xa9, 0xc8, 0x23, 0xb5,
		0x46, 0x5f, 0xf4, 0x52, 0x18, 0x2d, 0xf4, 0x45, 0x87, 0xf9, 0x02, 0xa3, 0x05, 0x46, 0x0b, 0x8c,
		0x16, 0x18, 0x2d, 0x30, 0x5a, 0x60, 0xb4, 0xc0, 0x68, 0x81, 0xd1, 0x02, 0xa3, 0xf5, 0xbe, 0x19,
		0xad, 0x92, 0xbb, 0x9e, 0xbc, 0x40, 0x68, 0x95, 0xdb, 0xf6, 0xa4, 0x8c, 0x9e, 0x01, 0xd6, 0x60,
		0x13, 0x5d, 0x03, 0x72, 0x2f, 0x41, 0xd9, 0x5d, 0x03, 0x9e, 0x57, 0xad, 0xe2, 0xdb, 0x06, 0x3c,
		0xaf, 0x4c, 0xe8, 0x1b, 0xf0, 0xda, 0xda, 0x94, 0x91, 0x31, 0x3b, 0x5e, 0x8d, 0x32, 0x33, 0x66,
		0xcd, 0x58, 0x2a, 0x2b, 0x56, 0xca, 0x3a, 0x5f, 0xb6, 0x8e, 0x7c, 0x59, 0x97, 0x41, 0x26, 0x4a,
		0x96, 0x51, 0xb2, 0x8c, 0x6c, 0x5a, 0x97, 0xcc, 0x0a, 0x4a, 0x96, 0x5f, 0x7e, 0x6c, 0x94, 0x2c,
		0xa3, 0x64, 0x39, 0xe7, 0x8b, 0xa2, 0x64, 0x99, 0xee, 0xdb, 0xa1, 0x64, 0xb9, 0x54, 0xa3, 0x87,
		0x92, 0xe5, 0x77, 0x46, 0x85, 0xa0, 0x64, 0xb9, 0x18, 0x5c, 0xb8, 0x86, 0x92, 0xe5, 0xe5, 0x23,
		0x60, 0x4c, 0xa9, 0x66, 0x6b, 0xfe, 0xc5, 0x80, 0x4d, 0xa6, 0xde, 0xb6, 0x31, 0x6b, 0x07, 0xc3,
		0x3c, 0xf3, 0x59, 0x44, 0xd3, 0xc6, 0x8c, 0xa5, 0x82, 0x66, 0x25, 0x81, 0x68, 0xd3, 0xe8, 0xd6,
		0xaa, 0x2e, 0xa0, 0x4d, 0x63, 0x91, 0xfa, 0x92, 0x39, 0x79, 0xdb, 0x40, 0x51, 0xb2, 0x64, 0x62,
		0xdb, 0x69, 0x48, 0xc2, 0xd5, 0x35, 0x57, 0xd5, 0xbe, 0x8a, 0xd2, 0x38, 0xc9, 0xae, 0x28, 0x4f,
		0x2f, 0x83, 0xbe, 0xa0, 0xad, 0xe9, 0xbc, 0x38, 0x59, 0x6c, 0x14, 0x3c, 0xbe, 0x1a, 0xfd, 0x35,
		0x4a, 0xa4, 0x4c, 0xdf, 0xf5, 0x7e, 0x81, 0x65, 0x43, 0x81, 0x7c, 0x8d, 0x04, 0xd0, 0x61, 0xa3,
		0x54, 0x01, 0x77, 0x1e, 0xfb, 0xad, 0x72, 0x87, 0x0d, 0x37, 0x27, 0xef, 0xe0, 0xd4, 0x1d, 0xd4,
		0x22, 0x2c, 0x42, 0xa9, 0x16, 0x42, 0xcb, 0x3a, 0x2c, 0xa5, 0xa2, 0x47, 0xcf, 0xda, 0x54, 0x3c,
		0xb9, 0x29, 0xda, 0x44, 0xb9, 0x26, 0x6c, 0x0c, 0x6c, 0x8c, 0xb9, 0xbc, 0xbc, 0x8b, 0x7d, 0xef,
		0xce, 0xe1, 0xf9, 0xb7, 0xc3, 0xf3, 0x77, 0xb1, 0xef, 0xbd, 0xba, 0x7b, 0xde, 0xef, 0x6e, 0x5b,
		0x78, 0xc9, 0x82, 0x88, 0x32, 0xb3, 0x9c, 0x9f, 0xb0, 0x8a, 0x4f, 0x7e, 0xb3, 0x6f, 0x89, 0x61,
		0xc0, 0xb2, 0x76, 0x46, 0x37, 0xfc, 0x32, 0xba, 0xfb, 0xe3, 0x5f, 0xac, 0x1a, 0x61, 0x18, 0x6c,
		0xb8, 0x19, 0xf0, 0x43, 0x56, 0x91, 0x59, 0x9e, 0x88, 0x0c, 0xa9, 0x8b, 0xa0, 0x29, 0x96, 0x3e,
		0x75, 0xd1, 0xbe, 0xf9, 0x44, 0x9e, 0xa6, 0x13, 0xcf, 0x34, 0x9b, 0x30, 0x3f, 0x93, 0xb4, 0x18,
		0x33, 0x31, 0x36, 0x9d, 0x89, 0xbd, 0xa5, 0x98, 0x0e, 0x00, 0x4e, 0x13, 0xc6, 0x62, 0x35, 0x38,
		0xcd, 0xb1, 0x44, 0x3b, 0x68, 0xb1, 0x32, 0x1e, 0x07, 0x5d, 0x83, 0xc1, 0x39, 0xbc, 0x0b, 0xce,
		0x21, 0x77, 0x8f, 0x15, 0xe6, 0xfb, 0x8a, 0x27, 0x89, 0xbb, 0xd0, 0x7e, 0x3a, 0x20, 0xba, 0xab,
		0x14, 0xaf, 0xa2, 0xae, 0x55, 0xb5, 0x30, 0x95, 0x2d, 0x4c, 0x75, 0x0b, 0x51, 0x61, 0x37, 0xd4,
		0xc4, 0xf2, 0x75, 0x57, 0xc9, 0xdf, 0x05, 0xce, 0x05, 0x30, 0xcf, 0x00, 0xd4, 0xa7, 0x36, 0x64,
		0x51, 0xbd, 0x20, 0x72, 0x38, 0xcd, 0x9c, 0xc7, 0x1f, 0xcc, 0xad, 0x59, 0xee, 0x66, 0xa3, 0x0e,
		0x80, 0x0d, 0xac, 0x29, 0xac, 0x29, 0x75, 0x6b, 0x9a, 0x17, 0x28, 0x39, 0x07, 0x4c, 0x05, 0x01,
		0x27, 0xc7, 0x00, 0xca, 0xb9, 0xea, 0x17, 0x61, 0x02, 0x8a, 0x33, 0x05, 0x45, 0x99, 0x84, 0xc2,
		0x4d, 0x43, 0xe1, 0x26, 0xa2, 0x50, 0x53, 0xe1, 0xc6, 0x64, 0x38, 0x32, 0x1d, 0xee, 0x01, 0xd9,
		0x9c, 0xbc, 0x8a, 0xb8, 0xea, 0x56, 0xfb, 0xd7, 0x72, 0x56, 0x7e, 0xbf, 0x35, 0x07, 0x7f, 0x3a,
		0x95, 0x21, 0xb7, 0x3a, 0xf5, 0xc3, 0xcc, 0x5e, 0x6f, 0x16, 0x30, 0xb7, 0x73, 0x73, 0xbc, 0x5b,
		0xc0, 0xd8, 0x6d, 0xa6, 0x35, 0x57, 0xd2, 0xf9, 0x74, 0xcf, 0x6e, 0xf0, 0x3f, 0x3f, 0xfd, 0xf4,
		0xe7, 0x46, 0x75, 0xef, 0xf2, 0xdf, 0x3f, 0x6b, 0xd5, 0xbd, 0xcb, 0xf1, 0xc7, 0xda, 0xe8, 0xc7,
		0xf8, 0x73, 0xfd, 0xcf, 0x8d, 0xea, 0xe6, 0xf4, 0xf3, 0xd6, 0x9f, 0x1b, 0xd5, 0xad, 0xcb, 0x9f,
		0xff, 0xfa, 0xeb, 0x97, 0x9f, 0xff, 0x69, 0xdc, 0x9b, 0x5f, 0xf8, 0x5f, 0x15, 0xe7, 0x2f, 0x71,
		0x59, 0xc4, 0xa4, 0x9f, 0x75, 0x5a, 0x7f, 0x60, 0xe6, 0xdf, 0x9a, 0x79, 0xa7, 0x23, 0xde, 0x7f,
		0x24, 0x64, 0x4e, 0xb6, 0x61, 0x4e, 0x5e, 0x17, 0x6a, 0x56, 0xed, 0x35, 0xab, 0x47, 0x97, 0xff,
		0xd4, 0x3e, 0x6e, 0xde, 0x7f, 0xfa, 0xf9, 0x9f, 0x9d, 0xfb, 0x1f, 0xff, 0xf8, 0xef, 0x73, 0x5f,
		0xab, 0x7d, 0xdc, 0xb9, 0xff, 0xf4, 0xc2, 0xbf, 0x6c, 0xdf, 0x7f, 0xca, 0x38, 0xc6, 0xd6, 0xfd,
		0x4f, 0x73, 0x5f, 0x1d, 0xfe, 0xbd, 0xfe, 0xd2, 0x05, 0x9b, 0x2f, 0x5c, 0xd0, 0x78, 0xe9, 0x82,
		0xc6, 0x0b, 0x17, 0xbc, 0xf8, 0x48, 0xf5, 0x17, 0x2e, 0xd8, 0xba, 0xff, 0x77, 0xee, 0xfb, 0x3f,
		0x3d, 0xff, 0xd5, 0xed, 0xfb, 0x9f, 0xff, 0x7d, 0xe9, 0xdf, 0x76, 0xee, 0xff, 0xfd, 0xf4, 0x33,
		0x8c, 0x2b, 0xe4, 0x70, 0x65, 0xe5, 0xd0, 0xad, 0xab, 0xf9, 0xb0, 0x5c, 0xcf, 0x75, 0xbf, 0x0c,
		0x99, 0x81, 0xf9, 0x2a, 0x4a, 0x5e, 0x74, 0x96, 0x39, 0x2a, 0x4c, 0xc0, 0x66, 0x80, 0xcd, 0x00,
		0x9b, 0x41, 0x94, 0xcd, 0xc8, 0x5d, 0x21, 0xf3, 0x32, 0x2c, 0x5e, 0x21, 0x9b, 0xab, 0x45, 0xc8,
		0xa3, 0x54, 0xbb, 0x37, 0xbb, 0xd3, 0x81, 0x61, 0x79, 0x61, 0x79, 0x61, 0x79, 0xdf, 0x95, 0xe5,
		0x4d, 0x85, 0xd4, 0xb5, 0xed, 0x02, 0x2c, 0xef, 0xb6, 0xc3, 0x21, 0xcf, 0x99, 0xec, 0x93, 0xe0,
		0x90, 0x4f, 0x84, 0x74, 0xae, 0xa8, 0x05, 0x99, 0xd5, 0xb9, 0xe1, 0x47, 0x15, 0x51, 0x05, 0x8e,
		0x7f, 0xa4, 0x98, 0xa7, 0x45, 0x24, 0x0f, 0x44, 0x5f, 0x8c, 0x3b, 0xeb, 0x39, 0xbf, 0xcf, 0x7d,
		0x01, 0x04, 0xc4, 0x09, 0xbb, 0x25, 0xbf, 0xa4, 0xdb, 0x5b, 0x5b, 0x8d, 0x2d, 0xc2, 0xcb, 0x8a,
		0x78, 0xbe, 0xc0, 0x11, 0xf2, 0xa6, 0x49, 0x38, 0x3a, 0x98, 0x66, 0x36, 0x9e, 0xa3, 0xfa, 0xb2,
		0x49, 0xc1, 0xc3, 0xe4, 0xe7, 0xba, 0x93, 0xa4, 0xa8, 0x35, 0x47, 0xe5, 0x67, 0xe3, 0xcf, 0xd3,
		0xbf, 0xe5, 0x3a, 0x96, 0x39, 0xbf, 0x0c, 0xe4, 0x49, 0x5d, 0x53, 0xcc, 0x17, 0xa9, 0xc3, 0x4c,
		0xe0, 0xc9, 0x78, 0x48, 0x5d, 0x2b, 0x2f, 0xce, 0x40, 0xea, 0x1a, 0x52, 0xd7, 0x5e, 0x1e, 0xc8,
		0x51, 0x6e, 0xea, 0x9c, 0xf8, 0x3a, 0x33, 0xc7, 0x0e, 0x15, 0x1e, 0x84, 0x03, 0x08, 0x07, 0x10,
		0x0e, 0x6e, 0x0d, 0xc8, 0x6c, 0x40, 0xe6, 0x79, 0xba, 0x1a, 0x47, 0x4a, 0xbb, 0x97, 0xab, 0x59,
		0x36, 0xec, 0xec, 0x16, 0x8e, 0x97, 0xfd, 0x80, 0xf7, 0x58, 0x1a, 0x8c, 0x56, 0xbd, 0xb6, 0x5b,
		0x6b, 0xb8, 0x1e, 0xbe, 0x98, 0x20, 0xd0, 0xb9, 0x15, 0x2b, 0xd2, 0x9a, 0x15, 0x6f, 0xd5, 0x8a,
		0xb6, 0x6e, 0xa5, 0x59, 0xb9, 0xd2, 0xac, 0x5d, 0x29, 0x56, 0xaf, 0xa0, 0x10, 0xdf, 0xb1, 0xc4,
		0x3b, 0xa7, 0x5f, 0xe7, 0xe4, 0x7d, 0x68, 0xb6, 0xaa, 0x32, 0x0d, 0xbb, 0xd6, 0x95, 0xc8, 0x59,
		0x4c, 0xcc, 0x76, 0x01, 0x43, 0x17, 0xc3, 0xcd, 0x4e, 0xff, 0x2b, 0x46, 0x49, 0xd7, 0x8a, 0xe6,
		0x6a, 0x4b, 0x22, 0xf8, 0xe6, 0x88, 0xbe, 0xa2, 0xef, 0x53, 0x02, 0xd9, 0x57, 0x90, 0x0e, 0x3f,
		0x5d, 0xfa, 0x02, 0x39, 0xdd, 0x45, 0x2d, 0x7d, 0x81, 0x1c, 0xef, 0x42, 0x96, 0xff, 0x03, 0x8d,
		0x51, 0x97, 0x35, 0xd7, 0xcc, 0xa1, 0xfa, 0x8c, 0x0e, 0xcc, 0x2c, 0x1a, 0xbb, 0xcf, 0x6e, 0x51,
		0x28, 0x76, 0xaf, 0x03, 0xbb, 0x03, 0xbb, 0x03, 0xbb, 0x03, 0xbb, 0x03, 0xbb, 0x03, 0xbb, 0x03,
		0xbb, 0x03, 0xbb, 0x03, 0xbb, 0x03, 0xbb, 0xaf, 0x34, 0x76, 0x57, 0x5c, 0x2b, 0x26, 0x93, 0x50,
		0xe8, 0x2a, 0xd3, 0x9a, 0x87, 0xb1, 0x4e, 0x8a, 0x43, 0xf1, 0xcf, 0xdd, 0x0c, 0x80, 0x1b, 0x80,
		0x1b, 0x80, 0x1b, 0x80, 0xdb, 0xa1, 0xbc, 0xa7, 0x42, 0xea, 0xdd, 0x02, 0xa1, 0xf6, 0x16, 0xa0,
		0x36, 0xa0, 0x36, 0xa0, 0xf6, 0x4a, 0x42, 0xed, 0xfa, 0x16, 0x80, 0x36, 0x80, 0x76, 0x01, 0x40,
		0x3b, 0xe1, 0x9e, 0xe2, 0xba, 0xfa, 0x9d, 0xdf, 0x15, 0x87, 0xaf, 0x1f, 0xdd, 0x03, 0xb0, 0x1a,
		0xb0, 0x1a, 0xb0, 0x1a, 0xb0, 0xda, 0x65, 0xf4, 0x1e, 0xa5, 0x5a, 0xc8, 0x7e, 0x35, 0x66, 0x49,
		0x32, 0x12, 0x9f, 0x22, 0xbb, 0x15, 0xbd, 0x2b, 0x8f, 0x50, 0x1d, 0xb0, 0x64, 0xc0, 0xfd, 0x32,
		0x1c, 0xc3, 0xf4, 0x56, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0, 0x0f, 0x0e, 0xe5, 0xdd, 0x53,
		0x77, 0xb1, 0x9e, 0x79, 0x87, 0x6a, 0x8e, 0x93, 0x5a, 0xe1, 0x22, 0xa6, 0x2e, 0x62, 0xa4, 0xe8,
		0x55, 0xd7, 0x0d, 0xa2, 0xe7, 0xfd, 0xc3, 0xd3, 0xfb, 0xc0, 0x39, 0xc0, 0x39, 0xc0, 0x39, 0xc0,
		0x39, 0x38, 0x94, 0xf7, 0x42, 0xfa, 0x51, 0xcf, 0xf9, 0x84, 0xbd, 0x02, 0xc6, 0x2e, 0xa4, 0x3f,
		0xf5, 0xf4, 0xbf, 0x02, 0x89, 0xf9, 0x92, 0xfa, 0x55, 0xcf, 0xfb, 0xe5, 0x02, 0xef, 0x51, 0x74,
		0xa3, 0xcf, 0xd9, 0x8d, 0xa8, 0x77, 0x53, 0x9e, 0xfe, 0x77, 0x59, 0xe4, 0x62, 0x94, 0xd1, 0x7a,
		0x75, 0xf5, 0x56, 0xa4, 0x18, 0x4e, 0xfe, 0x23, 0x61, 0xf3, 0xb4, 0x0d, 0xf3, 0x64, 0xa7, 0x0c,
		0xe8, 0x47, 0xbc, 0x12, 0xfd, 0x88, 0x57, 0xd6, 0x58, 0x43, 0x3e, 0x57, 0x4b, 0x3e, 0xb1, 0x9d,
		0xbc, 0x04, 0x23, 0xb9, 0x6a, 0xe1, 0xe0, 0xb8, 0x2f, 0xd7, 0x03, 0x67, 0x55, 0x48, 0x7f, 0xae,
		0x71, 0xe7, 0xa7, 0x75, 0xa7, 0x7d, 0x61, 0xd6, 0x8a, 0x69, 0xd7, 0x75, 0x3e, 0x7a, 0x54, 0x27,
		0x5d, 0xbb, 0xdc, 0x49, 0xce, 0xbd, 0x93, 0xce, 0x66, 0x4c, 0x17, 0xd0, 0xd4, 0x7d, 0x3c, 0xec,
		0x92, 0xb7, 0xfa, 0xa9, 0xa3, 0xd5, 0x0f, 0x21, 0x0e, 0x11, 0xad, 0x7e, 0xd0, 0xea, 0x07, 0xad,
		0x7e, 0xe6, 0xad, 0x18, 0x76, 0x4a, 0x4a, 0xb0, 0x6e, 0xa5, 0x59, 0xb9, 0xd2, 0xac, 0x5d, 0x29,
		0x56, 0xaf, 0x98, 0x78, 0x00, 0xe5, 0xc2, 0xcf, 0x9b, 0x18, 0x94, 0x0b, 0x3f, 0x7a, 0x70, 0xd4,
		0x30, 0x98, 0xdf, 0x07, 0x35, 0x0c, 0x4b, 0xbb, 0xf4, 0x28, 0x17, 0x06, 0xed, 0x54, 0x8c, 0xfa,
		0xa0, 0xd5, 0x0f, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0,
		0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0x11, 0xec, 0xee, 0x45, 0xa9, 0xd4, 0x5c, 0x15, 0x58,
		0x46, 0x30, 0xbb, 0x43, 0x31, 0xd0, 0xba, 0x06, 0x68, 0x0d, 0x68, 0x0d, 0x68, 0xbd, 0x8c, 0xd0,
		0xda, 0xf5, 0x26, 0xe1, 0x03, 0xe1, 0xe0, 0x79, 0x3c, 0x49, 0xaa, 0xc3, 0x1f, 0x45, 0xb4, 0x26,
		0x9b, 0x67, 0x1f, 0x9e, 0xde, 0xef, 0x23, 0xc9, 0x73, 0x1d, 0x8b, 0x32, 0x6c, 0x65, 0x18, 0xb8,
		0xf2, 0x0c, 0x5d, 0x59, 0x06, 0xaf, 0x74, 0xc3, 0x57, 0xba, 0x01, 0x2c, 0xd5, 0x10, 0x16, 0x0c,
		0x2d, 0x0b, 0xd2, 0x98, 0xc2, 0xb8, 0x87, 0x97, 0x40, 0xd8, 0xf6, 0x66, 0x09, 0xd9, 0xf4, 0x45,
		0x26, 0xd3, 0x17, 0xcb, 0x48, 0x14, 0xcf, 0x4c, 0x94, 0xca, 0x50, 0x94, 0x1c, 0xae, 0x96, 0xcd,
		0x58, 0x2c, 0x22, 0x74, 0x2d, 0x81, 0xc1, 0x28, 0x95, 0xc9, 0x58, 0xb4, 0x88, 0xd4, 0x76, 0x37,
		0x37, 0xb7, 0x77, 0x36, 0x37, 0x37, 0x76, 0x1a, 0x3b, 0x1b, 0x7b, 0x5b, 0x5b, 0xb5, 0xed, 0xda,
		0xd6, 0x0a, 0x4b, 0xcd, 0x07, 0x9a, 0xa3, 0x53, 0xc9, 0xf1, 0x2f, 0xe2, 0x28, 0xf7, 0x09, 0xf6,
		0x57, 0xfc, 0xff, 0xc7, 0xbd, 0x12, 0x63, 0x8d, 0xe9, 0xfd, 0x10, 0x6b, 0x20, 0xd6, 0x40, 0xac,
		0x81, 0x58, 0x03, 0xb1, 0x06, 0x62, 0x0d, 0xc4, 0x1a, 0x88, 0x35, 0x10, 0x6b, 0x20, 0xd6, 0x40,
		0xac, 0xb1, 0xa2, 0xb1, 0x86, 0xe2, 0x5a, 0x09, 0xee, 0x57, 0x67, 0x31, 0xc0, 0xdf, 0x29, 0x4f,
		0xca, 0x08, 0x3a, 0x5e, 0xba, 0x31, 0xa2, 0x0f, 0x44, 0x1f, 0x88, 0x3e, 0x10, 0x7d, 0x20, 0xfa,
		0x40, 0xf4, 0x81, 0xe8, 0x03, 0xd1, 0x07, 0xa2, 0x0f, 0x44, 0x1f, 0x88, 0x3e, 0x56, 0x34, 0xfa,
		0xd0, 0x22, 0xe4, 0x51, 0xaa, 0xcb, 0x8f, 0x3e, 0x5e, 0xba, 0x31, 0xa2, 0x0f, 0x44, 0x1f, 0x88,
		0x3e, 0x10, 0x7d, 0x20, 0xfa, 0x40, 0xf4, 0x81, 0xe8, 0x03, 0xd1, 0x07, 0xa2, 0x0f, 0x44, 0x1f,
		0x88, 0x3e, 0x96, 0x21, 0xfa, 0x58, 0xea, 0xb2, 0x93, 0x82, 0x7a, 0x98, 0xce, 0xc6, 0x2f, 0xb4,
		0x97, 0xe9, 0xa8, 0xef, 0xe5, 0x7a, 0x41, 0x35, 0x73, 0x6b, 0x85, 0xf6, 0x36, 0xed, 0x0c, 0x1f,
		0xfd, 0x6a, 0x7f, 0xfa, 0xe8, 0xef, 0xa0, 0x78, 0x52, 0x71, 0xad, 0x98, 0x4c, 0x42, 0xa1, 0xab,
		0x4c, 0x6b, 0x1e, 0x16, 0x51, 0x8c, 0xf4, 0x64, 0x8f, 0xee, 0xc7, 0x9b, 0xa1, 0x5b, 0x09, 0x4a,
		0x2a, 0x17, 0x1e, 0xf1, 0xa2, 0xa4, 0xb2, 0x3c, 0xdf, 0x56, 0x7c, 0xb7, 0x92, 0x54, 0x48, 0xbd,
		0x5b, 0x60, 0x9f, 0x92, 0x2d, 0xf4, 0x29, 0x29, 0x37, 0x3a, 0x45, 0x9f, 0x92, 0x65, 0x8c, 0x3e,
		0x57, 0xb2, 0x4f, 0x49, 0x7d, 0x0b, 0x5d, 0x4a, 0x4a, 0x1f, 0xf5, 0xf2, 0x5d, 0x9d, 0x8a, 0x5d,
		0xc6, 0x71, 0xd8, 0x80, 0xd5, 0x80, 0xd5, 0x80, 0xd5, 0x80, 0xd5, 0x4e, 0xa3, 0xf7, 0x28, 0xd5,
		0x42, 0xf6, 0x67, 0x27, 0x61, 0xe3, 0x10, 0x6c, 0x57, 0x1e, 0xa1, 0x3a, 0x60, 0xc9, 0x80, 0xfb,
		0x65, 0x38, 0x86, 0xe9, 0xad, 0xe0, 0x1f, 0xe0, 0x1f, 0xe0, 0x1f, 0xe0, 0x1f, 0x1c, 0xca, 0xbb,
		0xa7, 0xee, 0x62, 0x3d, 0xf3, 0x0e, 0x55, 0x3d, 0xbc, 0x21, 0x5c, 0x44, 0x3e, 0x17, 0x31, 0x52,
		0xf4, 0xd9, 0x31, 0xb2, 0xc5, 0xf9, 0x87, 0xa7, 0xf7, 0x81, 0x73, 0x80, 0x73, 0x80, 0x73, 0x80,
		0x73, 0x70, 0x28, 0xef, 0x22, 0x2e, 0xf0, 0x30, 0xec, 0x99, 0x4f, 0xd8, 0x2b, 0x60, 0xec, 0xc9,
		0xdc, 0xfc, 0x49, 0xf8, 0x20, 0xf2, 0x4d, 0x1c, 0x44, 0x6e, 0x78, 0xa3, 0x95, 0x39, 0x95, 0x7f,
		0xd5, 0x8e, 0xde, 0xa6, 0xbf, 0x22, 0x94, 0xd2, 0x8e, 0xcb, 0x31, 0x4f, 0xdb, 0x30, 0x4f, 0x76,
		0xca, 0x80, 0x73, 0xe8, 0x57, 0xeb, 0x1c, 0xfa, 0x55, 0x33, 0xd6, 0x90, 0xcf, 0xd5, 0x92, 0x4f,
		0x6c, 0x27, 0x2f, 0xc1, 0x48, 0xae, 0xce, 0xbf, 0x2e, 0x28, 0xc7, 0xb8, 0x84, 0xdc, 0x62, 0x97,
		0x27, 0xc1, 0x17, 0x9b, 0x4a, 0xec, 0x46, 0x17, 0xf3, 0xcb, 0x4d, 0xbe, 0x11, 0x72, 0x4a, 0x9c,
		0x6b, 0x49, 0x2b, 0x54, 0xc2, 0x1c, 0xc8, 0x56, 0x61, 0x32, 0x95, 0x4f, 0x9a, 0xec, 0x65, 0x20,
		0xc7, 0xfa, 0x57, 0xc6, 0x0a, 0x9b, 0x77, 0xd9, 0x1f, 0x88, 0x6a, 0x07, 0xfa, 0xef, 0xe8, 0xd8,
		0x9d, 0x07, 0xfe, 0xb9, 0x9e, 0x73, 0x20, 0x87, 0x7c, 0xb3, 0x7b, 0x7e, 0xd9, 0x35, 0x9f, 0x5c,
		0x18, 0x7f, 0x5c, 0x18, 0x5f, 0x5c, 0x08, 0x3f, 0xbc, 0x58, 0x8b, 0xec, 0xea, 0x58, 0x9b, 0x8a,
		0xeb, 0x9d, 0xa9, 0x87, 0x1e, 0xd2, 0x4e, 0x19, 0x01, 0xc7, 0x5b, 0x50, 0xce, 0xb7, 0x9e, 0x8a,
		0xd8, 0x72, 0x2a, 0x6e, 0xab, 0xa9, 0xa8, 0x2d, 0xa6, 0xc2, 0xb7, 0x96, 0x0a, 0xdf, 0x52, 0x2a,
		0x74, 0x2b, 0x69, 0xb9, 0xc2, 0x07, 0xe7, 0x5b, 0x46, 0xc5, 0x6e, 0x15, 0x15, 0xb1, 0x45, 0x54,
		0xcc, 0xd6, 0x50, 0xa1, 0x9b, 0x70, 0x85, 0x6e, 0x05, 0x15, 0xc9, 0xb1, 0x16, 0xce, 0xad, 0x92,
		0xdf, 0x60, 0xb8, 0x2c, 0x62, 0xd2, 0xcb, 0x60, 0x0d, 0xe9, 0xcf, 0xfc, 0x32, 0xef, 0xed, 0x17,
		0x6b, 0x4e, 0xb6, 0x61, 0x4e, 0x5e, 0x17, 0x6a, 0x50, 0xe0, 0x2b, 0x41, 0x81, 0x93, 0x37, 0xae,
		0x90, 0xc3, 0xd5, 0x90, 0xc3, 0x25, 0xdd, 0xda, 0xb8, 0x5c, 0x16, 0xa2, 0xdb, 0x01, 0xe1, 0xe5,
		0x45, 0x52, 0xf2, 0x51, 0x89, 0x66, 0x95, 0x75, 0x23, 0xa5, 0x0b, 0x60, 0x37, 0xe6, 0x6f, 0x01,
		0x9e, 0x03, 0x3c, 0x07, 0x78, 0x8e, 0x77, 0xc5, 0x73, 0x14, 0xd1, 0x68, 0xb1, 0x80, 0xc6, 0x8a,
		0x05, 0xb5, 0xa6, 0x28, 0x20, 0x2e, 0x29, 0xb2, 0x15, 0x45, 0xd1, 0x2d, 0x77, 0x0b, 0x6e, 0x3d,
		0x51, 0x46, 0xd7, 0x81, 0x22, 0x1a, 0x3a, 0x17, 0xd9, 0x62, 0xa2, 0xac, 0x25, 0x2d, 0xaf, 0x71,
		0x61, 0x29, 0xab, 0x0c, 0x04, 0x5a, 0x26, 0x02, 0xf5, 0x82, 0x28, 0xe1, 0xc5, 0x22, 0xd0, 0xc9,
		0x2d, 0x80, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81,
		0x40, 0x81, 0x40, 0x81, 0x40, 0x87, 0xf0, 0xb0, 0xc7, 0x44, 0x90, 0xaa, 0x82, 0x31, 0xe8, 0xec,
		0x26, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40,
		0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x43, 0x80, 0x18, 0xc5, 0x5c, 0x16, 0x0b, 0x41, 0xc7, 0x77, 0x00,
		0xfe, 0x04, 0xfe, 0x04, 0xfe, 0x04, 0xfe, 0x04, 0xfe, 0x04, 0xfe, 0x04, 0xfe, 0x04, 0xfe, 0x04,
		0xfe, 0x04, 0xfe, 0x1c, 0xa2, 0xc3, 0xc9, 0x01, 0xdf, 0xc5, 0x42, 0xd0, 0xd9, 0x4d, 0x80, 0x42,
		0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42,
		0xdf, 0x31, 0x0a, 0xe5, 0x4a, 0x45, 0x2a, 0xa9, 0x2a, 0xee, 0x71, 0x71, 0xed, 0xf0, 0x94, 0x98,
		0x99, 0xeb, 0xf9, 0xf1, 0x06, 0x40, 0x9f, 0x40, 0x9f, 0x40, 0x9f, 0x40, 0x9f, 0x40, 0x9f, 0x40,
		0x9f, 0x40, 0x9f, 0x40, 0x9f, 0x40, 0x9f, 0xef, 0x18, 0x7d, 0x86, 0x3c, 0x49, 0x58, 0x9f, 0x17,
		0x89, 0x3f, 0xe7, 0x6f, 0x01, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04,
		0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x9a, 0x54, 0x93, 0xb1, 0x8b, 0x2d, 0x0a, 0x7d,
		0x8e, 0x86, 0x07, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2,
		0x04, 0xf2, 0x04, 0xf2, 0x7c, 0xc7, 0xc8, 0x73, 0x72, 0x84, 0x93, 0x63, 0xc0, 0x39, 0x1a, 0x15,
		0x38, 0x13, 0x38, 0x13, 0x38, 0xf3, 0x5d, 0xe1, 0xcc, 0x44, 0x2b, 0x21, 0xfb, 0x45, 0x9c, 0x69,
		0xb2, 0xbb, 0x42, 0x36, 0x77, 0x92, 0x03, 0xef, 0xde, 0xec, 0x4e, 0x07, 0x86, 0xe5, 0x85, 0xe5,
		0x85, 0xe5, 0x7d, 0x57, 0x96, 0x37, 0x15, 0x52, 0xd7, 0xb6, 0x0b, 0xb0, 0xbc, 0xdb, 0x08, 0xef,
		0x11, 0xde, 0x23, 0xbc, 0x5f, 0x8a, 0x25, 0xdd, 0xde, 0xda, 0x6a, 0x20, 0x9e, 0x5f, 0xdd, 0x78,
		0x1e, 0x47, 0x58, 0xbf, 0x79, 0x84, 0xb5, 0xab, 0xd3, 0xd1, 0x0b, 0x38, 0xc1, 0xda, 0xc1, 0x71,
		0xe8, 0x8b, 0x39, 0xc0, 0x5a, 0x33, 0x8f, 0x79, 0x89, 0xbb, 0x13, 0xac, 0x27, 0xe3, 0x2d, 0xd9,
		0x11, 0xd6, 0x1b, 0x38, 0xc2, 0x7a, 0x09, 0xa2, 0x0a, 0x1c, 0x61, 0x9d, 0xfd, 0x8d, 0x9c, 0x1d,
		0x61, 0xed, 0x4d, 0x75, 0xc0, 0x7d, 0x5d, 0xff, 0x70, 0x5c, 0xb7, 0x74, 0x43, 0x0d, 0x74, 0x03,
		0xe8, 0x06, 0xd0, 0x0d, 0x2e, 0xde, 0xd4, 0x95, 0x01, 0x99, 0x0d, 0x18, 0x47, 0x4a, 0xbb, 0x17,
		0xa9, 0xa9, 0x12, 0x8c, 0x46, 0x77, 0xbc, 0xd8, 0x07, 0xbc, 0xc7, 0xd2, 0x60, 0xb4, 0xd6, 0x9b,
		0x7b, 0xae, 0x07, 0x2f, 0x26, 0xec, 0x73, 0x6e, 0xb9, 0x8a, 0xb4, 0x60, 0xc5, 0x5b, 0xb2, 0xa2,
		0x2d, 0x5a, 0x69, 0x96, 0xad, 0x34, 0x0b, 0x57, 0x8a, 0xa5, 0x2b, 0x28, 0xa8, 0x77, 0x2c, 0xf1,
		0xce, 0x09, 0xd7, 0x67, 0x8d, 0x56, 0x55, 0xa6, 0x61, 0x97, 0xab, 0x02, 0x0f, 0x88, 0xde, 0x2e,
		0x60, 0xe8, 0x62, 0xd8, 0xd8, 0xe9, 0x7f, 0xc5, 0x28, 0xe9, 0x5a, 0xd1, 0xec, 0x6c, 0x49, 0x94,
		0xde, 0x1c, 0xb5, 0x57, 0xf4, 0x7d, 0x4a, 0xa0, 0xf7, 0x0a, 0xd2, 0xe1, 0xa7, 0x4b, 0x5f, 0x20,
		0x8b, 0xbb, 0xa8, 0xa5, 0x2f, 0x90, 0xd5, 0x5d, 0xc8, 0xf2, 0x7f, 0xa0, 0x31, 0xea, 0xb2, 0x9e,
		0x33, 0xed, 0x50, 0x7d, 0x2a, 0x09, 0xf7, 0x14, 0xd7, 0xd5, 0xef, 0xfc, 0xae, 0x38, 0xd4, 0xfe,
		0xe8, 0x1e, 0x80, 0xd7, 0x80, 0xd7, 0x80, 0xd7, 0x80, 0xd7, 0x0e, 0xe5, 0x5d, 0x45, 0xa9, 0x16,
		0xb2, 0x5f, 0x8d, 0x59, 0x92, 0x8c, 0xc4, 0xa7, 0x38, 0x8c, 0xed, 0x28, 0xc7, 0x8c, 0x8a, 0x47,
		0xa8, 0x0e, 0x58, 0x32, 0x70, 0xd8, 0xeb, 0xe0, 0x15, 0xc7, 0x30, 0xbd, 0x15, 0xfc, 0x03, 0xfc,
		0x03, 0xfc, 0x03, 0xfc, 0x83, 0x43, 0x79, 0xf7, 0xd4, 0x5d, 0xac, 0x67, 0xde, 0xa1, 0xaa, 0x87,
		0x37, 0x84, 0x8b, 0xc8, 0xe7, 0x22, 0x46, 0x8a, 0x5e, 0x65, 0xbe, 0xaf, 0x78, 0x92, 0x14, 0xe8,
		0x1f, 0x9e, 0xde, 0x07, 0xce, 0x01, 0xce, 0x01, 0xce, 0x01, 0xce, 0xc1, 0xa1, 0xbc, 0x8b, 0xb8,
		0x20, 0xeb, 0xf2, 0xc4, 0x27, 0xec, 0x15, 0x30, 0xf6, 0x64, 0x6e, 0xc8, 0x51, 0xf3, 0x0f, 0x33,
		0x7f, 0xbd, 0x59, 0xe0, 0xdc, 0xcf, 0xfb, 0xe5, 0x02, 0xef, 0xd1, 0x66, 0x5a, 0x73, 0x25, 0x0b,
		0x5b, 0x8e, 0xd9, 0x8d, 0xfe, 0xe7, 0xa7, 0x9f, 0xfe, 0xdc, 0xa8, 0xee, 0x5d, 0xfe, 0xfb, 0x67,
		0xad, 0xba, 0x77, 0x39, 0xfe, 0x58, 0x1b, 0xfd, 0x18, 0x7f, 0xae, 0xff, 0xb9, 0x51, 0xdd, 0x9c,
		0x7e, 0xde, 0xfa, 0x73, 0xa3, 0xba, 0x75, 0xf9, 0xf3, 0x5f, 0x7f, 0xfd, 0xf2, 0xf3, 0x3f, 0x8d,
		0x7b, 0xf3, 0x0b, 0xff, 0xab, 0x52, 0xd8, 0xcb, 0x5c, 0x16, 0xb9, 0x18, 0x67, 0x9d, 0xd6, 0x1f,
		0x58, 0x11, 0xd3, 0x15, 0x29, 0x86, 0x93, 0xff, 0x48, 0xd8, 0x3c, 0x6d, 0xc3, 0x3c, 0xd9, 0x29,
		0x03, 0xab, 0xf6, 0x9a, 0xd5, 0xa3, 0xcb, 0x7f, 0x6a, 0x1f, 0x37, 0xef, 0x3f, 0xfd, 0xfc, 0xcf,
		0xce, 0xfd, 0x8f, 0x7f, 0xfc, 0xf7, 0xb9, 0xaf, 0xd5, 0x3e, 0xee, 0xdc, 0x7f, 0x7a, 0xe1, 0x5f,
		0xb6, 0xef, 0x3f, 0x65, 0x1c, 0x63, 0xeb, 0xfe, 0xa7, 0xb9, 0xaf, 0x0e, 0xff, 0x5e, 0x7f, 0xe9,
		0x82, 0xcd, 0x17, 0x2e, 0x68, 0xbc, 0x74, 0x41, 0xe3, 0x85, 0x0b, 0x5e, 0x7c, 0xa4, 0xfa, 0x0b,
		0x17, 0x6c, 0xdd, 0xff, 0x3b, 0xf7, 0xfd, 0x9f, 0x9e, 0xff, 0xea, 0xf6, 0xfd, 0xcf, 0xff, 0xbe,
		0xf4, 0x6f, 0x3b, 0xf7, 0xff, 0x7e, 0xfa, 0x19, 0xc6, 0x1a, 0xf2, 0xf9, 0x6e, 0xe5, 0x13, 0xdb,
		0xc9, 0x4b, 0x30, 0x92, 0xab, 0x8c, 0x54, 0xc7, 0x45, 0x46, 0x0f, 0x9c, 0x55, 0x21, 0xc5, 0x46,
		0xe3, 0x42, 0x96, 0x75, 0xa7, 0x69, 0xee, 0x6b, 0xc5, 0x14, 0x1f, 0x5d, 0x8c, 0x1e, 0xf5, 0x6a,
		0x42, 0x4f, 0xad, 0x50, 0xb3, 0x84, 0x71, 0xc1, 0x97, 0xf3, 0xd2, 0x05, 0x57, 0x75, 0x64, 0x6b,
		0x45, 0x56, 0x2e, 0xd4, 0x51, 0xb9, 0x40, 0x88, 0x43, 0x44, 0xe5, 0x02, 0x2a, 0x17, 0x1c, 0x8e,
		0x8d, 0xca, 0x85, 0x62, 0x2d, 0x58, 0xf1, 0x96, 0xac, 0x68, 0x8b, 0x56, 0x9a, 0x65, 0x2b, 0xcd,
		0xc2, 0x95, 0x62, 0xe9, 0x8a, 0x89, 0x01, 0x50, 0xb9, 0xf0, 0xbc, 0x89, 0x41, 0xe5, 0xc2, 0xa3,
		0x07, 0x47, 0xe5, 0x82, 0xf9, 0x7d, 0x50, 0xb9, 0xb0, 0xb4, 0x4b, 0x8f, 0xca, 0x05, 0x50, 0x4d,
		0xc5, 0xa8, 0x0f, 0x2a, 0x17, 0x00, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x09, 0xc3, 0x6b, 0x54, 0x2e,
		0xa0, 0x72, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0xe1, 0x39, 0x79, 0x47, 0xe5, 0x82,
		0x7b, 0x17, 0x81, 0xca, 0x05, 0x38, 0x07, 0x38, 0x07, 0x38, 0x07, 0xf2, 0xce, 0x01, 0x95, 0x0b,
		0xcf, 0xfe, 0x87, 0xca, 0x05, 0x33, 0xcb, 0x8c, 0x3c, 0x79, 0xb3, 0xff, 0x50, 0xb9, 0x80, 0xca,
		0x85, 0xa5, 0x37, 0x4f, 0xa8, 0x5c, 0xb0, 0x54, 0x06, 0x64, 0x86, 0xa3, 0x72, 0x61, 0x99, 0x8d,
		0x35, 0xe4, 0x13, 0x95, 0x0b, 0x25, 0x47, 0x46, 0x6b, 0xa8, 0x5c, 0xc8, 0x1a, 0xf5, 0x52, 0xac,
		0x5c, 0x70, 0x99, 0xe5, 0xbe, 0x56, 0x68, 0xe1, 0x82, 0x83, 0xc3, 0x53, 0xdc, 0xc9, 0x0d, 0x0e,
		0xe2, 0xc9, 0x2a, 0x61, 0xcb, 0x79, 0x12, 0xcf, 0x58, 0xa6, 0x16, 0x76, 0x14, 0xcf, 0x87, 0x12,
		0xa5, 0xa6, 0xf2, 0xdb, 0x28, 0x43, 0xa6, 0x92, 0x2f, 0x24, 0xa8, 0x1c, 0x8b, 0x44, 0x37, 0xb5,
		0xce, 0x97, 0x74, 0x5f, 0x39, 0x11, 0xf2, 0x30, 0xe0, 0x21, 0x97, 0xe3, 0x44, 0xad, 0x1c, 0x47,
		0x12, 0x9d, 0xb0, 0xdb, 0x47, 0x23, 0xb9, 0x3d, 0xd6, 0xbc, 0x72, 0xa6, 0x7c, 0xae, 0xb8, 0xff,
		0x79, 0x38, 0x71, 0x32, 0x0d, 0x82, 0x52, 0xd7, 0xcb, 0x91, 0x76, 0x17, 0xa3, 0xd5, 0x39, 0xd4,
		0xd9, 0xbd, 0x1a, 0xdb, 0xe9, 0xaf, 0xb9, 0xf6, 0x99, 0x5d, 0x61, 0xb8, 0xee, 0x79, 0xd7, 0xdb,
		0xf1, 0x3a, 0x5b, 0x2c, 0xb0, 0xc3, 0x85, 0x35, 0x5b, 0xd1, 0xec, 0xeb, 0x62, 0xb0, 0x26, 0x96,
		0xf5, 0x84, 0xb9, 0xea, 0x06, 0x2d, 0xeb, 0x03, 0xad, 0xeb, 0x00, 0xf3, 0xec, 0xc8, 0xe5, 0xdf,
		0x71, 0xcb, 0xbb, 0xa3, 0xe6, 0x6c, 0xc7, 0xcc, 0xd9, 0x8e, 0x98, 0x93, 0x1d, 0xaf, 0x62, 0xad,
		0x8c, 0x6d, 0xbd, 0x5c, 0x65, 0xa2, 0xd6, 0x96, 0x4b, 0x35, 0x15, 0x96, 0xd1, 0x28, 0xb6, 0x00,
		0x26, 0xd7, 0x76, 0x77, 0xee, 0x6d, 0x6d, 0x17, 0xdb, 0xd7, 0xee, 0xb6, 0xa9, 0x5d, 0x6d, 0x47,
		0x3b, 0xdf, 0x76, 0x76, 0xbe, 0xbd, 0xec, 0x74, 0x1b, 0xb9, 0x5c, 0xc8, 0x9d, 0x7b, 0xfb, 0xf7,
		0x91, 0x37, 0x51, 0x42, 0xe6, 0xe9, 0x2c, 0x90, 0x33, 0xbd, 0xc7, 0x02, 0x2c, 0x59, 0x38, 0x04,
		0x9d, 0x67, 0xbe, 0x1e, 0x4e, 0x15, 0xb5, 0x4f, 0x90, 0x82, 0x8d, 0x81, 0x8d, 0x79, 0xb7, 0x36,
		0x46, 0xf8, 0x5c, 0x6a, 0xa1, 0xef, 0x14, 0xef, 0xb9, 0x30, 0x34, 0x79, 0x02, 0xef, 0xd6, 0xe4,
		0x51, 0x3e, 0xb3, 0x84, 0xbb, 0x3b, 0x6e, 0xb8, 0xd9, 0x6c, 0x5e, 0x75, 0x0e, 0xcf, 0xbf, 0x1d,
		0x9e, 0x5f, 0x5d, 0xfc, 0xa7, 0x7d, 0x98, 0x57, 0x08, 0x47, 0xc5, 0x6d, 0x89, 0x93, 0x4d, 0x1f,
		0xc7, 0x3d, 0x4b, 0x2e, 0x9a, 0xfb, 0xcd, 0xfd, 0x4e, 0x65, 0x19, 0xda, 0xb2, 0x38, 0x7e, 0xb3,
		0xf3, 0xe6, 0x41, 0xeb, 0x6b, 0x67, 0xd1, 0xe7, 0xf5, 0x5e, 0x96, 0x6d, 0x1b, 0x40, 0x55, 0x3c,
		0x4b, 0x55, 0x58, 0x6e, 0x5a, 0x38, 0x21, 0x2a, 0xcc, 0xb7, 0x21, 0x0c, 0x68, 0x8a, 0x0f, 0x0e,
		0x57, 0x6d, 0x4a, 0xfc, 0x1a, 0x84, 0x5e, 0x76, 0x2c, 0xaf, 0x3d, 0xab, 0xeb, 0x94, 0xc5, 0xb5,
		0x63, 0x6d, 0xb3, 0x4e, 0xa6, 0xa5, 0xe8, 0x3b, 0x12, 0xf9, 0x8a, 0x11, 0x7f, 0x95, 0x57, 0xc8,
		0xb3, 0x89, 0xf7, 0xdb, 0xc2, 0xfa, 0xfa, 0x37, 0xde, 0x98, 0x79, 0xd3, 0x19, 0xb7, 0x9f, 0xe9,
		0x0c, 0x93, 0x6b, 0x39, 0xa9, 0xaf, 0x4f, 0xe4, 0xcb, 0xd3, 0xf3, 0xca, 0xd4, 0x64, 0xa4, 0x27,
		0x8d, 0xe8, 0xc8, 0x8c, 0xf4, 0x63, 0x66, 0xba, 0xd1, 0x24, 0x9a, 0x31, 0x8f, 0x5a, 0x4c, 0xa3,
		0x13, 0xeb, 0x28, 0xc4, 0x3a, 0xda, 0xb0, 0x8a, 0x2a, 0x96, 0x58, 0x59, 0x32, 0xba, 0x5b, 0x13,
		0x25, 0x79, 0xdb, 0x8b, 0xbe, 0xa2, 0x1d, 0x1f, 0x0c, 0x66, 0x28, 0xeb, 0xcc, 0x98, 0xcc, 0x48,
		0xe5, 0x55, 0xf5, 0xcc, 0x38, 0x07, 0xcf, 0xbf, 0xfd, 0xfc, 0xbb, 0x3d, 0xf3, 0x5e, 0x15, 0x16,
		0x30, 0x15, 0xbe, 0x5c, 0xbe, 0x34, 0xd3, 0xa9, 0xc9, 0xf7, 0x5e, 0x98, 0x99, 0xd7, 0xb5, 0xfe,
		0x4d, 0x6d, 0xcf, 0xa2, 0xe5, 0x4f, 0xb4, 0xfb, 0xb5, 0x87, 0x31, 0x51, 0x6c, 0x63, 0x85, 0x36,
		0x56, 0xe4, 0x39, 0x05, 0x1e, 0x3f, 0xba, 0x23, 0x89, 0x7c, 0x8b, 0x8a, 0x1f, 0x2f, 0x5b, 0x76,
		0x13, 0x3f, 0xfe, 0xba, 0x63, 0x13, 0xbf, 0x51, 0x90, 0x89, 0x7f, 0x4b, 0x08, 0x08, 0x5b, 0xf9,
		0x37, 0x84, 0xc4, 0x8d, 0xa1, 0xcf, 0xba, 0x8f, 0x53, 0xf1, 0xa6, 0x2b, 0x99, 0x71, 0xfe, 0x66,
		0x55, 0xa7, 0x26, 0xbd, 0x6c, 0x0d, 0x37, 0x2e, 0x8d, 0x79, 0x52, 0x1b, 0x5e, 0xd4, 0x4a, 0xdc,
		0xf2, 0x52, 0x9f, 0xb9, 0xa9, 0xce, 0xdc, 0xd4, 0xa6, 0xad, 0x38, 0x16, 0x13, 0x7b, 0x16, 0x1e,
		0x2e, 0x8d, 0xde, 0x6e, 0xfc, 0xc3, 0xbc, 0xfd, 0x72, 0x56, 0x2f, 0x3d, 0xba, 0xc9, 0xf8, 0x87,
		0x51, 0xe3, 0xe4, 0x0c, 0xa1, 0x51, 0x06, 0x0b, 0x28, 0x7c, 0x73, 0xed, 0x15, 0xbe, 0xa1, 0xe6,
		0x6e, 0x40, 0x73, 0xa1, 0xb9, 0xb9, 0xf6, 0x15, 0x66, 0xab, 0x16, 0x70, 0xd6, 0x33, 0xdb, 0x43,
		0x98, 0xb9, 0x8f, 0x1d, 0x83, 0x6b, 0xda, 0x13, 0xe3, 0xf0, 0xcb, 0x2f, 0xe3, 0xc8, 0x64, 0x5d,
		0xf8, 0x65, 0x6a, 0xa5, 0x59, 0x7a, 0x90, 0x55, 0x5a, 0x90, 0xb5, 0x57, 0xad, 0x43, 0x37, 0x57,
		0x5a, 0x37, 0x4d, 0x93, 0x78, 0x4c, 0x5c, 0x88, 0xbd, 0x2b, 0xb1, 0x74, 0x29, 0xd6, 0xae, 0x25,
		0x8f, 0x18, 0x3b, 0x11, 0xe7, 0xbc, 0x62, 0xed, 0x4c, 0xbc, 0x9d, 0x89, 0xb9, 0x2b, 0x71, 0x37,
		0xdf, 0xf2, 0x58, 0xb3, 0xd8, 0x86, 0xb2, 0xde, 0xfa, 0xce, 0x9f, 0x56, 0x63, 0x99, 0x4e, 0x53,
		0x4c, 0xa6, 0xaa, 0xe2, 0x89, 0xa5, 0x5d, 0x9d, 0xb5, 0xa0, 0x9b, 0x8e, 0x00, 0x4d, 0x87, 0xa6,
		0x43, 0xd3, 0x97, 0x56, 0xd3, 0x13, 0x7e, 0xcd, 0x95, 0xd0, 0x77, 0x39, 0xd2, 0xd2, 0xa7, 0x23,
		0x40, 0xd3, 0xa1, 0xe9, 0x2b, 0xa9, 0xe9, 0xf9, 0xd2, 0xd8, 0xf2, 0xa4, 0xaf, 0xb9, 0x49, 0x5b,
		0x9b, 0xbd, 0xc8, 0x59, 0xfb, 0xf0, 0x74, 0xff, 0xec, 0xf4, 0xa8, 0xf5, 0xe5, 0xaa, 0x79, 0xdc,
		0x3c, 0x3f, 0xb9, 0xea, 0x1c, 0x7e, 0x3b, 0x3c, 0x6f, 0x5d, 0xfc, 0xc7, 0x56, 0x92, 0x1c, 0x24,
		0xac, 0x39, 0xca, 0xc4, 0xfb, 0x7a, 0xfa, 0xdb, 0xe9, 0xd9, 0xef, 0xa7, 0x39, 0x72, 0x2c, 0x3f,
		0x2e, 0xfa, 0x15, 0x4e, 0x9a, 0xff, 0xf7, 0xec, 0x9c, 0xf2, 0x0b, 0xfc, 0xde, 0x3c, 0x3f, 0x6d,
		0x9d, 0x7e, 0xa1, 0xfc, 0x0a, 0xfb, 0xe7, 0xad, 0x8b, 0xd6, 0x7e, 0xf3, 0x98, 0xb4, 0x1c, 0xb5,
		0x4e, 0x73, 0xc9, 0x91, 0xd5, 0x95, 0x97, 0x45, 0x5b, 0xfd, 0x42, 0xd0, 0x8f, 0xe6, 0xb7, 0xda,
		0x1e, 0xf9, 0x8c, 0xae, 0x06, 0xea, 0x01, 0xea, 0x41, 0x7c, 0xb3, 0xb4, 0xf1, 0x8d, 0x16, 0x21,
		0xaf, 0x7a, 0x8a, 0x33, 0xcd, 0x73, 0x30, 0x96, 0x4f, 0x46, 0x81, 0xc6, 0x43, 0xe3, 0x57, 0x52,
		0xe3, 0x87, 0x52, 0xae, 0x85, 0xf7, 0x3d, 0xd9, 0xde, 0xcc, 0xa1, 0xf6, 0x16, 0x6d, 0xfb, 0x2a,
		0x5f, 0xe5, 0xf8, 0x80, 0xa5, 0x8a, 0x64, 0x32, 0x4a, 0xb8, 0x17, 0x49, 0xdf, 0x4a, 0xf4, 0xf2,
		0x9d, 0xce, 0x96, 0xaf, 0xfd, 0x88, 0x83, 0xa2, 0x36, 0x27, 0xdd, 0xb7, 0x5d, 0x9d, 0x8e, 0xe6,
		0xf2, 0xf8, 0xab, 0xfb, 0x7c, 0xfd, 0x58, 0x96, 0x6e, 0x6a, 0xdd, 0x76, 0x85, 0x71, 0x3e, 0xdb,
		0x25, 0x95, 0x04, 0x5d, 0x2e, 0x83, 0x7f, 0xbf, 0x8b, 0x79, 0x35, 0xcf, 0x66, 0xe4, 0x74, 0x00,
		0x78, 0x75, 0x78, 0xf5, 0x95, 0xf4, 0xea, 0xa9, 0x14, 0x91, 0xcc, 0x03, 0xe3, 0x2d, 0x5a, 0xb5,
		0xe7, 0x6b, 0xc5, 0xbe, 0x0a, 0xdd, 0x0d, 0x3e, 0x2e, 0xea, 0xcd, 0x57, 0xbe, 0xe6, 0x7a, 0x8e,
		0xc4, 0xbe, 0xf8, 0x4f, 0xfb, 0xf0, 0xaa, 0x75, 0xb0, 0xba, 0xc5, 0xd7, 0xcd, 0xd6, 0x4a, 0x56,
		0x5e, 0x1f, 0x9f, 0xad, 0xe4, 0x6b, 0x9d, 0x5d, 0xac, 0xe4, 0x6b, 0x1d, 0xfe, 0x7f, 0xdb, 0x17,
		0xa8, 0x92, 0x5f, 0x18, 0x24, 0xa6, 0x9b, 0x43, 0x6f, 0x5a, 0x53, 0x6f, 0x93, 0x42, 0x6f, 0x50,
		0x3b, 0x5f, 0x74, 0x71, 0xf1, 0xa4, 0x36, 0xfe, 0xcd, 0x88, 0xc2, 0xac, 0x22, 0xde, 0xbc, 0x12,
		0xde, 0x49, 0x05, 0xbc, 0x59, 0xe5, 0xfb, 0xc2, 0x4a, 0x49, 0x1f, 0x89, 0x9b, 0xc3, 0x6a, 0xd2,
		0x47, 0x02, 0x46, 0xb4, 0xa0, 0xf4, 0xcd, 0xba, 0x48, 0x93, 0x99, 0xc8, 0x53, 0x56, 0xea, 0x05,
		0x91, 0xf7, 0xfd, 0xed, 0xaa, 0xd2, 0xf1, 0xd7, 0x72, 0x16, 0x95, 0x6e, 0xb8, 0x29, 0x2a, 0x4d,
		0xee, 0x68, 0x56, 0x94, 0x0e, 0x9f, 0xbb, 0xac, 0x72, 0xd2, 0x8c, 0x95, 0x80, 0x66, 0x15, 0x80,
		0xcb, 0x52, 0x50, 0xfa, 0xba, 0x00, 0xd8, 0xf2, 0x22, 0x8b, 0xaf, 0x26, 0x7d, 0x55, 0x40, 0xdc,
		0xf8, 0xc0, 0xcc, 0xa5, 0xa4, 0x5a, 0x84, 0xfc, 0x7f, 0x23, 0xc9, 0xab, 0x46, 0xbd, 0x40, 0x9f,
		0x6c, 0x58, 0x3c, 0x5c, 0xbe, 0x1a, 0xe5, 0x69, 0xd9, 0xc4, 0x2e, 0x2f, 0x2d, 0xb7, 0x7c, 0xf5,
		0x2f, 0x99, 0xc4, 0xb2, 0x18, 0x38, 0x6c, 0x5f, 0x98, 0xf6, 0x44, 0x00, 0x4d, 0xcf, 0xd1, 0x35,
		0xa4, 0x98, 0xa8, 0x76, 0xc5, 0x19, 0x39, 0xf5, 0xec, 0x95, 0xb4, 0x19, 0x31, 0xc9, 0xfe, 0x70,
		0xd4, 0x4c, 0xa5, 0xb3, 0x68, 0x86, 0x03, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7,
		0x56, 0x80, 0x63, 0x73, 0xdc, 0xc3, 0x6a, 0xec, 0xd7, 0x08, 0x77, 0xb1, 0x7a, 0x2d, 0x86, 0x37,
		0x9d, 0x87, 0x5c, 0x94, 0xc3, 0xeb, 0xb1, 0x69, 0xb6, 0x98, 0x14, 0xa4, 0xc3, 0xf2, 0x91, 0x0e,
		0x7e, 0x14, 0x32, 0x21, 0xb3, 0x39, 0xd6, 0xd9, 0xdc, 0x3e, 0xbe, 0x28, 0x1b, 0x4a, 0xdb, 0x00,
		0xfd, 0x40, 0x15, 0xa5, 0x65, 0x76, 0x7b, 0x16, 0xe2, 0xb1, 0x66, 0x78, 0x42, 0x71, 0xe5, 0x98,
		0xcb, 0xfe, 0xc8, 0x66, 0x66, 0xdb, 0x56, 0x36, 0x6b, 0x8e, 0x6b, 0x01, 0x8f, 0xec, 0xf2, 0x96,
		0x66, 0x89, 0x6f, 0x86, 0xd7, 0xe5, 0xc8, 0x6a, 0xbb, 0x37, 0xeb, 0xf6, 0x5b, 0xfa, 0x54, 0xd4,
		0xb7, 0x1a, 0x25, 0x4e, 0x86, 0x23, 0x24, 0x95, 0xe1, 0xe0, 0x62, 0xe3, 0xb3, 0xb1, 0x2b, 0xff,
		0xf3, 0xd3, 0x4f, 0x3f, 0xfd, 0xf4, 0x27, 0xab, 0xfe, 0x6f, 0xb3, 0xfa, 0xff, 0x36, 0xaa, 0x7b,
		0x57, 0x97, 0x8f, 0x7e, 0xf9, 0xeb, 0xaf, 0xea, 0xd5, 0xe5, 0xcf, 0xff, 0x6c, 0x7c, 0xdc, 0xae,
		0xdd, 0xff, 0xfc, 0xdf, 0x0f, 0x7f, 0xbf, 0xfc, 0xeb, 0xaf, 0x5f, 0x7e, 0xfe, 0x3f, 0x36, 0x57,
		0xfd, 0xf7, 0xcf, 0xff, 0x0e, 0xaf, 0xcd, 0x70, 0x7a, 0x6e, 0xa6, 0x97, 0xb5, 0x39, 0x6d, 0x79,
		0x79, 0xdf, 0xb8, 0x00, 0x26, 0x64, 0x10, 0x25, 0xda, 0xcc, 0xd9, 0xce, 0xae, 0x80, 0xa7, 0x85,
		0xa7, 0x85, 0xa7, 0x85, 0xa7, 0x85, 0xa7, 0x85, 0xa7, 0x85, 0xa7, 0x7d, 0xd3, 0xd3, 0x06, 0x51,
		0x5f, 0xc8, 0x6a, 0x97, 0x49, 0xc9, 0x55, 0x76, 0x6f, 0xfb, 0xe4, 0x2a, 0x78, 0x5c, 0x78, 0xdc,
		0x1f, 0xe6, 0x3b, 0x73, 0x2a, 0x7c, 0x46, 0xda, 0xd6, 0x4e, 0xb6, 0xc3, 0x48, 0xfb, 0xc6, 0xa2,
		0xfd, 0xf8, 0x22, 0x48, 0x36, 0x24, 0x7b, 0x71, 0x92, 0xbd, 0x58, 0x4a, 0xfd, 0xad, 0xbd, 0xf3,
		0xac, 0x9c, 0xfa, 0x2b, 0xbb, 0xe5, 0x19, 0x49, 0xf5, 0x38, 0xcd, 0x70, 0x38, 0xc4, 0xe8, 0x5b,
		0xcb, 0x71, 0x34, 0x04, 0x08, 0xf5, 0x0c, 0x59, 0x7c, 0x71, 0x6a, 0x90, 0xc2, 0x17, 0xa7, 0xc8,
		0xdf, 0x43, 0x9a, 0xc3, 0xe4, 0x8b, 0x42, 0xfa, 0xfc, 0xd6, 0xa2, 0x97, 0xfc, 0xe8, 0x32, 0xa4,
		0x35, 0x98, 0x84, 0xd0, 0x48, 0x6b, 0x30, 0x47, 0x0a, 0xf3, 0xb1, 0xd2, 0xa2, 0x1a, 0xc9, 0x8f,
		0x04, 0x1e, 0xbd, 0xe4, 0xa1, 0x98, 0x2b, 0xad, 0x98, 0xc6, 0x5d, 0xe4, 0x07, 0x4c, 0xf9, 0x37,
		0x4c, 0xf1, 0xaa, 0x90, 0x9a, 0x2b, 0x95, 0xc6, 0x39, 0xba, 0xb1, 0x3d, 0x33, 0x96, 0x5d, 0x4f,
		0x87, 0x1a, 0xb1, 0x9e, 0x0e, 0x66, 0x82, 0x9e, 0x57, 0xe0, 0x9d, 0x09, 0xbe, 0x33, 0x05, 0x70,
		0xa2, 0x08, 0x66, 0x0a, 0x61, 0xc1, 0x9c, 0x5b, 0x29, 0xc8, 0xec, 0x42, 0x76, 0xdd, 0xcf, 0xdf,
		0xfe, 0x75, 0x38, 0x88, 0xe5, 0xd4, 0xe6, 0xeb, 0x9f, 0x63, 0xad, 0x22, 0x2e, 0x54, 0xe5, 0x39,
		0x95, 0xd1, 0x77, 0x31, 0x4f, 0xf2, 0xb4, 0x47, 0xc8, 0xa9, 0x3c, 0xce, 0x95, 0xc8, 0xb9, 0x32,
		0xbd, 0xa4, 0x54, 0xe3, 0x99, 0x2b, 0xbb, 0x0e, 0xdb, 0x52, 0x6a, 0xac, 0x9b, 0xa7, 0xcc, 0xc9,
		0x4c, 0xcc, 0x95, 0xc7, 0xa5, 0x66, 0x7d, 0xee, 0xa0, 0xa9, 0x46, 0x9e, 0x9e, 0x1a, 0xf9, 0x3a,
		0x9c, 0x4d, 0xff, 0xcb, 0xdf, 0x1b, 0xc0, 0x49, 0xc7, 0x33, 0x47, 0xe6, 0x65, 0x6e, 0x38, 0x47,
		0x1d, 0xd0, 0x66, 0xe3, 0x39, 0xec, 0xcd, 0x95, 0x53, 0xa4, 0x9f, 0x2e, 0x81, 0x83, 0xce, 0x68,
		0x45, 0x2f, 0x41, 0x6d, 0x63, 0x99, 0x17, 0xe1, 0xc3, 0x62, 0xae, 0xbe, 0x2c, 0xa9, 0x1b, 0x85,
		0x85, 0x90, 0x55, 0x84, 0x4c, 0x34, 0x93, 0x3a, 0x3f, 0xda, 0x98, 0x0e, 0x04, 0xc4, 0x01, 0xc4,
		0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0xf1, 0x0c, 0xe2, 0xd0,
		0x5c, 0x5d, 0xb3, 0xc0, 0x05, 0xe4, 0x98, 0x8c, 0x04, 0xcc, 0x01, 0xcc, 0x01, 0xcc, 0x61, 0x2c,
		0x33, 0x89, 0x66, 0xba, 0x9a, 0x53, 0x89, 0xd6, 0xf2, 0xb5, 0x82, 0x9f, 0x0d, 0xe1, 0xa8, 0x25,
		0x3c, 0x60, 0x0c, 0x60, 0x0c, 0x4d, 0x18, 0xe3, 0xbc, 0xc5, 0x3c, 0x70, 0x4d, 0xb9, 0xb8, 0x26,
		0xcc, 0x21, 0x65, 0x0f, 0x29, 0xb0, 0xec, 0x16, 0x68, 0x06, 0x68, 0x06, 0x68, 0x06, 0x0c, 0x0a,
		0xa0, 0x07, 0xa0, 0x07, 0x18, 0x14, 0x20, 0x8d, 0x67, 0x91, 0x46, 0x55, 0x8b, 0x90, 0x3b, 0x81,
		0x1b, 0xe3, 0x91, 0x80, 0x39, 0x80, 0x39, 0x80, 0x39, 0x8c, 0x65, 0x26, 0xdf, 0x11, 0x7a, 0xe0,
		0x4f, 0x00, 0x62, 0x00, 0x62, 0xc0, 0x9f, 0x00, 0xd5, 0x8c, 0x50, 0x4d, 0x0e, 0x45, 0x7f, 0x00,
		0x34, 0x42, 0x02, 0xcb, 0x00, 0xcb, 0x00, 0xcb, 0x80, 0x3f, 0x01, 0xf4, 0x00, 0xf4, 0x00, 0x7f,
		0x02, 0xa4, 0xf1, 0x2c, 0xd2, 0x70, 0xc5, 0x9f, 0x4c, 0x47, 0x02, 0xe6, 0x00, 0xe6, 0x00, 0xe6,
		0x00, 0x7f, 0x02, 0x10, 0x03, 0x10, 0x03, 0xfe, 0x04, 0xa8, 0x26, 0x2f, 0xaa, 0x29, 0xb4, 0x2c,
		0xd9, 0xf2, 0x3c, 0xd8, 0xd9, 0xf5, 0x99, 0x1b, 0x59, 0xc5, 0x69, 0x32, 0xfc, 0xbf, 0x49, 0x57,
		0x8c, 0xdc, 0x15, 0xfb, 0x6b, 0x06, 0xbd, 0xaf, 0xe2, 0x34, 0x19, 0xfe, 0xdf, 0xf8, 0x68, 0x8d,
		0xab, 0x5f, 0x27, 0xb7, 0x6e, 0xcd, 0xee, 0x5c, 0xd4, 0xc1, 0xbd, 0x06, 0x2d, 0x28, 0x84, 0x1f,
		0x70, 0xfb, 0xfe, 0x07, 0xa3, 0xab, 0xd1, 0xf1, 0xa0, 0x38, 0x30, 0x89, 0x8e, 0x07, 0xe8, 0x78,
		0x80, 0x48, 0x0c, 0x91, 0xd8, 0xfb, 0x88, 0xc4, 0xc0, 0xfe, 0x22, 0x70, 0x42, 0xe0, 0x64, 0x13,
		0x38, 0x81, 0xfd, 0x5d, 0x60, 0x9c, 0x84, 0x8e, 0x07, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40,
		0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x4b, 0x8a, 0x38, 0xd0, 0xf1, 0x00, 0x98, 0x03, 0x98,
		0x03, 0x1d, 0x0f, 0x1e, 0x0f, 0x81, 0x1d, 0x67, 0xc0, 0x98, 0x77, 0x0d, 0x63, 0xb0, 0xe3, 0x4c,
		0x1c, 0xd7, 0xa0, 0xe3, 0x01, 0xd0, 0x0c, 0xd0, 0x0c, 0x18, 0x14, 0x40, 0x0f, 0x40, 0x0f, 0x30,
		0x28, 0x40, 0x1a, 0x85, 0x22, 0x0d, 0x74, 0x3c, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0xc6, 0x3e, 0xf8,
		0x13, 0x80, 0x18, 0x80, 0x18, 0xf0, 0x27, 0xab, 0x80, 0x6a, 0xd0, 0xf1, 0x00, 0x58, 0x06, 0x58,
		0x06, 0xfc, 0x09, 0xa0, 0x07, 0xa0, 0x07, 0xf8, 0x13, 0x20, 0x8d, 0x22, 0x91, 0x06, 0x3a, 0x1e,
		0x00, 0x73, 0x00, 0x73, 0x80, 0x3f, 0x01, 0x7f, 0x02, 0x10, 0x03, 0x10, 0x03, 0xfe, 0x64, 0xd9,
		0x50, 0xcd, 0x2a, 0x76, 0x3c, 0xb0, 0xa8, 0xd1, 0x5f, 0xb3, 0xee, 0x71, 0xd0, 0x1a, 0xde, 0x6c,
		0x19, 0xda, 0x1a, 0x48, 0x9f, 0xdf, 0xe6, 0xe8, 0x6b, 0x30, 0xba, 0xdc, 0xae, 0xb1, 0xc1, 0x06,
		0x1a, 0x1b, 0x94, 0x89, 0x15, 0xdf, 0x53, 0x63, 0x03, 0x6b, 0x04, 0x38, 0x5b, 0xef, 0x54, 0x0e,
		0xcd, 0x8f, 0xc5, 0x72, 0x4f, 0xbb, 0x76, 0xec, 0x59, 0x5c, 0x3b, 0x79, 0x6c, 0x3b, 0x4c, 0xe6,
		0x00, 0xee, 0x72, 0x99, 0x86, 0x5c, 0x8d, 0x2d, 0x6f, 0x7e, 0xb8, 0x5b, 0xdb, 0xcc, 0x31, 0xc6,
		0xa1, 0x4c, 0xc3, 0xe1, 0x0a, 0x96, 0x1a, 0x39, 0x38, 0x98, 0xc2, 0x54, 0x48, 0xdd, 0xa8, 0x3b,
		0x98, 0xbd, 0x1d, 0x80, 0x7b, 0x80, 0xfb, 0x77, 0x02, 0xee, 0x37, 0xeb, 0x7b, 0x9b, 0x7b, 0xdb,
		0x3b, 0xf5, 0x3d, 0x40, 0xfa, 0x85, 0x41, 0xfa, 0xcb, 0x25, 0x00, 0xa3, 0xdf, 0xb9, 0x92, 0x3c,
		0xb0, 0x47, 0xa3, 0x93, 0xeb, 0xd1, 0x67, 0x0b, 0x70, 0x74, 0xa9, 0xe0, 0x28, 0xfa, 0x6c, 0x81,
		0xff, 0x2f, 0x44, 0x89, 0x9c, 0x2b, 0xd3, 0x4b, 0x4a, 0x85, 0x9c, 0x03, 0xe4, 0x1c, 0x00, 0xd1,
		0x03, 0xd1, 0x67, 0x5d, 0x02, 0xe4, 0x1c, 0x2c, 0x10, 0xca, 0xa3, 0xcf, 0x16, 0x10, 0x07, 0x10,
		0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0xc7, 0xb2, 0x22, 0x0e, 0xf4, 0xd9,
		0x02, 0xe6, 0x00, 0xe6, 0x40, 0x9f, 0xad, 0xc7, 0x43, 0x20, 0xcf, 0x11, 0x30, 0xe6, 0x5d, 0xc3,
		0x18, 0xe4, 0x39, 0x12, 0xc7, 0x35, 0xe8, 0xb3, 0x05, 0x34, 0x03, 0x34, 0x03, 0x06, 0x05, 0xd0,
		0x03, 0xd0, 0x03, 0x0c, 0x0a, 0x90, 0x46, 0xa1, 0x48, 0x03, 0x7d, 0xb6, 0x80, 0x39, 0x80, 0x39,
		0x50, 0x27, 0x0a, 0xfe, 0x04, 0x20, 0x06, 0x20, 0x06, 0xfc, 0xc9, 0x2a, 0xa0, 0x1a, 0xf4, 0xd9,
		0x02, 0x96, 0x01, 0x96, 0x01, 0x7f, 0x02, 0xe8, 0x01, 0xe8, 0x01, 0xfe, 0x04, 0x48, 0xa3, 0x48,
		0xa4, 0x81, 0x3e, 0x5b, 0xc0, 0x1c, 0xc0, 0x1c, 0xe0, 0x4f, 0xc0, 0x9f, 0x00, 0xc4, 0x00, 0xc4,
		0x80, 0x3f, 0x59, 0x36, 0x54, 0xb3, 0x8a, 0x7d, 0xb6, 0xac, 0xaa, 0xf4, 0xd7, 0xac, 0x3b, 0x6d,
		0xfd, 0x36, 0xbe, 0xdd, 0x12, 0xb4, 0x37, 0x90, 0xc2, 0x02, 0xd3, 0xcc, 0x7c, 0xe4, 0xe8, 0x6a,
		0xb4, 0x36, 0x28, 0x0e, 0x35, 0xa2, 0xb5, 0x01, 0x5a, 0x1b, 0x20, 0xe4, 0x42, 0xc8, 0xf5, 0x3e,
		0x42, 0x2e, 0xd0, 0xbc, 0x88, 0x90, 0x10, 0x21, 0xd9, 0x44, 0x48, 0xa0, 0x79, 0x17, 0x18, 0x10,
		0xa1, 0xb5, 0x01, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10,
		0xc7, 0x92, 0x22, 0x0e, 0xb4, 0x36, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0x6b, 0x83, 0xc7, 0x43, 0x60,
		0x6b, 0x19, 0x30, 0xe6, 0x5d, 0xc3, 0x18, 0x6c, 0x2d, 0x13, 0xc7, 0x35, 0x68, 0x6d, 0x00, 0x34,
		0x03, 0x34, 0x03, 0x06, 0x05, 0xd0, 0x03, 0xd0, 0x03, 0x0c, 0x0a, 0x90, 0x46, 0xa1, 0x48, 0x03,
		0xad, 0x0d, 0x80, 0x39, 0x80, 0x39, 0x90, 0x9a, 0x0f, 0xfe, 0x04, 0x20, 0x06, 0x20, 0x06, 0xfc,
		0xc9, 0x2a, 0xa0, 0x1a, 0xb4, 0x36, 0x00, 0x96, 0x01, 0x96, 0x01, 0x7f, 0x02, 0xe8, 0x01, 0xe8,
		0x01, 0xfe, 0x04, 0x48, 0xa3, 0x48, 0xa4, 0x81, 0xd6, 0x06, 0xc0, 0x1c, 0xc0, 0x1c, 0xe0, 0x4f,
		0xc0, 0x9f, 0x00, 0xc4, 0x00, 0xc4, 0x80, 0x3f, 0x59, 0x36, 0x54, 0xb3, 0x8a, 0xad, 0x0d, 0x2c,
		0x6a, 0xf4, 0xd7, 0xac, 0x1b, 0x1b, 0x9c, 0x0e, 0x6f, 0xb6, 0x04, 0x6d, 0x0d, 0x92, 0xa8, 0xa7,
		0x6f, 0x98, 0xe2, 0xe3, 0x3c, 0x4b, 0x95, 0xc6, 0xda, 0xbe, 0xc9, 0xc1, 0x33, 0x63, 0xa1, 0xe5,
		0x41, 0x71, 0x68, 0x12, 0x2d, 0x0f, 0xd0, 0xf2, 0x00, 0xa1, 0x18, 0x42, 0xb1, 0xf7, 0x11, 0x8a,
		0x81, 0xfe, 0x45, 0xe4, 0x84, 0xc8, 0xc9, 0x26, 0x72, 0x02, 0xfd, 0xbb, 0xc0, 0x40, 0x09, 0x2d,
		0x0f, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x96,
		0x14, 0x71, 0xa0, 0xe5, 0x01, 0x30, 0x07, 0x30, 0x07, 0x5a, 0x1e, 0x3c, 0x1e, 0x02, 0x5b, 0xce,
		0x80, 0x31, 0xef, 0x1a, 0xc6, 0x60, 0xcb, 0x99, 0x38, 0xae, 0x41, 0xcb, 0x03, 0xa0, 0x19, 0xa0,
		0x19, 0x30, 0x28, 0x80, 0x1e, 0x80, 0x1e, 0x60, 0x50, 0x80, 0x34, 0x0a, 0x45, 0x1a, 0x68, 0x79,
		0x00, 0xcc, 0x01, 0xcc, 0x81, 0x94, 0x7d, 0xf0, 0x27, 0x00, 0x31, 0x00, 0x31, 0xe0, 0x4f, 0x56,
		0x01, 0xd5, 0xa0, 0xe5, 0x01, 0xb0, 0x0c, 0xb0, 0x0c, 0xf8, 0x13, 0x40, 0x0f, 0x40, 0x0f, 0xf0,
		0x27, 0x40, 0x1a, 0x45, 0x22, 0x0d, 0xb4, 0x3c, 0x00, 0xe6, 0x00, 0xe6, 0x00, 0x7f, 0x02, 0xfe,
		0x04, 0x20, 0x06, 0x20, 0x06, 0xfc, 0xc9, 0xb2, 0xa1, 0x9a, 0x55, 0x6c, 0x79, 0x90, 0xbb, 0x62,
		0x7f, 0xcd, 0xba, 0x01, 0x42, 0x67, 0x72, 0xeb, 0xd6, 0xec, 0xce, 0x4b, 0xd0, 0x0d, 0x41, 0x47,
		0xda, 0x22, 0x0b, 0xfa, 0xc1, 0x77, 0x8e, 0x2e, 0x47, 0xcf, 0x83, 0xe2, 0xe0, 0x24, 0x7a, 0x1e,
		0xa0, 0xe7, 0x01, 0x62, 0x31, 0xc4, 0x62, 0xef, 0x23, 0x16, 0x03, 0xff, 0x8b, 0xd0, 0x09, 0xa1,
		0x93, 0x4d, 0xe8, 0x04, 0xfe, 0x77, 0x81, 0x91, 0x12, 0x7a, 0x1e, 0x00, 0x71, 0x00, 0x71, 0x00,
		0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x2c, 0x29, 0xe2, 0x40, 0xcf, 0x03, 0x60,
		0x0e, 0x60, 0x0e, 0xf4, 0x3c, 0x78, 0x3c, 0x04, 0xf6, 0x9c, 0x01, 0x63, 0xde, 0x35, 0x8c, 0xc1,
		0x9e, 0x33, 0x71, 0x5c, 0x83, 0x9e, 0x07, 0x40, 0x33, 0x40, 0x33, 0x60, 0x50, 0x00, 0x3d, 0x00,
		0x3d, 0xc0, 0xa0, 0x00, 0x69, 0x14, 0x8a, 0x34, 0xd0, 0xf3, 0x00, 0x98, 0x03, 0x98, 0x03, 0x39,
		0xfb, 0xe0, 0x4f, 0x00, 0x62, 0x00, 0x62, 0xc0, 0x9f, 0xac, 0x02, 0xaa, 0x41, 0xcf, 0x03, 0x60,
		0x19, 0x60, 0x19, 0xf0, 0x27, 0x80, 0x1e, 0x80, 0x1e, 0xe0, 0x4f, 0x80, 0x34, 0x8a, 0x44, 0x1a,
		0xe8, 0x79, 0x00, 0xcc, 0x01, 0xcc, 0x01, 0xfe, 0x04, 0xfc, 0x09, 0x40, 0x0c, 0x40, 0x0c, 0xf8,
		0x93, 0x65, 0x43, 0x35, 0xab, 0xd8, 0xf3, 0xc0, 0xa6, 0x48, 0x7f, 0xcd, 0xba, 0xcd, 0xc1, 0xc5,
		0xe8, 0x6e, 0x4b, 0xd0, 0xda, 0x20, 0x4d, 0xb8, 0xb2, 0xef, 0x6c, 0x30, 0xba, 0x1a, 0x8d, 0x0d,
		0x8a, 0xc3, 0x8c, 0x68, 0x6c, 0x80, 0xc6, 0x06, 0x08, 0xb8, 0x10, 0x70, 0xbd, 0x8f, 0x80, 0x0b,
		0x24, 0x2f, 0xe2, 0x23, 0xc4, 0x47, 0x36, 0xf1, 0x11, 0x48, 0xde, 0x05, 0x86, 0x43, 0x68, 0x6c,
		0x00, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0xb1, 0xa4,
		0x88, 0x03, 0x8d, 0x0d, 0x80, 0x39, 0x80, 0x39, 0xd0, 0xd8, 0xe0, 0xf1, 0x10, 0xd8, 0x58, 0x06,
		0x8c, 0x79, 0xd7, 0x30, 0x06, 0x1b, 0xcb, 0xc4, 0x71, 0x0d, 0x1a, 0x1b, 0x00, 0xcd, 0x00, 0xcd,
		0x80, 0x41, 0x01, 0xf4, 0x00, 0xf4, 0x00, 0x83, 0x02, 0xa4, 0x51, 0x28, 0xd2, 0x40, 0x63, 0x03,
		0x60, 0x0e, 0x60, 0x0e, 0x24, 0xe6, 0x83, 0x3f, 0x01, 0x88, 0x01, 0x88, 0x01, 0x7f, 0xb2, 0x0a,
		0xa8, 0x06, 0x8d, 0x0d, 0x80, 0x65, 0x80, 0x65, 0xc0, 0x9f, 0x00, 0x7a, 0x00, 0x7a, 0x80, 0x3f,
		0x01, 0xd2, 0x28, 0x12, 0x69, 0xa0, 0xb1, 0x01, 0x30, 0x07, 0x30, 0x07, 0xf8, 0x13, 0xf0, 0x27,
		0x00, 0x31, 0x00, 0x31, 0xe0, 0x4f, 0x96, 0x0d, 0xd5, 0xac, 0x62, 0x63, 0x03, 0x8b, 0x1a, 0xfd,
		0x35, 0xeb, 0xbe, 0x06, 0x5f, 0x87, 0x37, 0x5b, 0x82, 0xb6, 0x06, 0x37, 0x4c, 0x68, 0xfb, 0xb6,
		0x06, 0xa3, 0xab, 0xd1, 0xd6, 0xa0, 0x38, 0xc4, 0x88, 0xb6, 0x06, 0x68, 0x6b, 0x80, 0x70, 0x0b,
		0xe1, 0xd6, 0xfb, 0x08, 0xb7, 0x40, 0xf1, 0x22, 0x3a, 0x42, 0x74, 0x64, 0x13, 0x1d, 0x81, 0xe2,
		0x5d, 0x60, 0x30, 0x84, 0xb6, 0x06, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c,
		0x40, 0x1c, 0x40, 0x1c, 0x4b, 0x8a, 0x38, 0xd0, 0xd6, 0x00, 0x98, 0x03, 0x98, 0x03, 0x6d, 0x0d,
		0x1e, 0x0f, 0x81, 0x6d, 0x65, 0xc0, 0x98, 0x77, 0x0d, 0x63, 0xb0, 0xad, 0x4c, 0x1c, 0xd7, 0xa0,
		0xad, 0x01, 0xd0, 0x0c, 0xd0, 0x0c, 0x18, 0x14, 0x40, 0x0f, 0x40, 0x0f, 0x30, 0x28, 0x40, 0x1a,
		0x85, 0x22, 0x0d, 0xb4, 0x35, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0x5a, 0x3e, 0xf8, 0x13, 0x80, 0x18,
		0x80, 0x18, 0xf0, 0x27, 0xab, 0x80, 0x6a, 0xd0, 0xd6, 0x00, 0x58, 0x06, 0x58, 0x06, 0xfc, 0x09,
		0xa0, 0x07, 0xa0, 0x07, 0xf8, 0x13, 0x20, 0x8d, 0x22, 0x91, 0x06, 0xda, 0x1a, 0x00, 0x73, 0x00,
		0x73, 0x80, 0x3f, 0x01, 0x7f, 0x02, 0x10, 0x03, 0x10, 0x03, 0xfe, 0x64, 0xd9, 0x50, 0xcd, 0x2a,
		0xb6, 0x35, 0xb0, 0xa8, 0xd1, 0x5f, 0xb3, 0x6e, 0x6b, 0xf0, 0xfb, 0xf0, 0x66, 0x45, 0xb5, 0x35,
		0xf8, 0xe0, 0x70, 0x55, 0x6c, 0x57, 0xc3, 0x72, 0x15, 0x0c, 0x16, 0xc0, 0x6a, 0xe2, 0xb3, 0xcd,
		0xf9, 0xdb, 0x33, 0xf8, 0xfa, 0x37, 0xde, 0x98, 0xdb, 0x21, 0xfe, 0x1b, 0x27, 0x88, 0xfb, 0xfc,
		0x2d, 0xe8, 0x57, 0x39, 0x16, 0x89, 0x6e, 0x6a, 0x9d, 0xad, 0x52, 0x7f, 0xe8, 0x4e, 0x0f, 0x03,
		0x3e, 0x44, 0x6e, 0x49, 0x36, 0x2b, 0x3c, 0xb4, 0xfe, 0x8f, 0xae, 0xb0, 0xb3, 0xb3, 0x95, 0x33,
		0xe5, 0x73, 0xc5, 0xfd, 0xcf, 0xc3, 0xd7, 0x92, 0x69, 0x10, 0xe4, 0x9a, 0x1d, 0x43, 0x89, 0x33,
		0x96, 0xb4, 0x0c, 0x32, 0x66, 0x28, 0x5b, 0xaf, 0x4b, 0xd5, 0xcb, 0xb2, 0xf2, 0xfc, 0xbf, 0xbc,
		0x30, 0x3f, 0x59, 0xe7, 0xc5, 0x68, 0x3e, 0x5e, 0x99, 0x0b, 0x83, 0x39, 0x78, 0xfe, 0xfd, 0xe7,
		0xdf, 0xee, 0x99, 0x37, 0xab, 0xf8, 0x32, 0x79, 0xf1, 0x75, 0x66, 0x40, 0x7c, 0xf8, 0xa5, 0x17,
		0x66, 0xe5, 0xf5, 0x36, 0x29, 0x6f, 0xc6, 0xa0, 0x59, 0x62, 0xcc, 0xec, 0xed, 0x4d, 0xb2, 0x46,
		0x88, 0xc6, 0x11, 0xa0, 0x71, 0x84, 0x67, 0xd4, 0x7e, 0xc4, 0x4c, 0x0e, 0xdf, 0x6a, 0x1b, 0x52,
		0xf1, 0xa6, 0x73, 0xfe, 0xc6, 0x24, 0x4c, 0xa7, 0x75, 0xf2, 0xfd, 0xb7, 0x8c, 0x66, 0xa6, 0x7e,
		0x38, 0x99, 0x49, 0x07, 0x13, 0x72, 0xc1, 0xbc, 0xbf, 0x8d, 0x29, 0x55, 0x60, 0x4d, 0x09, 0x58,
		0x87, 0xfe, 0x56, 0xfd, 0x69, 0xf2, 0xb9, 0xbd, 0xac, 0xfd, 0x66, 0x2a, 0x09, 0x67, 0xca, 0x1b,
		0x64, 0x9f, 0xbc, 0x59, 0xc5, 0xc8, 0xf8, 0xba, 0x8c, 0x13, 0x60, 0x16, 0xaa, 0x18, 0xb3, 0x59,
		0x36, 0xec, 0x95, 0x7d, 0x23, 0x25, 0x5b, 0x6e, 0x2a, 0x37, 0x17, 0x95, 0x9b, 0x7b, 0xca, 0xd5,
		0x28, 0xc9, 0x2d, 0xd6, 0x35, 0x66, 0x8e, 0x1e, 0x1c, 0x54, 0x14, 0x32, 0x21, 0xab, 0x23, 0x67,
		0x69, 0xb0, 0x68, 0x53, 0x9b, 0x66, 0x40, 0x0d, 0x55, 0x8e, 0xb9, 0xec, 0x8f, 0x5c, 0xbb, 0x19,
		0x77, 0x63, 0x11, 0x48, 0xe5, 0xe1, 0x66, 0xf2, 0x72, 0xc7, 0xb3, 0xc0, 0xdf, 0xf2, 0x7a, 0x07,
		0x51, 0xbd, 0x0d, 0x77, 0x9f, 0x87, 0x4b, 0x71, 0x35, 0x65, 0xf5, 0xad, 0xc6, 0x02, 0x27, 0xad,
		0xa0, 0xa0, 0xf6, 0xd2, 0x40, 0x43, 0xda, 0x4c, 0x6b, 0xae, 0xa4, 0xb1, 0x8a, 0x54, 0xfe, 0xe7,
		0xa7, 0x9f, 0x7e, 0xfa, 0xe9, 0x4f, 0x56, 0xfd, 0xdf, 0x66, 0xf5, 0xff, 0x6d, 0x54, 0xf7, 0xae,
		0x2e, 0x1f, 0xfd, 0xf2, 0xd7, 0x5f, 0xd5, 0xab, 0xcb, 0x9f, 0xff, 0xd9, 0xf8, 0xb8, 0x5d, 0xbb,
		0xff, 0xf9, 0xbf, 0x1f, 0xfe, 0x7e, 0xf9, 0xd7, 0x5f, 0xbf, 0xfc, 0xfc, 0x7f, 0x6c, 0xae, 0xfa,
		0xef, 0x9f, 0xff, 0x1d, 0x5e, 0xfb, 0x5f, 0x95, 0x62, 0x26, 0xe1, 0xac, 0xd3, 0xfa, 0x63, 0x75,
		0x67, 0xc2, 0xa9, 0xdd, 0x37, 0x8a, 0xb1, 0xed, 0x63, 0x6d, 0xa7, 0x31, 0xf7, 0xb3, 0xb1, 0xb7,
		0x65, 0x7b, 0x4a, 0x8b, 0x8e, 0x9e, 0x79, 0xf6, 0xc2, 0x1e, 0x63, 0x8e, 0x68, 0xfc, 0xf4, 0xd5,
		0xee, 0x9d, 0x0d, 0xf7, 0xe6, 0x62, 0xdf, 0xeb, 0x09, 0xfe, 0x48, 0x8b, 0x6c, 0x37, 0xba, 0x14,
		0xdc, 0x53, 0x51, 0xec, 0x8a, 0x2f, 0x93, 0xf5, 0x4c, 0x81, 0x9c, 0x01, 0xb7, 0x70, 0x20, 0x93,
		0xab, 0x09, 0xec, 0xb6, 0x65, 0x58, 0x5e, 0x89, 0xd5, 0x07, 0x51, 0xa2, 0xab, 0x5c, 0x6a, 0x25,
		0x78, 0x92, 0x3d, 0x58, 0x7d, 0x72, 0x15, 0x42, 0x56, 0x84, 0xac, 0x3f, 0x08, 0xd3, 0x9d, 0x79,
		0xd8, 0xfa, 0xe8, 0x5a, 0xb3, 0xd0, 0xb5, 0x86, 0xd0, 0x15, 0xa1, 0xab, 0x99, 0xa0, 0x9a, 0x92,
		0x74, 0xf9, 0x48, 0xbb, 0x9c, 0x82, 0x6b, 0x2d, 0xc0, 0x79, 0x04, 0x39, 0xbf, 0x40, 0xbb, 0xc0,
		0x48, 0x6b, 0x68, 0x6a, 0x6d, 0x15, 0x85, 0xe7, 0x68, 0x6a, 0x1d, 0x08, 0x96, 0x38, 0x68, 0x6b,
		0x3d, 0x1a, 0x06, 0x09, 0x77, 0xf6, 0x6a, 0xe3, 0x4a, 0x7d, 0x9c, 0xab, 0x91, 0x73, 0x75, 0x72,
		0xaa, 0x56, 0x76, 0xea, 0x95, 0x83, 0xec, 0x5a, 0x73, 0xdd, 0xee, 0x49, 0x09, 0xd9, 0x77, 0x90,
		0x67, 0x57, 0xdb, 0x2d, 0x75, 0x06, 0xac, 0xc8, 0x03, 0x77, 0x64, 0x42, 0xa1, 0xe4, 0xc2, 0xab,
		0x64, 0xc3, 0x9b, 0x1b, 0xfd, 0xee, 0x24, 0xd4, 0x86, 0x8a, 0x1d, 0xa2, 0xea, 0x49, 0x80, 0x99,
		0xd3, 0xa4, 0xcf, 0x46, 0x82, 0x55, 0x87, 0x55, 0x87, 0x55, 0xa7, 0x65, 0xd5, 0xcb, 0x69, 0x1a,
		0x1a, 0x5f, 0x6f, 0x56, 0x99, 0xef, 0x2b, 0x9e, 0x38, 0x80, 0x90, 0x4f, 0x46, 0x83, 0xcd, 0x81,
		0xcd, 0x81, 0xcd, 0x29, 0x5b, 0x7f, 0xd6, 0x2c, 0x77, 0xe7, 0xe7, 0xf5, 0xc0, 0x72, 0x07, 0x6e,
		0x6e, 0xa0, 0xff, 0xf9, 0xe9, 0xa7, 0x3f, 0x37, 0xaa, 0x7b, 0x97, 0xff, 0xfe, 0x59, 0xab, 0xee,
		0x5d, 0x8e, 0x3f, 0xd6, 0x46, 0x3f, 0xc6, 0x9f, 0xeb, 0x7f, 0x6e, 0x54, 0x37, 0xa7, 0x9f, 0xb7,
		0xfe, 0xdc, 0xa8, 0x6e, 0x5d, 0xfe, 0xfc, 0xd7, 0x5f, 0xbf, 0xfc, 0xfc, 0x4f, 0xe3, 0xde, 0xfc,
		0xc2, 0xff, 0xb2, 0x17, 0x9a, 0xcb, 0x3c, 0x93, 0x95, 0x67, 0xcf, 0x92, 0xee, 0x8c, 0x21, 0x5c,
		0x41, 0xb8, 0x32, 0x34, 0x5a, 0xdb, 0x4e, 0x21, 0xc4, 0x36, 0x20, 0x04, 0x20, 0x04, 0x20, 0xc4,
		0xc2, 0xf4, 0x67, 0x69, 0x21, 0x04, 0xab, 0xf6, 0x9a, 0xd5, 0xa3, 0xcb, 0x7f, 0x6a, 0x1f, 0x37,
		0xef, 0x3f, 0xfd, 0xfc, 0xcf, 0xce, 0xfd, 0x8f, 0x7f, 0xfc, 0xf7, 0xb9, 0xaf, 0xd5, 0x3e, 0xee,
		0xdc, 0x7f, 0x7a, 0xe1, 0x5f, 0xb6, 0xef, 0x3f, 0x65, 0x1c, 0x63, 0xeb, 0xfe, 0xa7, 0xb9, 0xaf,
		0x0e, 0xff, 0x5e, 0x7f, 0xe9, 0x82, 0xcd, 0x17, 0x2e, 0x68, 0xbc, 0x74, 0x41, 0xe3, 0x85, 0x0b,
		0x5e, 0x7c, 0xa4, 0xfa, 0x0b, 0x17, 0x6c, 0xdd, 0xff, 0x3b, 0xf7, 0xfd, 0x9f, 0x9e, 0xff, 0xea,
		0xf6, 0xfd, 0xcf, 0xff, 0xbe, 0xf4, 0x6f, 0x3b, 0xf7, 0xff, 0x7e, 0xfa, 0x79, 0xa5, 0x00, 0x15,
		0xe4, 0x87, 0x96, 0xfc, 0x00, 0x5e, 0xae, 0x1a, 0xbc, 0x5c, 0x89, 0xf2, 0x5b, 0x5f, 0x26, 0xeb,
		0x8f, 0x93, 0xa9, 0x1e, 0x7e, 0xb9, 0x5b, 0xb7, 0x4a, 0x2e, 0x58, 0x33, 0x4b, 0x2c, 0xfb, 0x35,
		0x4a, 0xf4, 0xe1, 0xf8, 0xd6, 0xb3, 0xcf, 0x77, 0x99, 0xd2, 0xcd, 0xec, 0xd7, 0xc3, 0xe4, 0xc4,
		0x71, 0xeb, 0xfd, 0x8b, 0xbc, 0xfb, 0x16, 0x96, 0xc0, 0x1f, 0x49, 0x1a, 0x48, 0xd2, 0x28, 0x1c,
		0xa8, 0xcf, 0xd6, 0x3b, 0xe0, 0xac, 0xa7, 0x78, 0xcf, 0x66, 0xc1, 0xa7, 0x98, 0x7c, 0xc7, 0xe2,
		0xda, 0xf6, 0xc4, 0xac, 0xfd, 0xf2, 0xcb, 0xc4, 0x46, 0xad, 0xcf, 0x94, 0x6c, 0x09, 0x4c, 0xc6,
		0xb8, 0x84, 0xde, 0xda, 0x5e, 0x98, 0x56, 0xe0, 0xaf, 0xb9, 0xc8, 0xe8, 0xaa, 0xff, 0xff, 0xd9,
		0xfb, 0xd6, 0xa6, 0xb6, 0xad, 0x6e, 0xff, 0xf7, 0xf9, 0x14, 0x1e, 0x4f, 0x5f, 0xc0, 0xf3, 0x47,
		0x01, 0x1b, 0xdb, 0x04, 0xde, 0x74, 0x68, 0x42, 0xda, 0x9c, 0x26, 0x21, 0x13, 0x78, 0x9e, 0xd3,
		0x53, 0x70, 0x19, 0x61, 0x6f, 0x88, 0xa6, 0x46, 0xf2, 0x91, 0xe4, 0x9c, 0x50, 0xf0, 0x77, 0xff,
		0x8f, 0x6f, 0xc2, 0xb6, 0x2c, 0x7b, 0xef, 0xb5, 0xd7, 0xd6, 0xcd, 0x3f, 0xa6, 0x9d, 0x18, 0x63,
		0x2d, 0x4b, 0x6b, 0xaf, 0xfb, 0x15, 0xc2, 0x02, 0xc2, 0x62, 0xed, 0x1d, 0xa2, 0xa2, 0x0b, 0x41,
		0x34, 0x04, 0xd1, 0x0a, 0x18, 0x44, 0x43, 0x45, 0x17, 0x7c, 0x58, 0xc6, 0xb3, 0x41, 0x45, 0x17,
		0xa4, 0x3a, 0xa4, 0x3a, 0xa4, 0x3a, 0x2a, 0xba, 0x20, 0x73, 0x20, 0x73, 0xb6, 0x4a, 0xe6, 0xa0,
		0xa2, 0x0b, 0x15, 0x5d, 0xa8, 0xe8, 0x82, 0xbb, 0x82, 0x8a, 0x2e, 0x98, 0x10, 0x30, 0x21, 0x60,
		0x42, 0x64, 0xc3, 0x3f, 0x15, 0x54, 0x74, 0xa1, 0x22, 0x07, 0x15, 0x5d, 0xa0, 0x1f, 0x54, 0x74,
		0xc1, 0xbc, 0xe4, 0x35, 0x2f, 0x4b, 0x5f, 0xd1, 0x45, 0xa9, 0x2d, 0xa8, 0x70, 0x14, 0x74, 0x29,
		0x8c, 0xfd, 0x57, 0x3f, 0x0d, 0xde, 0x19, 0x3e, 0xd3, 0xb5, 0x00, 0x8a, 0xc9, 0x89, 0xf2, 0x4c,
		0x2f, 0x94, 0x66, 0xb8, 0xbc, 0xec, 0xae, 0x58, 0x43, 0xf0, 0xfc, 0x8b, 0x2c, 0x12, 0x49, 0xbc,
		0x5a, 0xfa, 0xb9, 0x82, 0x0a, 0x33, 0xf7, 0xe8, 0x08, 0x35, 0x31, 0x62, 0x30, 0x10, 0xfe, 0x77,
		0xe1, 0x2b, 0x4c, 0x17, 0x9c, 0x5d, 0x80, 0xc1, 0x82, 0x18, 0x2c, 0x38, 0x4f, 0x42, 0x94, 0x59,
		0xf8, 0xe3, 0xeb, 0x30, 0x50, 0x30, 0xc5, 0x48, 0xce, 0x56, 0x0f, 0x14, 0xa4, 0x46, 0x3a, 0x5f,
		0xea, 0xec, 0x48, 0xc1, 0x19, 0x54, 0xab, 0x67, 0x12, 0xac, 0x44, 0xb5, 0xba, 0xca, 0x79, 0xe7,
		0xa6, 0x5a, 0x7d, 0xc6, 0x63, 0x39, 0x28, 0x56, 0xc7, 0x00, 0x52, 0x48, 0x8b, 0x32, 0x4a, 0x0b,
		0x7a, 0xb9, 0x3a, 0x57, 0xaa, 0x10, 0x59, 0x42, 0x64, 0x09, 0x33, 0x62, 0x2d, 0x7a, 0x08, 0xb4,
		0x92, 0x93, 0x2c, 0x21, 0x67, 0x8e, 0xf0, 0x58, 0x03, 0xc6, 0xf4, 0x99, 0x32, 0x5f, 0xd0, 0xcd,
		0x5c, 0x82, 0x15, 0xc3, 0xd1, 0x1b, 0x06, 0x58, 0x5c, 0xf9, 0xb0, 0x08, 0x60, 0x51, 0x0a, 0x8d,
		0x66, 0x3f, 0x6d, 0x0e, 0x24, 0x72, 0x66, 0x16, 0x8b, 0x8b, 0x49, 0xbd, 0xd5, 0xdd, 0x7b, 0x39,
		0x62, 0xd7, 0xd6, 0xb6, 0xb1, 0x2b, 0xd2, 0xd8, 0x85, 0x4a, 0x63, 0x17, 0x46, 0x78, 0x81, 0xae,
		0x8a, 0x49, 0x57, 0x7a, 0xa2, 0x3c, 0xed, 0xf2, 0x8c, 0x54, 0x6a, 0x52, 0xfb, 0x9e, 0x1f, 0xea,
		0x3b, 0x98, 0x63, 0x28, 0x44, 0x5b, 0xfd, 0x9d, 0xb8, 0xb3, 0x07, 0xbd, 0xb1, 0x93, 0xd1, 0x3c,
		0x84, 0x8b, 0x0a, 0x17, 0x15, 0x2e, 0xaa, 0x3a, 0xf3, 0x59, 0xee, 0xe0, 0xe1, 0x56, 0x79, 0x67,
		0xe3, 0x2a, 0x16, 0x6a, 0x69, 0x80, 0xf8, 0x6a, 0xbb, 0xf7, 0xb9, 0xf0, 0x51, 0x75, 0x16, 0x15,
		0x33, 0xcb, 0x96, 0x18, 0xb8, 0xd9, 0x56, 0x5e, 0x2e, 0x78, 0x0c, 0x3b, 0x7a, 0x99, 0xbd, 0x96,
		0x8a, 0xee, 0xe2, 0xe3, 0xb4, 0x8e, 0xa0, 0xd5, 0x6c, 0x1e, 0x36, 0x73, 0x7c, 0x0c, 0x65, 0xb7,
		0x57, 0x4a, 0x53, 0xe4, 0x38, 0xad, 0xd2, 0x99, 0xfe, 0x9b, 0xca, 0xb4, 0xba, 0x8b, 0xc9, 0x57,
		0x4e, 0xff, 0xcd, 0xd1, 0x98, 0x3a, 0xcc, 0x9c, 0x32, 0x6c, 0xe6, 0x21, 0x89, 0x97, 0x81, 0x34,
		0x41, 0x12, 0x0f, 0x1e, 0x12, 0x3c, 0x24, 0x24, 0xf1, 0x90, 0xc4, 0x93, 0xc2, 0x11, 0x92, 0x78,
		0x48, 0xe2, 0x21, 0x89, 0x67, 0x82, 0x5d, 0x91, 0xc4, 0x43, 0xb2, 0x05, 0x49, 0x3c, 0xd0, 0x15,
		0x92, 0x78, 0x25, 0x0d, 0x8a, 0x21, 0x89, 0x07, 0x17, 0x15, 0x2e, 0xea, 0xb6, 0xb9, 0xa8, 0x48,
		0xe2, 0xc5, 0x6e, 0x04, 0x49, 0xbc, 0x4a, 0x86, 0x5e, 0x4b, 0x05, 0x49, 0x3c, 0x24, 0xf1, 0x32,
		0x0f, 0xbb, 0x67, 0x98, 0xc4, 0x4b, 0x61, 0x40, 0xc9, 0x52, 0x0e, 0xaf, 0x78, 0x93, 0x49, 0xd4,
		0x42, 0x11, 0xe5, 0x19, 0x4c, 0x42, 0xcc, 0x6d, 0x0e, 0x02, 0x65, 0xed, 0xae, 0x63, 0x06, 0xce,
		0x9b, 0x7e, 0xde, 0xe4, 0xee, 0xad, 0xdb, 0x47, 0x0a, 0x49, 0x73, 0x98, 0x7c, 0x0b, 0x66, 0xde,
		0x18, 0x13, 0x85, 0xa0, 0xf4, 0x34, 0x46, 0xc6, 0x2c, 0x4a, 0x1e, 0x33, 0x93, 0x62, 0x16, 0x65,
		0x4d, 0xf9, 0x47, 0xc4, 0xc8, 0x0d, 0x4e, 0xa1, 0x21, 0xd1, 0xc8, 0x64, 0x18, 0xa9, 0xb2, 0x09,
		0xa5, 0x32, 0x09, 0xe5, 0xa9, 0x30, 0x75, 0x4c, 0x85, 0x61, 0x77, 0x54, 0x53, 0x9b, 0x0a, 0x63,
		0xfb, 0x9d, 0x6f, 0x94, 0xa9, 0x30, 0xe3, 0xeb, 0xd4, 0xa6, 0xc2, 0x1c, 0x60, 0x2a, 0x0c, 0xa6,
		0xc2, 0x10, 0x23, 0x20, 0xd1, 0x79, 0x75, 0xbd, 0x07, 0xdb, 0x71, 0x2d, 0xc5, 0xad, 0x3b, 0x94,
		0x94, 0x55, 0xf5, 0xa3, 0x70, 0xef, 0xc7, 0x3a, 0x43, 0x2d, 0xa6, 0x41, 0xb0, 0xb8, 0x74, 0x62,
		0x16, 0xba, 0xf1, 0xcf, 0x99, 0x43, 0x5c, 0x23, 0x5e, 0xcf, 0xe0, 0xfc, 0x52, 0x82, 0xd7, 0x3a,
		0x31, 0x06, 0x2e, 0x94, 0xd5, 0x9b, 0x87, 0x19, 0x22, 0xcd, 0x90, 0x1d, 0xac, 0x90, 0x81, 0x23,
		0x27, 0x6f, 0xab, 0x7f, 0xed, 0xec, 0xec, 0xec, 0x5c, 0xd9, 0xd6, 0x3f, 0xa7, 0xd6, 0x9f, 0x07,
		0xd6, 0xf1, 0x4d, 0x7b, 0xee, 0x97, 0xeb, 0x6b, 0xeb, 0xa6, 0xbd, 0xfb, 0x74, 0xb0, 0xd7, 0xaa,
		0x0d, 0x77, 0x7f, 0x7e, 0x79, 0xbf, 0x7d, 0x7d, 0xfd, 0x7a, 0xf7, 0x5f, 0x94, 0xab, 0x7e, 0xde,
		0x7d, 0x1e, 0x5d, 0xab, 0x90, 0x46, 0x52, 0x42, 0x82, 0x4e, 0xba, 0x31, 0xff, 0x98, 0x60, 0x95,
		0xfb, 0x70, 0xe5, 0xe1, 0xca, 0xe7, 0xc6, 0x95, 0x2f, 0xb2, 0x9b, 0x2a, 0x19, 0x65, 0x54, 0x71,
		0x52, 0x37, 0x87, 0x11, 0xd7, 0xb8, 0xa8, 0xaf, 0x14, 0x30, 0x24, 0x8b, 0x19, 0x15, 0x8c, 0x54,
		0xd7, 0xfa, 0xc8, 0x92, 0x38, 0x58, 0xfd, 0xf4, 0xf1, 0x67, 0x5b, 0xf1, 0x5c, 0xd5, 0x7b, 0xbf,
		0xdf, 0xb1, 0x36, 0x0c, 0xd9, 0x8c, 0xc4, 0xc0, 0xfc, 0x87, 0x13, 0x70, 0xb4, 0xde, 0x09, 0xdf,
		0xe8, 0x23, 0xc9, 0xf8, 0x44, 0x4b, 0x3e, 0x90, 0xf5, 0x70, 0xff, 0xb0, 0x2e, 0x93, 0x2f, 0x2b,
		0x88, 0x94, 0x1d, 0x1d, 0x65, 0xe1, 0xb2, 0xc2, 0x91, 0x99, 0xdc, 0x3c, 0x13, 0x7d, 0x6e, 0x72,
		0x9f, 0x65, 0x67, 0xce, 0xa9, 0xcd, 0x98, 0xcb, 0xd1, 0x34, 0xde, 0x4d, 0xa4, 0x50, 0xe8, 0xe0,
		0xcb, 0x06, 0x52, 0x49, 0x39, 0x02, 0xd3, 0x11, 0x7e, 0xe8, 0xdc, 0x39, 0x1d, 0x3b, 0x14, 0x96,
		0xd3, 0x55, 0x8f, 0xc4, 0x2c, 0x5d, 0x5f, 0x9a, 0x88, 0x8c, 0x2c, 0x09, 0x96, 0x32, 0x2c, 0x23,
		0x49, 0xa2, 0x79, 0x8b, 0xcd, 0x28, 0xaf, 0x74, 0x55, 0x5c, 0xe1, 0x2a, 0x61, 0xb1, 0x49, 0xc8,
		0x2c, 0xe1, 0xda, 0xb7, 0x3d, 0xa1, 0xce, 0x69, 0xd3, 0xeb, 0x64, 0xe7, 0x1e, 0xbf, 0x94, 0xb6,
		0x8d, 0x48, 0x02, 0x8c, 0x09, 0xc6, 0xcc, 0x8e, 0x31, 0x6f, 0x3d, 0xaf, 0x27, 0x6c, 0x97, 0xc2,
		0x99, 0xb5, 0x14, 0x39, 0xb3, 0xe7, 0x04, 0xa1, 0x70, 0x67, 0x9d, 0x0a, 0x22, 0x50, 0xe7, 0xd1,
		0x18, 0x04, 0xb0, 0x1d, 0xd8, 0x2e, 0x33, 0xb6, 0x1b, 0xb8, 0x23, 0x17, 0x97, 0xc0, 0x74, 0x0a,
		0xbd, 0x82, 0xb4, 0xde, 0x40, 0x8d, 0x06, 0x74, 0xad, 0xae, 0x48, 0x9d, 0x6e, 0x48, 0xbd, 0x2e,
		0x48, 0x6c, 0x8f, 0x4e, 0x8c, 0x3f, 0x63, 0x7b, 0x74, 0x39, 0x31, 0x96, 0x66, 0x4d, 0x3b, 0x36,
		0xab, 0xae, 0x25, 0x16, 0x74, 0x8d, 0x61, 0xb3, 0x2a, 0xe8, 0x07, 0x9b, 0x55, 0x99, 0x12, 0x5c,
		0xb4, 0xef, 0x51, 0x14, 0xed, 0x1a, 0x36, 0xa2, 0x70, 0x07, 0x0f, 0xc2, 0x9f, 0x64, 0x78, 0x34,
		0x8c, 0xc4, 0x06, 0xe1, 0xda, 0x33, 0x77, 0xf0, 0x30, 0xb2, 0xd6, 0x8d, 0x95, 0x47, 0x20, 0x1f,
		0x3e, 0x03, 0x46, 0xdb, 0xb9, 0xc9, 0x12, 0x29, 0x78, 0x10, 0xa1, 0xdd, 0xb5, 0x43, 0xdb, 0xb2,
		0x07, 0xe1, 0x37, 0xe1, 0x86, 0x4e, 0x47, 0xad, 0xd6, 0x3a, 0xa2, 0xd4, 0x24, 0x40, 0xea, 0x51,
		0xbe, 0x3b, 0xbb, 0x17, 0x20, 0xcc, 0x87, 0x78, 0x03, 0xc2, 0x7c, 0x9b, 0xbe, 0x53, 0xa9, 0xef,
		0x9c, 0xd2, 0x67, 0x3e, 0xcf, 0x96, 0xc7, 0x87, 0x87, 0xc7, 0xe0, 0x4a, 0x70, 0x65, 0x76, 0x5c,
		0x49, 0xeb, 0xd1, 0x26, 0xf4, 0x64, 0x13, 0x7b, 0xb0, 0x0b, 0x5a, 0xaf, 0x7c, 0x80, 0x7a, 0x65,
		0x55, 0x94, 0x69, 0xf4, 0x3c, 0xe7, 0xba, 0x62, 0x39, 0x45, 0xdd, 0x15, 0xfa, 0xb6, 0x1b, 0x8c,
		0x39, 0x3a, 0x10, 0x9d, 0x81, 0xef, 0x84, 0x8f, 0xea, 0x9a, 0x6c, 0x05, 0x0c, 0x24, 0x95, 0xa1,
		0xd7, 0x60, 0x6d, 0xaa, 0x73, 0x6c, 0x2e, 0x0b, 0x74, 0xe7, 0xaa, 0x3b, 0xe5, 0x67, 0x7a, 0x4b,
		0x56, 0xa9, 0xfe, 0xea, 0xf7, 0x3b, 0x0a, 0xb3, 0xbb, 0xd1, 0x54, 0x8a, 0xe2, 0x46, 0x7e, 0xc6,
		0x41, 0x71, 0x23, 0xd4, 0xdd, 0xd6, 0xa9, 0x3b, 0x14, 0x37, 0xc2, 0x0e, 0x05, 0x63, 0xc2, 0x0e,
		0xa5, 0x72, 0x26, 0x8a, 0x1b, 0xc1, 0x76, 0x28, 0x6e, 0x44, 0x71, 0x23, 0xe7, 0x93, 0xd2, 0x9f,
		0x78, 0xc5, 0x93, 0xa3, 0xb8, 0x11, 0xc5, 0x8d, 0x28, 0x6e, 0x34, 0xc7, 0x5e, 0x28, 0x6e, 0x44,
		0x71, 0x1a, 0x8a, 0x1b, 0x41, 0x3f, 0x28, 0x6e, 0x34, 0xf1, 0x3d, 0x28, 0x6e, 0x64, 0x40, 0x3d,
		0x8a, 0x1b, 0x23, 0x60, 0x28, 0x6e, 0x44, 0x71, 0x23, 0xe2, 0x0d, 0x08, 0xf3, 0xa9, 0x32, 0x2f,
		0x8a, 0x1b, 0xc1, 0x95, 0x5b, 0xc4, 0x95, 0x28, 0x6e, 0xd4, 0xe1, 0xb2, 0xd8, 0xe5, 0x28, 0x6e,
		0x24, 0xa3, 0x0c, 0xc5, 0x8d, 0xda, 0xba, 0x0b, 0xc5, 0x8d, 0xd0, 0x6b, 0xd0, 0x6b, 0x28, 0x6e,
		0x94, 0x2d, 0x6e, 0x64, 0x9e, 0x42, 0x3a, 0x57, 0xdb, 0x58, 0xe0, 0x61, 0xa4, 0x9b, 0x67, 0x7b,
		0x92, 0x50, 0xa2, 0x33, 0x9b, 0xb4, 0xe7, 0x74, 0x84, 0x1b, 0x88, 0xcd, 0x73, 0x49, 0x67, 0x1f,
		0xcc, 0xc7, 0x4c, 0xd2, 0xf5, 0x77, 0x53, 0xc9, 0xf5, 0x48, 0xd2, 0xd9, 0xbd, 0xa7, 0x35, 0x91,
		0x74, 0xfa, 0x7d, 0x81, 0x7c, 0xd5, 0x6e, 0x74, 0x45, 0x31, 0xa6, 0x92, 0x6e, 0x26, 0x06, 0xaa,
		0xfa, 0xcc, 0xbe, 0x6e, 0x77, 0x23, 0xb1, 0xf0, 0xa8, 0x04, 0xe9, 0xb2, 0xdd, 0x4d, 0xf2, 0x82,
		0x28, 0x3f, 0x88, 0xa4, 0x95, 0x99, 0xe9, 0xa6, 0xf6, 0x34, 0xe5, 0xb2, 0xdc, 0xa4, 0x49, 0xd2,
		0x8c, 0xe1, 0x26, 0x4b, 0xaa, 0xd1, 0x05, 0x92, 0x13, 0x99, 0x13, 0x8f, 0x5b, 0xba, 0x4f, 0x43,
		0x83, 0x80, 0xc9, 0x84, 0xac, 0x43, 0xd0, 0x3c, 0x84, 0xad, 0x4b, 0xe0, 0x6c, 0x84, 0xce, 0x46,
		0xf0, 0x6c, 0x84, 0x4f, 0x0c, 0x00, 0x28, 0x9e, 0xbc, 0x2a, 0x43, 0x44, 0x17, 0xda, 0x9d, 0xd0,
		0xf9, 0x2e, 0xf4, 0xd7, 0xbc, 0x4f, 0xe1, 0xe8, 0x2f, 0x7a, 0x57, 0x49, 0x25, 0x71, 0xc7, 0x8a,
		0xf2, 0xb6, 0xeb, 0x9d, 0xce, 0x88, 0x5c, 0x0c, 0xc9, 0xce, 0x98, 0xec, 0x0c, 0xca, 0xce, 0xa8,
		0x34, 0x86, 0xd5, 0x08, 0x8f, 0x56, 0x78, 0x77, 0xbe, 0xab, 0x87, 0x26, 0x34, 0x43, 0x15, 0xfa,
		0x88, 0xa3, 0xc4, 0x94, 0xa7, 0xe7, 0x6b, 0x75, 0xed, 0xd0, 0xd6, 0x17, 0x5f, 0x0b, 0xd0, 0x20,
		0x7c, 0x20, 0x7c, 0x20, 0x7c, 0x48, 0x74, 0xa3, 0x5a, 0xf5, 0x9f, 0x28, 0x7a, 0x8e, 0x35, 0x60,
		0x68, 0xd5, 0xca, 0xcf, 0x7e, 0x9e, 0xb4, 0x77, 0xf4, 0xbf, 0x48, 0x64, 0xc7, 0xb5, 0xfd, 0x47,
		0x4d, 0x9a, 0x9d, 0xc7, 0xce, 0xb1, 0xde, 0xf6, 0xff, 0xbd, 0xbc, 0x20, 0x46, 0xb9, 0x67, 0x72,
		0x23, 0xd9, 0xbc, 0xd1, 0xc3, 0x4c, 0xee, 0x8b, 0x1e, 0x75, 0x34, 0xa5, 0x42, 0x87, 0xf5, 0x46,
		0x3d, 0x29, 0xdd, 0x6d, 0x0d, 0x2d, 0x09, 0x2d, 0x09, 0x2d, 0xc9, 0x2d, 0xf7, 0x34, 0xe5, 0xdd,
		0x30, 0x67, 0xd1, 0x0b, 0xc5, 0x64, 0x64, 0xec, 0x7a, 0xd9, 0xdc, 0xdb, 0x94, 0xe0, 0x66, 0xff,
		0x06, 0xd1, 0x1b, 0xa4, 0xf0, 0x5e, 0x45, 0x3e, 0x4f, 0xf7, 0x71, 0xf2, 0x3d, 0xb3, 0x7f, 0x83,
		0xe8, 0x0d, 0x99, 0x21, 0x2d, 0xf4, 0xb3, 0x50, 0x38, 0x07, 0x1d, 0x2d, 0xa1, 0xaf, 0x1d, 0x88,
		0x5a, 0x01, 0x91, 0x52, 0x44, 0x4a, 0x55, 0x65, 0x0d, 0x59, 0x8a, 0xbf, 0x50, 0xb9, 0xb0, 0xef,
		0x7c, 0x71, 0xa7, 0xd3, 0xdc, 0x71, 0x44, 0xb8, 0xf6, 0xcb, 0x54, 0xbc, 0xbd, 0x7e, 0x3d, 0x15,
		0x57, 0xfb, 0x73, 0xec, 0x96, 0x03, 0x01, 0x22, 0x37, 0x15, 0x6a, 0x8d, 0x4e, 0x94, 0x2b, 0x16,
		0x59, 0x89, 0x4f, 0xaa, 0xd8, 0xa8, 0x43, 0x6c, 0x40, 0x6c, 0x48, 0xdd, 0x25, 0x12, 0x2c, 0xf0,
		0xde, 0xe0, 0xbd, 0xc1, 0x7b, 0xdb, 0x9e, 0x04, 0x4b, 0x57, 0x04, 0x1d, 0xdf, 0xe9, 0x93, 0xbd,
		0xb2, 0x05, 0x9c, 0xcd, 0x03, 0x83, 0xe8, 0x81, 0xe8, 0x81, 0xe8, 0xd9, 0x96, 0xc0, 0x11, 0x41,
		0xf2, 0x88, 0x1f, 0x7d, 0x67, 0xd2, 0x40, 0x6f, 0x75, 0x29, 0x3e, 0x45, 0x0c, 0x6d, 0xcb, 0x00,
		0x21, 0x81, 0x20, 0x81, 0x20, 0x81, 0x48, 0x74, 0x33, 0x70, 0xdc, 0xb0, 0xd5, 0x60, 0x90, 0x40,
		0x3a, 0x13, 0x8a, 0x68, 0xbd, 0x9e, 0xcb, 0x3f, 0x0c, 0x89, 0x4c, 0x9d, 0x5e, 0x50, 0x66, 0xf1,
		0x12, 0x03, 0xa7, 0xd9, 0x2b, 0x1a, 0x83, 0xc7, 0xd0, 0x04, 0xc9, 0x44, 0xce, 0x8b, 0x47, 0x60,
		0xff, 0xc8, 0xfd, 0x11, 0xe8, 0xcd, 0x1a, 0x49, 0xfd, 0x54, 0x90, 0x43, 0x5f, 0x6d, 0x92, 0x88,
		0x2e, 0x93, 0x29, 0x22, 0x90, 0x3d, 0x87, 0x09, 0x02, 0x13, 0x04, 0xf1, 0x97, 0x75, 0xf7, 0xe8,
		0xb8, 0xd6, 0x20, 0x60, 0x70, 0x7e, 0xa6, 0x70, 0x20, 0x70, 0x20, 0x70, 0x20, 0x70, 0x20, 0x70,
		0xd6, 0x08, 0x9c, 0x20, 0x18, 0x08, 0xa6, 0x88, 0xcb, 0x1c, 0x2c, 0x08, 0x1e, 0x08, 0x1e, 0x08,
		0x1e, 0x04, 0x5b, 0x10, 0x6c, 0x41, 0xb0, 0x05, 0xc1, 0x16, 0x04, 0x5b, 0x36, 0xa3, 0x19, 0xad,
		0x7d, 0x30, 0x46, 0x60, 0x8c, 0xe4, 0xce, 0x18, 0x41, 0x6b, 0xdf, 0x0a, 0xd7, 0x10, 0xad, 0x7d,
		0xab, 0x11, 0x83, 0xd6, 0xbe, 0x34, 0x35, 0x25, 0x5a, 0xfb, 0xa0, 0x25, 0xa1, 0x25, 0x51, 0xa1,
		0x95, 0x96, 0xdc, 0xf9, 0x6e, 0xf7, 0x38, 0x44, 0xce, 0x04, 0x0c, 0xa4, 0x0d, 0xa4, 0x0d, 0xa4,
		0x0d, 0xcd, 0xfc, 0x2c, 0x60, 0x66, 0xa2, 0xdc, 0x9d, 0xc4, 0x94, 0x36, 0xb6, 0x0a, 0x43, 0x23,
		0xb1, 0xc4, 0x44, 0x64, 0xfa, 0x49, 0xf0, 0x0e, 0x6f, 0xfc, 0x5d, 0x3c, 0x92, 0xec, 0xcd, 0x6d,
		0x5c, 0x18, 0x25, 0x3b, 0x30, 0x96, 0x46, 0xf6, 0xda, 0xe4, 0x5e, 0x55, 0xea, 0x0f, 0xd5, 0x21,
		0xf0, 0x6a, 0xa9, 0xa7, 0xa6, 0x2f, 0xe3, 0x97, 0x6f, 0x68, 0xfa, 0x32, 0x3e, 0x8b, 0x39, 0x34,
		0x5d, 0x62, 0xd4, 0xb7, 0x12, 0x3a, 0xb4, 0xa6, 0xa5, 0x7b, 0xf7, 0xf7, 0x23, 0x13, 0x7f, 0xf3,
		0xb4, 0xf4, 0xe9, 0x07, 0x73, 0x32, 0x2d, 0xdd, 0xbb, 0x2f, 0xe6, 0xa4, 0x74, 0xef, 0x3e, 0xb5,
		0x29, 0xe9, 0x1d, 0xcf, 0x0d, 0xbc, 0x9e, 0x90, 0x1f, 0x92, 0x3e, 0xbb, 0xa0, 0x20, 0x33, 0xd2,
		0xbd, 0xfb, 0x72, 0xce, 0x47, 0xf7, 0xee, 0x73, 0x33, 0x1b, 0x5d, 0x71, 0xd0, 0x34, 0x6d, 0xc0,
		0x74, 0xee, 0x27, 0xa3, 0x7b, 0xf7, 0xdb, 0x39, 0x15, 0xdd, 0xbb, 0xcf, 0x6a, 0x22, 0xba, 0x71,
		0x0b, 0x70, 0xa2, 0xcc, 0xf6, 0xa7, 0x12, 0x4f, 0x7d, 0x62, 0x92, 0xac, 0x82, 0x9e, 0x7c, 0xcf,
		0xcd, 0xdb, 0xc9, 0xf7, 0x28, 0x0d, 0x48, 0xe2, 0xd9, 0x72, 0x15, 0x88, 0x9e, 0xe8, 0x84, 0x9e,
		0x1f, 0xa8, 0x33, 0xf1, 0xcb, 0xa5, 0xe0, 0x63, 0xf0, 0x31, 0x89, 0x8f, 0x95, 0x37, 0x1b, 0xcc,
		0x68, 0x4e, 0x63, 0xf2, 0xce, 0x0c, 0xc2, 0x96, 0x6c, 0x37, 0xf0, 0xee, 0x31, 0x78, 0x47, 0x97,
		0xe8, 0xd3, 0x89, 0xe6, 0x91, 0x87, 0xee, 0x10, 0xd7, 0x7d, 0xe8, 0x59, 0x65, 0x4c, 0x0c, 0x92,
		0xdf, 0x0c, 0x85, 0x77, 0x8f, 0xec, 0x44, 0x5a, 0x8c, 0x95, 0x4d, 0x66, 0x82, 0xca, 0x70, 0x11,
		0x80, 0x3b, 0xbb, 0xe3, 0xf4, 0x54, 0x16, 0x83, 0x6e, 0x24, 0xbc, 0x08, 0xa2, 0xe6, 0xa1, 0xf0,
		0x54, 0x9b, 0x6a, 0x33, 0x25, 0x27, 0x73, 0xf2, 0x33, 0x29, 0x37, 0xb3, 0x1a, 0x63, 0x5a, 0x63,
		0xcc, 0x6b, 0x84, 0x89, 0xf5, 0x98, 0x59, 0x93, 0xa9, 0xa3, 0x27, 0xd2, 0x4e, 0x3b, 0xc6, 0xe8,
		0xcd, 0xe9, 0x0a, 0x37, 0x74, 0xc2, 0x47, 0xda, 0x34, 0xcc, 0x44, 0x7d, 0xc9, 0x50, 0xae, 0x5d,
		0xfd, 0x30, 0xbd, 0xb5, 0x5f, 0xec, 0x80, 0x91, 0x8c, 0x67, 0x0f, 0x7e, 0xf1, 0x3f, 0x17, 0x1f,
		0xcf, 0x7f, 0xbd, 0x79, 0x7f, 0xfa, 0xf6, 0xc3, 0xc7, 0x0f, 0x97, 0xff, 0x53, 0xe5, 0x2c, 0x61,
		0x0f, 0xb4, 0xeb, 0x1b, 0xe7, 0x7f, 0x9e, 0xd8, 0x20, 0x2d, 0x20, 0xe0, 0xed, 0xf9, 0xe7, 0x8b,
		0xf3, 0x8f, 0x67, 0x55, 0x36, 0xe8, 0xc3, 0xbd, 0xbc, 0x3f, 0xf2, 0xc7, 0xf3, 0xb7, 0xa7, 0x1f,
		0x0f, 0xb7, 0xe9, 0x89, 0x4f, 0x3f, 0x7e, 0xdc, 0xaa, 0xc7, 0xfd, 0xf7, 0xe5, 0x6f, 0x5b, 0x47,
		0xd0, 0x07, 0xdb, 0xf4, 0xc4, 0xbf, 0x9f, 0x7d, 0xfd, 0x7c, 0xf6, 0x71, 0xeb, 0xce, 0xb8, 0xb6,
		0x75, 0x4f, 0x5c, 0xdf, 0xba, 0x27, 0x6e, 0x6c, 0x97, 0xa4, 0x7e, 0xf7, 0xe1, 0x72, 0x9b, 0x1e,
		0xf8, 0xdf, 0x17, 0x67, 0x5f, 0xb7, 0x8e, 0xa4, 0x9b, 0xdb, 0xf4, 0xc4, 0x9f, 0x4e, 0x3f, 0x6c,
		0x9f, 0x62, 0x3a, 0xda, 0xa6, 0x27, 0xfe, 0x7c, 0xf9, 0x65, 0x9b, 0x1e, 0x77, 0xe2, 0x22, 0x6f,
		0x9b, 0xff, 0xf0, 0xe5, 0xeb, 0x87, 0xff, 0x6c, 0x1d, 0x1b, 0xb7, 0xb6, 0x8c, 0xae, 0x2f, 0xcf,
		0x3e, 0xdd, 0xbc, 0x3b, 0x3d, 0xfb, 0x74, 0xfe, 0x99, 0xf1, 0xc1, 0x59, 0x20, 0xb5, 0x0b, 0x3b,
		0x8f, 0x40, 0xe3, 0xe0, 0xab, 0x81, 0xf8, 0x2e, 0x7c, 0xd6, 0xa4, 0x43, 0x04, 0x11, 0x49, 0x87,
		0x8d, 0xb8, 0x42, 0xd2, 0x01, 0x49, 0x87, 0xe4, 0x27, 0xe2, 0x4f, 0x3a, 0x04, 0x8f, 0x41, 0xcf,
		0xbb, 0xb7, 0x98, 0x58, 0x74, 0x9e, 0x4d, 0x6b, 0x0d, 0x06, 0x58, 0x67, 0xee, 0xe0, 0x61, 0xf4,
		0xc0, 0x99, 0x09, 0xd2, 0x54, 0x13, 0xc6, 0x9a, 0xfd, 0x56, 0x2f, 0x22, 0x9c, 0x58, 0x86, 0x18,
		0x55, 0xdc, 0x45, 0xaf, 0xf6, 0xb5, 0x6a, 0x36, 0x2a, 0xf4, 0x4a, 0xc5, 0x8b, 0xd9, 0xad, 0x44,
		0xaf, 0x48, 0xdb, 0x1d, 0xe9, 0xe7, 0x48, 0x69, 0xe4, 0xd5, 0xce, 0xd7, 0x73, 0xe5, 0xe9, 0x4b,
		0xd7, 0xce, 0x8b, 0x62, 0x99, 0xf4, 0x55, 0x5e, 0x51, 0xdb, 0x78, 0xe9, 0x1b, 0x25, 0x63, 0x2a,
		0xec, 0x48, 0x03, 0x46, 0x7c, 0xc3, 0x64, 0xc4, 0xd4, 0x39, 0x16, 0x61, 0xda, 0xd6, 0x3f, 0x97,
		0xd5, 0x0f, 0x11, 0x06, 0x11, 0x06, 0x11, 0x96, 0x37, 0x11, 0x16, 0x31, 0x75, 0x9e, 0x45, 0x58,
		0xc8, 0x32, 0x74, 0x99, 0x3a, 0x7b, 0xa0, 0xc2, 0x59, 0xac, 0x5c, 0x87, 0xf0, 0x82, 0xf0, 0x4a,
		0x45, 0x78, 0xa1, 0x58, 0x19, 0x71, 0x43, 0xc4, 0x0d, 0x11, 0x37, 0x94, 0xa4, 0x37, 0x14, 0x2b,
		0xa3, 0x58, 0x99, 0xe9, 0x07, 0xc5, 0xca, 0xf9, 0x7b, 0x62, 0x14, 0x2b, 0x97, 0x9f, 0xa0, 0x51,
		0xac, 0x5c, 0xfe, 0x33, 0x46, 0xb1, 0x72, 0xf9, 0x9f, 0x18, 0xc5, 0xca, 0x65, 0x7e, 0x60, 0x14,
		0x2b, 0x97, 0xfd, 0x89, 0x51, 0xac, 0x5c, 0xf6, 0x27, 0x46, 0xb1, 0xf2, 0x16, 0xf8, 0x0f, 0x28,
		0x56, 0xde, 0x02, 0xba, 0x46, 0xb1, 0x32, 0xff, 0xd5, 0x28, 0x56, 0x5e, 0x03, 0x06, 0x49, 0x07,
		0x1a, 0xf6, 0x91, 0x74, 0x40, 0xb1, 0xb2, 0x02, 0x9b, 0xa2, 0x58, 0x59, 0x9d, 0x60, 0xf3, 0x57,
		0xac, 0xac, 0x53, 0xb2, 0x51, 0x61, 0xad, 0x55, 0x26, 0x2c, 0x90, 0xa0, 0x9f, 0xa2, 0xd9, 0xb1,
		0x81, 0xd3, 0x05, 0x13, 0xb3, 0x64, 0x7c, 0x85, 0xc8, 0x7d, 0xb4, 0x7d, 0x13, 0xd1, 0xd5, 0xe4,
		0xbd, 0x13, 0x2f, 0x10, 0x18, 0xf7, 0x4f, 0x44, 0x40, 0x49, 0x7b, 0x28, 0xa8, 0x27, 0x91, 0xda,
		0x3a, 0x96, 0x8d, 0x9c, 0x66, 0x70, 0x25, 0xcb, 0x46, 0xde, 0x2a, 0xc6, 0x5a, 0x96, 0xb4, 0x27,
		0x48, 0xab, 0x0e, 0x4b, 0xe6, 0x38, 0x92, 0x54, 0xe7, 0x48, 0x2b, 0x15, 0xf5, 0x91, 0x8a, 0xf8,
		0xc8, 0xf3, 0xa3, 0xeb, 0x98, 0x1f, 0xcd, 0x69, 0x22, 0x6f, 0xf1, 0x1c, 0x78, 0x55, 0x03, 0x86,
		0xca, 0xc1, 0xf2, 0xd6, 0x49, 0x61, 0x77, 0x00, 0x2d, 0x62, 0x96, 0x71, 0x05, 0xd0, 0x22, 0x2e,
		0xc9, 0x1b, 0x80, 0xd6, 0x6c, 0x8f, 0xf1, 0xc5, 0x83, 0x17, 0x0a, 0x2b, 0x10, 0xfe, 0x77, 0x21,
		0x31, 0x38, 0x3f, 0x92, 0x11, 0x4b, 0xd7, 0x61, 0x8d, 0x0a, 0xd6, 0xa8, 0xac, 0x20, 0x28, 0x75,
		0x25, 0xba, 0x78, 0x39, 0x96, 0x31, 0x40, 0x99, 0x92, 0x94, 0xa9, 0xf2, 0x32, 0x06, 0xe2, 0xdc,
		0x79, 0xbd, 0x79, 0xf3, 0x58, 0xc4, 0x90, 0x49, 0xa0, 0x15, 0x8b, 0x18, 0x24, 0x2e, 0xfc, 0xe6,
		0x05, 0xa1, 0x7e, 0x63, 0xd3, 0x18, 0x0a, 0x9a, 0x32, 0xd1, 0xd7, 0x94, 0x32, 0x53, 0x65, 0x13,
		0xa6, 0xe6, 0x6b, 0xca, 0xd4, 0xe0, 0x9b, 0x05, 0xc5, 0x72, 0xac, 0x01, 0x63, 0xfa, 0x34, 0x7a,
		0x4d, 0x02, 0x9c, 0x6d, 0x20, 0x7d, 0xcb, 0xee, 0x76, 0x7d, 0x11, 0x04, 0x9c, 0xc9, 0x98, 0x63,
		0x06, 0x58, 0x2c, 0x98, 0xe2, 0xc3, 0xd8, 0x0a, 0xcc, 0x7d, 0x6f, 0x30, 0xe2, 0x2e, 0x86, 0xc3,
		0x37, 0x8c, 0x30, 0xbf, 0xd8, 0x61, 0x28, 0x7c, 0x97, 0xb5, 0x3b, 0x65, 0x0c, 0xf8, 0xaf, 0x9d,
		0x9d, 0xab, 0x03, 0xeb, 0xb8, 0xfd, 0x7c, 0x55, 0xb3, 0x8e, 0xdb, 0x93, 0x97, 0xb5, 0xf1, 0x3f,
		0x93, 0xd7, 0xf5, 0xab, 0x03, 0xab, 0x31, 0x7b, 0xdd, 0xbc, 0x3a, 0xb0, 0x9a, 0xed, 0xdd, 0xeb,
		0xeb, 0xd7, 0xbb, 0x4f, 0x87, 0x43, 0xf5, 0x0b, 0x7f, 0xe2, 0x2b, 0xd9, 0x68, 0x73, 0x22, 0xf7,
		0xfc, 0xe2, 0xc3, 0x1f, 0xc0, 0xf0, 0x32, 0x86, 0x59, 0x20, 0x31, 0xd5, 0x14, 0x99, 0x61, 0xff,
		0x16, 0xd8, 0x7f, 0x42, 0x9c, 0xb6, 0x75, 0x77, 0x6a, 0xbd, 0x6f, 0x3f, 0xd5, 0xf6, 0x1a, 0xc3,
		0x93, 0xdd, 0xa7, 0xa3, 0xe1, 0xf2, 0x9b, 0xcf, 0xab, 0x3e, 0x56, 0xdb, 0x3b, 0x1a, 0x9e, 0x24,
		0xfc, 0xa5, 0x35, 0x3c, 0x91, 0x84, 0xd1, 0x1c, 0xee, 0xc4, 0x3e, 0x3a, 0x7a, 0xbf, 0x9e, 0x74,
		0x41, 0x23, 0xe1, 0x82, 0xc3, 0xa4, 0x0b, 0x0e, 0x13, 0x2e, 0x48, 0xbc, 0xa5, 0x7a, 0xc2, 0x05,
		0xcd, 0xe1, 0x73, 0xec, 0xf3, 0x3b, 0xab, 0x3f, 0xda, 0x1a, 0xee, 0x3e, 0x27, 0xfd, 0xed, 0x68,
		0xf8, 0x7c, 0xb2, 0xbb, 0xd5, 0xc2, 0x10, 0xf4, 0x56, 0x6c, 0x7a, 0xe3, 0x51, 0x0d, 0xaf, 0xb2,
		0xbd, 0x0f, 0x4d, 0xd5, 0xc4, 0x68, 0xc3, 0x77, 0xbd, 0x07, 0xdb, 0x71, 0xad, 0x71, 0xe2, 0x83,
		0xd1, 0x88, 0x67, 0xd0, 0x40, 0xd5, 0x8f, 0xc2, 0xbd, 0x1f, 0x67, 0x7a, 0x72, 0x67, 0xc6, 0x7f,
		0x72, 0x5c, 0xb6, 0x6a, 0x45, 0xa6, 0xe8, 0x4a, 0x22, 0xd8, 0x71, 0x6f, 0x39, 0x7d, 0x1a, 0x4d,
		0x22, 0xdc, 0xf7, 0xbe, 0xdd, 0x09, 0x1d, 0xcf, 0x7d, 0xe7, 0xdc, 0x3b, 0x93, 0xb2, 0x9c, 0x3c,
		0x16, 0x83, 0x57, 0x3f, 0xd9, 0x3f, 0x0a, 0x77, 0x54, 0xf5, 0xe6, 0x61, 0x81, 0x0e, 0x2b, 0x2f,
		0x02, 0x99, 0x41, 0xe2, 0x70, 0xdb, 0x1e, 0x23, 0x9b, 0x63, 0x67, 0xe7, 0xca, 0xb6, 0xfe, 0x39,
		0xb5, 0xfe, 0x3c, 0xb0, 0x8e, 0x6f, 0xda, 0x73, 0xbf, 0x5c, 0x5f, 0x5b, 0x37, 0xed, 0xdd, 0xa7,
		0x83, 0xbd, 0x56, 0x6d, 0xb8, 0xfb, 0xf3, 0xcb, 0xfb, 0xed, 0x91, 0x07, 0xf6, 0x2f, 0xca, 0x55,
		0x3f, 0xef, 0x3e, 0x8f, 0xae, 0x65, 0xd0, 0xb6, 0x2c, 0xc8, 0x34, 0x61, 0xcd, 0x15, 0x17, 0xa3,
		0x19, 0x95, 0x05, 0xb7, 0x73, 0x3c, 0xab, 0x6d, 0x9a, 0x5a, 0xee, 0x7b, 0x3e, 0x43, 0x62, 0x63,
		0x1e, 0x18, 0x75, 0x0a, 0x96, 0xb8, 0xb3, 0x07, 0xbd, 0x71, 0x98, 0xbb, 0x59, 0x6b, 0x20, 0x4b,
		0x82, 0x2c, 0x89, 0x0a, 0x40, 0x64, 0x49, 0x2a, 0xd5, 0x11, 0xf7, 0x59, 0xee, 0xe0, 0xe1, 0x56,
		0xf8, 0x0c, 0xc9, 0x92, 0x96, 0x06, 0x88, 0xaf, 0xb6, 0x7b, 0x9f, 0x8b, 0x64, 0x09, 0xa7, 0xaf,
		0xc0, 0x6c, 0x78, 0x46, 0x06, 0x27, 0x17, 0x3c, 0x03, 0x66, 0x26, 0x83, 0x2f, 0xc0, 0xea, 0x03,
		0x98, 0x3a, 0x82, 0x56, 0xb3, 0x79, 0xd8, 0xcc, 0xf1, 0x31, 0xc0, 0x7c, 0x89, 0xa1, 0x39, 0x18,
		0xab, 0xb6, 0x28, 0x8e, 0xaf, 0x3f, 0x73, 0x76, 0x11, 0x1e, 0xcc, 0x0f, 0x98, 0x1f, 0x30, 0x3f,
		0x94, 0xe8, 0x85, 0xa5, 0x20, 0xa1, 0xa4, 0xa5, 0x1a, 0xac, 0x05, 0x07, 0xac, 0x71, 0x5e, 0x13,
		0x31, 0x82, 0x42, 0xa5, 0xbd, 0x73, 0x1d, 0x6d, 0x29, 0x16, 0x26, 0x4b, 0x92, 0x95, 0x61, 0x2e,
		0x10, 0x28, 0x04, 0xbb, 0x22, 0x31, 0x5b, 0xc8, 0xc4, 0x6c, 0xee, 0x85, 0x17, 0xe8, 0xaa, 0x98,
		0x74, 0x55, 0x76, 0x8f, 0xb3, 0x54, 0xd3, 0x02, 0x16, 0xbb, 0x0f, 0x17, 0x7f, 0xa5, 0xaf, 0x11,
		0x54, 0xec, 0xca, 0xfc, 0x3a, 0xfe, 0xd6, 0x8b, 0xc9, 0x3d, 0x2c, 0xfc, 0x46, 0x5a, 0x1f, 0xa8,
		0x30, 0x3d, 0x40, 0xa1, 0x99, 0x8c, 0xd4, 0xc6, 0xa1, 0x53, 0x86, 0x4e, 0x8c, 0x08, 0xa0, 0xa7,
		0x09, 0x3d, 0x4d, 0xc6, 0x3d, 0x78, 0x86, 0x9d, 0x57, 0x3a, 0xbb, 0xae, 0x56, 0xec, 0xb8, 0x1a,
		0x33, 0x58, 0x0e, 0xc4, 0xc4, 0xcb, 0x48, 0x0f, 0xb2, 0xac, 0xa0, 0x4c, 0x05, 0xa9, 0xa0, 0x09,
		0x12, 0x02, 0xa3, 0x92, 0xdf, 0x26, 0xc8, 0x68, 0x06, 0x11, 0xc3, 0x86, 0x4a, 0xf2, 0x34, 0xa3,
		0x0a, 0xe7, 0x92, 0x37, 0xc4, 0xd9, 0x11, 0x67, 0x4f, 0x27, 0xce, 0xae, 0xbd, 0xe4, 0x8d, 0xd8,
		0x92, 0x9f, 0x48, 0x76, 0xda, 0xeb, 0xc5, 0x19, 0x18, 0x91, 0x8d, 0x21, 0x39, 0x19, 0x93, 0x9f,
		0x41, 0xb9, 0x19, 0xd5, 0x18, 0xc3, 0x1a, 0x63, 0x5c, 0x23, 0x0c, 0xac, 0x1f, 0x6e, 0x60, 0x88,
		0x3b, 0x6b, 0x33, 0x76, 0x04, 0x88, 0x6d, 0x8b, 0x63, 0x8c, 0x80, 0x99, 0xb6, 0x39, 0x6a, 0xfa,
		0xb4, 0xc6, 0x99, 0xdf, 0x84, 0x10, 0x30, 0x27, 0x0c, 0x4c, 0x09, 0x05, 0xe3, 0xc2, 0xc1, 0xb8,
		0x90, 0x30, 0x2a, 0x2c, 0x78, 0x84, 0x06, 0x93, 0xf0, 0xd0, 0xf7, 0xe1, 0x37, 0xd2, 0x2b, 0xef,
		0xb6, 0xc8, 0x98, 0xde, 0x6f, 0x32, 0xc2, 0x34, 0xb2, 0x3d, 0x32, 0x86, 0x10, 0x33, 0x5b, 0x24,
		0xa3, 0xaf, 0x31, 0xb0, 0x4d, 0x72, 0xf6, 0xf3, 0xc4, 0x0e, 0xb1, 0x62, 0x74, 0xbb, 0x24, 0x33,
		0x93, 0xa4, 0x88, 0x0a, 0xee, 0xad, 0x93, 0xc5, 0xc5, 0x04, 0xeb, 0x36, 0xca, 0x02, 0xa3, 0x81,
		0x75, 0x4b, 0x65, 0xc1, 0x19, 0xe3, 0x00, 0x98, 0xe0, 0xdf, 0x6a, 0x59, 0x70, 0x9a, 0xa8, 0x01,
		0x13, 0xfc, 0x5b, 0x30, 0x0b, 0x8e, 0x89, 0x06, 0x30, 0xc1, 0xbe, 0x35, 0xb3, 0xb8, 0x88, 0xe0,
		0xdd, 0xa6, 0x59, 0x70, 0xd6, 0x68, 0x02, 0x13, 0xdc, 0xdb, 0x37, 0x0b, 0x4e, 0x11, 0x47, 0xc0,
		0x04, 0xf3, 0xb6, 0xce, 0xe2, 0xa2, 0x81, 0x7b, 0x8b, 0x67, 0xb1, 0xfd, 0x2e, 0xde, 0xed, 0x9e,
		0x05, 0x17, 0x13, 0x2d, 0x60, 0xc2, 0xd8, 0x36, 0xd0, 0x08, 0x21, 0xac, 0x10, 0xdb, 0xa5, 0x1b,
		0xf6, 0xc2, 0xd1, 0x15, 0xcc, 0xb6, 0x3d, 0x34, 0x46, 0x1c, 0x8c, 0x2b, 0x0a, 0x2b, 0x48, 0x76,
		0x21, 0xd9, 0x35, 0xfd, 0x02, 0x24, 0xbb, 0x0a, 0x90, 0xec, 0xe2, 0xdf, 0x52, 0xba, 0x2c, 0x06,
		0x38, 0xb6, 0x95, 0x46, 0x30, 0x79, 0xb6, 0x96, 0x32, 0x0a, 0xf6, 0x4c, 0x0b, 0x29, 0x98, 0xb6,
		0x9a, 0xbe, 0xa8, 0x18, 0xce, 0x2e, 0x8a, 0x15, 0x2b, 0x4f, 0x59, 0x0a, 0xa8, 0x2a, 0xac, 0x8d,
		0x16, 0x2b, 0xd6, 0xa1, 0x52, 0x7a, 0x2f, 0xf8, 0xe8, 0x42, 0x67, 0xc1, 0x38, 0x5b, 0x3d, 0x0c,
		0x77, 0x1d, 0x0c, 0x16, 0x8c, 0x67, 0xa9, 0xf2, 0x51, 0xf4, 0x96, 0x03, 0x59, 0xcd, 0xbf, 0x60,
		0x9c, 0xde, 0x83, 0x92, 0xa8, 0xaa, 0x8f, 0x78, 0xfa, 0xad, 0x97, 0x7a, 0x54, 0x22, 0x21, 0x52,
		0x40, 0x91, 0xca, 0xe6, 0x75, 0x71, 0x7b, 0x5b, 0x10, 0xa9, 0x10, 0xa9, 0x10, 0xa9, 0xdb, 0x2a,
		0x52, 0x23, 0x21, 0x52, 0x44, 0x91, 0xaa, 0xb4, 0x1d, 0x7b, 0xb3, 0x3c, 0x55, 0x5c, 0x43, 0xbc,
		0xf6, 0xb4, 0xb8, 0x84, 0x69, 0x1d, 0xc2, 0x14, 0xc2, 0xb4, 0x50, 0xc2, 0x14, 0x4d, 0x19, 0xba,
		0xe0, 0x10, 0xa7, 0x46, 0x9c, 0x3a, 0x35, 0x61, 0xc1, 0x17, 0xc2, 0xac, 0xa0, 0x29, 0x03, 0x4d,
		0x19, 0xb1, 0xaf, 0x41, 0x53, 0x86, 0x29, 0x26, 0x49, 0x11, 0x15, 0x68, 0xca, 0x40, 0x53, 0x46,
		0x05, 0x4d, 0x19, 0x09, 0x8c, 0x81, 0xa6, 0x0c, 0x34, 0x65, 0xa0, 0x29, 0x23, 0x09, 0x13, 0x68,
		0xca, 0x40, 0x53, 0x06, 0x9a, 0x32, 0xe2, 0x88, 0x40, 0x53, 0x06, 0x9a, 0x32, 0x16, 0x31, 0x81,
		0xa6, 0x0c, 0x34, 0x65, 0x2c, 0x62, 0x02, 0x4d, 0x19, 0x68, 0xca, 0xa8, 0xa0, 0x29, 0x63, 0x8d,
		0x98, 0x40, 0x53, 0x06, 0x9a, 0x32, 0xb2, 0x86, 0x82, 0xa6, 0x0c, 0x0d, 0x70, 0x48, 0x76, 0x21,
		0xd9, 0xb5, 0xf2, 0x0b, 0x90, 0xec, 0x62, 0xe0, 0x7d, 0x34, 0x65, 0x64, 0x07, 0x61, 0xdb, 0x9a,
		0x32, 0x38, 0xea, 0xa7, 0x2a, 0xa6, 0x7b, 0x32, 0x2e, 0xc6, 0x37, 0x99, 0x55, 0xb1, 0x5b, 0xaa,
		0x63, 0x8f, 0x7f, 0x17, 0x8f, 0xf3, 0xc5, 0x2e, 0x15, 0x4d, 0x29, 0x50, 0xfd, 0xe8, 0x04, 0xe1,
		0x69, 0x18, 0x6a, 0xce, 0x52, 0xfe, 0xe4, 0xb8, 0x67, 0x3d, 0x31, 0x12, 0xec, 0x81, 0x9e, 0xd2,
		0xaf, 0x7e, 0xb2, 0x7f, 0xcc, 0x41, 0xaa, 0xbd, 0x69, 0x34, 0x5a, 0x47, 0x8d, 0xc6, 0xc1, 0xd1,
		0xe1, 0xd1, 0xc1, 0x71, 0xb3, 0x59, 0x6b, 0xe9, 0xe4, 0xe2, 0xab, 0xe7, 0x7e, 0x57, 0xf8, 0xa2,
		0xfb, 0xcb, 0x08, 0x85, 0xee, 0xa0, 0xd7, 0x4b, 0xf5, 0xe4, 0x98, 0x38, 0xdf, 0x34, 0xc7, 0x57,
		0xb5, 0x6a, 0x37, 0x8d, 0xf1, 0x78, 0x15, 0x8b, 0x8c, 0x8c, 0x9d, 0x7d, 0xa6, 0xbb, 0x8c, 0xa2,
		0xa3, 0xce, 0xc5, 0x9e, 0x12, 0x52, 0xf1, 0xb1, 0x56, 0xb1, 0xb1, 0xf6, 0x7e, 0x92, 0x3a, 0xf6,
		0x93, 0x64, 0xe9, 0xea, 0x94, 0x79, 0x3f, 0x09, 0x69, 0xbb, 0x57, 0x8c, 0x58, 0x08, 0x5b, 0xbe,
		0x98, 0xe2, 0x12, 0xd8, 0x4b, 0x92, 0x4e, 0x1c, 0x01, 0x7b, 0x49, 0x18, 0xfd, 0x7e, 0x0e, 0xbe,
		0xa9, 0x94, 0x77, 0xf3, 0xb7, 0x89, 0x45, 0xc2, 0xc7, 0x0c, 0xb0, 0x58, 0x30, 0xc5, 0x87, 0xb1,
		0x15, 0x98, 0x63, 0xdd, 0x99, 0x1e, 0xc3, 0xe1, 0x1b, 0x46, 0x98, 0xdc, 0xcb, 0x73, 0x23, 0xc0,
		0x45, 0xdb, 0x00, 0x3e, 0xfb, 0x69, 0x73, 0x22, 0xd7, 0xc4, 0x7a, 0xe2, 0xe2, 0x63, 0x38, 0x4f,
		0xc1, 0x63, 0x33, 0xec, 0xdf, 0x02, 0xfb, 0x63, 0x87, 0x76, 0x81, 0x77, 0x68, 0x17, 0x56, 0x18,
		0x82, 0xde, 0x8a, 0x4d, 0x6f, 0x39, 0x49, 0x5c, 0xb5, 0xb3, 0x4c, 0x5c, 0x31, 0xda, 0xf0, 0x5d,
		0xef, 0xc1, 0x76, 0x5c, 0x6b, 0x1c, 0x3b, 0x64, 0x34, 0xe2, 0x19, 0x34, 0x50, 0xf5, 0xa3, 0x70,
		0xef, 0xc7, 0xb1, 0xd5, 0xdc, 0x99, 0xf1, 0x9f, 0x1c, 0xd7, 0x40, 0x3d, 0x01, 0x6b, 0xd5, 0x47,
		0x04, 0x76, 0xdc, 0x1d, 0xa8, 0x3f, 0x2f, 0x21, 0x06, 0xf7, 0xbd, 0x6f, 0x77, 0x42, 0xc7, 0x73,
		0xdf, 0x39, 0xf7, 0xce, 0x24, 0xd1, 0xc4, 0x57, 0x3b, 0xc0, 0xa8, 0x53, 0x3e, 0xd9, 0x3f, 0x0a,
		0x77, 0x54, 0xf5, 0xe6, 0x61, 0x81, 0x0e, 0x2b, 0x2f, 0x02, 0x99, 0x67, 0x78, 0x0b, 0xab, 0xed,
		0x31, 0xb2, 0x39, 0x76, 0x76, 0xae, 0x6c, 0xeb, 0x9f, 0x53, 0xeb, 0xcf, 0x03, 0xeb, 0xf8, 0xa6,
		0x3d, 0xf7, 0xcb, 0xf5, 0xb5, 0x75, 0xd3, 0xde, 0x7d, 0x3a, 0xd8, 0x6b, 0xd5, 0x86, 0xbb, 0x3f,
		0xbf, 0xbc, 0xdf, 0x1e, 0x79, 0x60, 0xff, 0xa2, 0x5c, 0xf5, 0xf3, 0xee, 0xf3, 0xe8, 0x5a, 0x06,
		0x6d, 0xcb, 0x82, 0x4c, 0x13, 0xd6, 0x5c, 0x71, 0x31, 0x9a, 0x51, 0x41, 0x44, 0x3b, 0xad, 0x54,
		0x2d, 0x21, 0xfd, 0x34, 0xcd, 0x80, 0xf6, 0x3d, 0x9f, 0x21, 0xb1, 0x31, 0x0f, 0x8c, 0xba, 0xc5,
		0x5a, 0xdc, 0xd9, 0x83, 0xde, 0x38, 0xcc, 0xdd, 0xac, 0x35, 0x90, 0x25, 0x41, 0x96, 0x44, 0x05,
		0x20, 0xb2, 0x24, 0x95, 0xea, 0x88, 0xfb, 0x2c, 0x77, 0xf0, 0x70, 0x2b, 0x7c, 0x86, 0x64, 0x49,
		0x4b, 0x03, 0xc4, 0x57, 0xdb, 0xbd, 0xcf, 0x45, 0xb2, 0x84, 0xd3, 0x57, 0xe0, 0xae, 0x0c, 0x9f,
		0x19, 0x9c, 0x5c, 0xf0, 0x0c, 0x98, 0x99, 0x1c, 0x95, 0xff, 0x9c, 0x3e, 0x80, 0xa9, 0x23, 0x68,
		0x35, 0x9b, 0x87, 0xcd, 0x1c, 0x1f, 0x03, 0xcc, 0x97, 0x18, 0x9a, 0x83, 0xb1, 0x6a, 0x8b, 0xe2,
		0xf8, 0xda, 0x16, 0xcc, 0x12, 0x3c, 0x98, 0x1f, 0x30, 0x3f, 0x60, 0x7e, 0x28, 0xd1, 0x0b, 0x4b,
		0x41, 0x42, 0x49, 0x4b, 0x35, 0x58, 0x0b, 0x0e, 0x58, 0xe3, 0xbc, 0x26, 0x62, 0x04, 0x85, 0x4a,
		0x7b, 0xe7, 0x3a, 0xda, 0x52, 0x2c, 0x4c, 0x96, 0x24, 0x2b, 0xc3, 0x5c, 0x20, 0x50, 0x08, 0x76,
		0x45, 0x62, 0xb6, 0x90, 0x89, 0xd9, 0xdc, 0x0b, 0x2f, 0xd0, 0x55, 0x31, 0xe9, 0xaa, 0xec, 0x1e,
		0xe7, 0x16, 0xf5, 0x36, 0x11, 0xdb, 0x56, 0x19, 0xfb, 0x9a, 0xd4, 0x7b, 0x52, 0x15, 0x7a, 0x9a,
		0x5e, 0x31, 0x9e, 0xe0, 0xac, 0xa7, 0x54, 0xa1, 0xde, 0x9c, 0xd6, 0x36, 0x4a, 0x6f, 0x13, 0x65,
		0x6d, 0x0b, 0xa5, 0xb5, 0x81, 0xca, 0x22, 0x93, 0xc8, 0x06, 0xac, 0xe4, 0x5f, 0x55, 0x6a, 0x79,
		0xe3, 0x21, 0x78, 0x39, 0x52, 0xdf, 0x4c, 0xb8, 0xeb, 0x3f, 0xb1, 0xe1, 0x14, 0x54, 0xb1, 0xaf,
		0x89, 0x75, 0x09, 0x3c, 0xeb, 0xe0, 0x77, 0x3d, 0x4a, 0x93, 0x11, 0xb5, 0xfa, 0x2f, 0x09, 0xa8,
		0x93, 0x45, 0x99, 0x2a, 0xaa, 0xd6, 0xe0, 0x46, 0x0d, 0x27, 0xab, 0xb1, 0x10, 0x7f, 0xc6, 0x15,
		0xcf, 0x57, 0x7d, 0x10, 0x0f, 0x9e, 0x9f, 0x3c, 0x7e, 0x27, 0x72, 0x7e, 0xa6, 0x9f, 0x4b, 0xc0,
		0xd0, 0xfa, 0x0e, 0xcd, 0x8d, 0xf1, 0x4b, 0x99, 0xf8, 0xe4, 0x7c, 0xfc, 0x31, 0x78, 0x5c, 0x47,
		0x58, 0xb2, 0xf1, 0x45, 0xe5, 0xf8, 0xa1, 0x72, 0x7c, 0x70, 0x39, 0xfe, 0x37, 0xba, 0x6f, 0x26,
		0x9a, 0xdc, 0xd4, 0xb1, 0x58, 0xed, 0xcc, 0x70, 0xbe, 0x01, 0x09, 0x33, 0xb4, 0x4a, 0xed, 0x16,
		0x95, 0x6c, 0xc5, 0x95, 0x0e, 0x58, 0xab, 0x04, 0xa6, 0xe5, 0x09, 0x80, 0x1a, 0x68, 0x26, 0x07,
		0x94, 0xc9, 0x81, 0x63, 0x25, 0x02, 0xc9, 0xb7, 0xfc, 0x9f, 0x08, 0x08, 0xf9, 0x15, 0xb5, 0x92,
		0x22, 0xee, 0xd3, 0x18, 0xac, 0xd4, 0x4e, 0xd9, 0x35, 0xe2, 0x7e, 0xad, 0xa4, 0x95, 0x69, 0x68,
		0x57, 0x6a, 0x60, 0x57, 0xe6, 0x92, 0x3a, 0xb8, 0x24, 0x67, 0x5c, 0x22, 0xdb, 0x10, 0x5e, 0xed,
		0x7f, 0x7b, 0x0c, 0x9c, 0x8e, 0xdd, 0x93, 0x47, 0x5f, 0x54, 0x96, 0x31, 0xbb, 0x52, 0xd6, 0x07,
		0x51, 0xca, 0x21, 0x2a, 0xe7, 0x0c, 0x29, 0x39, 0x42, 0x75, 0x62, 0xd3, 0xcd, 0x01, 0x6a, 0xe7,
		0xfc, 0xb4, 0x73, 0x7c, 0x24, 0x62, 0x34, 0xe3, 0x95, 0x2a, 0xe7, 0xe8, 0xa2, 0xf3, 0x1a, 0x38,
		0x6e, 0xd8, 0x52, 0x29, 0xa6, 0x9b, 0x51, 0x9f, 0x42, 0xac, 0x9a, 0x58, 0xed, 0x43, 0x88, 0x8b,
		0xe8, 0x54, 0xf3, 0xe8, 0xa6, 0xe6, 0x35, 0xab, 0x75, 0x38, 0xca, 0x42, 0x28, 0x65, 0x12, 0x3a,
		0xd5, 0x37, 0x5c, 0x28, 0xe3, 0x1b, 0x5d, 0xc5, 0x82, 0x45, 0x43, 0x81, 0xa8, 0x36, 0x97, 0xd7,
		0x2f, 0xa1, 0xc9, 0x7d, 0x31, 0x76, 0xbb, 0xbb, 0xea, 0xca, 0x28, 0xba, 0x12, 0xca, 0x08, 0xca,
		0x08, 0xca, 0x08, 0xca, 0x08, 0xca, 0x08, 0xca, 0xa8, 0xa0, 0x21, 0x08, 0xd9, 0xcc, 0x96, 0x5a,
		0x04, 0x42, 0x22, 0x5b, 0x95, 0xd7, 0x78, 0xf3, 0xda, 0xd8, 0xad, 0x32, 0x26, 0xf4, 0xa2, 0xcd,
		0x41, 0x60, 0xdf, 0x8b, 0x40, 0x26, 0xde, 0x3c, 0xfd, 0x64, 0x3e, 0x22, 0xce, 0x1b, 0x6e, 0x27,
		0xdf, 0x61, 0xe7, 0xe8, 0xe6, 0x11, 0x7b, 0x66, 0x88, 0xaa, 0x49, 0x90, 0x42, 0x71, 0x43, 0x6b,
		0x9b, 0x49, 0x25, 0xe5, 0xf8, 0x9a, 0xf2, 0x82, 0x08, 0xea, 0x02, 0x88, 0xbc, 0xbb, 0x34, 0x0a,
		0x64, 0x57, 0x3e, 0xbf, 0x46, 0x9e, 0x2c, 0xf3, 0xe6, 0xdc, 0xd0, 0x57, 0x11, 0x50, 0x56, 0x0d,
		0x28, 0xae, 0x12, 0x28, 0xae, 0xa1, 0x37, 0x21, 0x07, 0x03, 0xd9, 0xa6, 0x09, 0x60, 0x83, 0xf9,
		0xa6, 0xae, 0xb8, 0x1d, 0xdc, 0x5b, 0xc2, 0x0d, 0x7d, 0x47, 0x04, 0xf2, 0x2a, 0x72, 0xf1, 0x32,
		0x68, 0x4a, 0x68, 0xca, 0xd5, 0x84, 0x15, 0x08, 0xff, 0xbb, 0xa3, 0x82, 0xc8, 0x45, 0x02, 0x9b,
		0x5d, 0xae, 0xa6, 0x33, 0x6b, 0xd0, 0x99, 0xd0, 0x99, 0x54, 0xc2, 0x55, 0xf5, 0x1a, 0xf4, 0xbc,
		0x08, 0x4d, 0x12, 0x26, 0x93, 0xb2, 0x0e, 0x49, 0x33, 0x91, 0xb6, 0x2e, 0x89, 0xb3, 0x91, 0x3a,
		0x1b, 0xc9, 0xf3, 0x91, 0x3e, 0x31, 0xf0, 0x96, 0xd6, 0x98, 0x79, 0xe1, 0xda, 0xb7, 0x3d, 0x85,
		0xbc, 0x4e, 0x22, 0xe5, 0xcc, 0x00, 0xe9, 0x0f, 0x63, 0xb9, 0xb3, 0x7b, 0x81, 0x40, 0x3f, 0xb4,
		0x2e, 0x33, 0x72, 0x31, 0x25, 0x3b, 0x73, 0xb2, 0x33, 0x29, 0x3f, 0xb3, 0xd2, 0x98, 0x56, 0x23,
		0x53, 0x51, 0xe1, 0xed, 0x8c, 0xbe, 0xf5, 0xbc, 0x9e, 0xb0, 0x5d, 0x8e, 0xb6, 0xe8, 0x5a, 0x9e,
		0x47, 0x32, 0x28, 0x9a, 0xa4, 0x6b, 0x22, 0x3a, 0x2a, 0xc6, 0x29, 0x84, 0x0e, 0x84, 0x0e, 0x84,
		0x4e, 0x8c, 0x72, 0x9c, 0xae, 0x70, 0x43, 0x27, 0x7c, 0xf4, 0xc5, 0x1d, 0x87, 0xe0, 0xd1, 0x59,
		0x36, 0xf7, 0x61, 0x7a, 0x2b, 0xbf, 0xd8, 0x01, 0x03, 0x0d, 0xce, 0x1e, 0xf0, 0xdd, 0xd9, 0x2f,
		0xff, 0xfe, 0xf5, 0xe6, 0xe2, 0xec, 0xeb, 0x7f, 0x3e, 0xbc, 0x3d, 0x4b, 0xfd, 0x7c, 0xb7, 0xb4,
		0xe5, 0x30, 0x8a, 0xc8, 0x2d, 0xc4, 0xa9, 0xf6, 0x17, 0x82, 0x0a, 0xfb, 0x24, 0x07, 0x8d, 0x12,
		0xbd, 0x7b, 0x37, 0xfa, 0xda, 0xb3, 0xc9, 0x3d, 0x4c, 0x7e, 0xb9, 0x98, 0xdc, 0x82, 0x54, 0x5c,
		0x8f, 0x7e, 0x42, 0x4a, 0x8b, 0xd4, 0x88, 0x5a, 0x51, 0x53, 0x1b, 0x12, 0xb5, 0x20, 0xfc, 0x5d,
		0xf8, 0xbb, 0xea, 0xd2, 0x87, 0xac, 0xb5, 0xa2, 0x93, 0xef, 0x09, 0xfb, 0x8e, 0xa6, 0xa9, 0x22,
		0x0d, 0x75, 0x44, 0xb8, 0xf6, 0xcb, 0x54, 0xe0, 0xbd, 0x7e, 0x3d, 0x15, 0x5a, 0xfb, 0x33, 0x6e,
		0xc3, 0x0a, 0x46, 0x92, 0xd4, 0xa8, 0x43, 0x6a, 0x40, 0x6a, 0x20, 0x4a, 0x06, 0x87, 0x15, 0x0e,
		0x2b, 0x1c, 0x56, 0x44, 0xc9, 0x10, 0x25, 0x83, 0xd0, 0x81, 0xd0, 0x41, 0x94, 0x0c, 0x51, 0x32,
		0x44, 0xc9, 0x96, 0xa3, 0x64, 0x86, 0x07, 0x73, 0x49, 0x04, 0xc9, 0x8a, 0x37, 0x98, 0x4b, 0xb1,
		0x6c, 0x09, 0xb3, 0xb9, 0x98, 0x39, 0x81, 0x95, 0x03, 0xf8, 0x67, 0x73, 0x6d, 0xa6, 0xf9, 0xea,
		0x76, 0xd4, 0xcb, 0xaa, 0x54, 0x91, 0xea, 0xe2, 0x17, 0xc3, 0x5a, 0x50, 0x2c, 0x9b, 0xdb, 0x62,
		0xd9, 0xe9, 0x0d, 0xa9, 0x97, 0xc9, 0xce, 0x2e, 0x34, 0x5c, 0x20, 0x5b, 0x47, 0x81, 0x2c, 0xbb,
		0xb7, 0x53, 0xf8, 0x02, 0x59, 0xbb, 0xdf, 0xb7, 0xa6, 0xa2, 0x98, 0x18, 0xfb, 0x8f, 0x20, 0x20,
		0x69, 0x68, 0xd8, 0xe9, 0x47, 0xf8, 0x9f, 0xea, 0x8c, 0xe9, 0x27, 0x0d, 0x83, 0xd0, 0x5f, 0x3f,
		0x5e, 0x73, 0xa3, 0xb8, 0x7e, 0x93, 0x83, 0x34, 0xdf, 0x43, 0xa0, 0x51, 0x0b, 0x3f, 0xba, 0x18,
		0x3c, 0x0e, 0x1e, 0x07, 0x8f, 0xe7, 0x9d, 0xc7, 0x9d, 0xae, 0x16, 0x97, 0x3b, 0x5d, 0xf0, 0x39,
		0xf8, 0x1c, 0x7c, 0x9e, 0x6f, 0x3e, 0xef, 0xfb, 0x8e, 0xa7, 0x34, 0xc5, 0x20, 0x86, 0x87, 0x08,
		0x02, 0xb8, 0x1d, 0xdc, 0x5e, 0x5a, 0x6e, 0x1f, 0x38, 0x6e, 0xf8, 0x46, 0x83, 0xd9, 0x09, 0x79,
		0x36, 0xcd, 0xa5, 0xc4, 0x1a, 0xb9, 0x46, 0x8e, 0x25, 0xc4, 0x4c, 0x9b, 0x6f, 0xb9, 0x96, 0x0e,
		0x73, 0x6e, 0xb9, 0xd5, 0x58, 0xfc, 0xc6, 0xb2, 0x5c, 0x98, 0x1b, 0xb5, 0xf5, 0x66, 0x33, 0x47,
		0xc8, 0x4d, 0x29, 0x6f, 0xdb, 0xce, 0x85, 0xf2, 0xf5, 0x3a, 0x3a, 0x56, 0xf6, 0xf4, 0x7a, 0x28,
		0x5e, 0x28, 0x5e, 0x98, 0xd9, 0xe9, 0x9b, 0xd9, 0xac, 0x31, 0xf7, 0xb3, 0x1f, 0x63, 0xc1, 0x29,
		0xaf, 0xeb, 0xe9, 0x49, 0x0e, 0xaf, 0x63, 0x89, 0x1f, 0xe1, 0x49, 0x28, 0x7a, 0xe2, 0x41, 0x84,
		0xfe, 0xa3, 0x65, 0x87, 0xde, 0x83, 0xd3, 0xd1, 0xcb, 0x7a, 0x8c, 0xeb, 0x89, 0x35, 0xd2, 0x1e,
		0xdc, 0xb9, 0x8e, 0x76, 0xde, 0xea, 0x0a, 0xc6, 0x29, 0xdf, 0x7d, 0xb5, 0x2c, 0x5d, 0x85, 0x90,
		0xe9, 0x1e, 0xd7, 0xc8, 0xcc, 0x7e, 0xad, 0xa6, 0x38, 0xe3, 0x1b, 0x03, 0xf1, 0x90, 0xbb, 0xc4,
		0x40, 0x3c, 0xe9, 0x6b, 0xb6, 0x6c, 0x20, 0x1e, 0xfb, 0xec, 0xe3, 0x79, 0x71, 0x57, 0xd4, 0xe9,
		0xc7, 0x9b, 0x47, 0xf7, 0xaa, 0x61, 0x43, 0x67, 0x02, 0xb2, 0x1b, 0xf6, 0x37, 0x0f, 0x3f, 0x1e,
		0x7d, 0x08, 0x9b, 0xf6, 0xb0, 0x69, 0x0f, 0x9b, 0xf6, 0xd8, 0x14, 0x69, 0x9e, 0x77, 0x88, 0x4d,
		0xda, 0x0d, 0x2d, 0x37, 0xec, 0x5b, 0xf6, 0x60, 0x2c, 0xce, 0x14, 0x2d, 0xbb, 0x65, 0x00, 0xb2,
		0x05, 0x48, 0xb4, 0x3e, 0x45, 0x2c, 0x7f, 0xa9, 0x60, 0xf9, 0x0b, 0x97, 0x39, 0xa8, 0xde, 0xdd,
		0xa7, 0xd8, 0xcd, 0xc7, 0xe3, 0x75, 0xa9, 0xb6, 0x16, 0x13, 0x5b, 0x89, 0xc1, 0x92, 0x60, 0x49,
		0xb0, 0xa4, 0x1c, 0x4b, 0x8e, 0xb4, 0x5d, 0x30, 0x26, 0x14, 0xcb, 0xee, 0x76, 0x7d, 0x11, 0x04,
		0xea, 0xdc, 0xb9, 0x02, 0x06, 0x18, 0x0e, 0x0c, 0x97, 0x32, 0xc3, 0x39, 0x7d, 0x45, 0xea, 0x5b,
		0xe0, 0xb9, 0x63, 0x85, 0x6b, 0xa6, 0xf7, 0x68, 0x7c, 0x09, 0xda, 0xcb, 0x93, 0x7d, 0x6f, 0x10,
		0x9e, 0x2d, 0x9e, 0x5c, 0xa0, 0xcd, 0xf0, 0x09, 0x85, 0xef, 0x92, 0x33, 0xfb, 0xd5, 0xbf, 0x76,
		0x76, 0xae, 0x0e, 0xac, 0xe3, 0xf6, 0xf3, 0x55, 0xcd, 0x3a, 0x6e, 0x4f, 0x5e, 0xd6, 0xc6, 0xff,
		0x4c, 0x5e, 0xd7, 0xaf, 0x0e, 0xac, 0xc6, 0xec, 0x75, 0xf3, 0xea, 0xc0, 0x6a, 0xb6, 0x77, 0xaf,
		0xaf, 0x5f, 0xef, 0x3e, 0x1d, 0x0e, 0xd5, 0x2f, 0xfc, 0x49, 0x3d, 0xa7, 0xd4, 0xa6, 0x20, 0xe5,
		0xfc, 0xe2, 0xc3, 0x1f, 0xe5, 0xc7, 0x8c, 0xc9, 0x6c, 0x9b, 0x1e, 0x3b, 0xb4, 0x8a, 0xce, 0x0e,
		0xb6, 0x75, 0x77, 0x6a, 0xbd, 0x6f, 0x3f, 0xd5, 0xf6, 0x1a, 0xc3, 0x93, 0xdd, 0xa7, 0xa3, 0xe1,
		0xf2, 0x9b, 0xcf, 0xab, 0x3e, 0x56, 0xdb, 0x3b, 0x1a, 0x9e, 0x24, 0xfc, 0xa5, 0x35, 0x3c, 0x91,
		0x84, 0xd1, 0x1c, 0xee, 0xc4, 0x3e, 0x3a, 0x7a, 0xbf, 0x9e, 0x74, 0x41, 0x23, 0xe1, 0x82, 0xc3,
		0xa4, 0x0b, 0x0e, 0x13, 0x2e, 0x48, 0xbc, 0xa5, 0x7a, 0xc2, 0x05, 0xcd, 0xe1, 0x73, 0xec, 0xf3,
		0x3b, 0xab, 0x3f, 0xda, 0x1a, 0xee, 0x3e, 0x27, 0xfd, 0xed, 0x68, 0xf8, 0x7c, 0xb2, 0x5b, 0x48,
		0xe1, 0x00, 0x3a, 0x29, 0x06, 0x9d, 0x60, 0xd3, 0x24, 0x21, 0xa7, 0xe0, 0x86, 0x7d, 0xf6, 0xdd,
		0x43, 0x9f, 0xc3, 0xbe, 0xc1, 0xb5, 0x43, 0x23, 0x4f, 0xe7, 0x6f, 0xf1, 0xa8, 0xb0, 0x71, 0x28,
		0xba, 0x02, 0x81, 0x6a, 0x04, 0xaa, 0x17, 0x88, 0x88, 0xe6, 0x67, 0x8f, 0x2e, 0x2c, 0xc7, 0x5a,
		0x21, 0x38, 0xd7, 0xa9, 0x3b, 0xd7, 0x58, 0x26, 0xc4, 0x45, 0xc8, 0xfa, 0x04, 0xad, 0x4b, 0xd8,
		0x6c, 0x04, 0xce, 0x46, 0xe8, 0x2c, 0x04, 0xaf, 0x6e, 0x23, 0x55, 0xd2, 0x1c, 0x8e, 0xfa, 0xb7,
		0x78, 0xb4, 0x1c, 0x86, 0xd9, 0xa8, 0x53, 0x38, 0x98, 0x2e, 0x48, 0x67, 0x1c, 0x2e, 0x06, 0x62,
		0x67, 0x24, 0x76, 0x86, 0x62, 0x65, 0x2c, 0x1a, 0x83, 0x11, 0x19, 0x8d, 0x1e, 0xd6, 0x4d, 0xa4,
		0x97, 0x81, 0xe3, 0x86, 0xb5, 0x16, 0xc3, 0x38, 0xc1, 0x96, 0x06, 0x08, 0xbd, 0x6e, 0x27, 0x7a,
		0x0c, 0x2c, 0x76, 0x23, 0x1c, 0xdd, 0x4f, 0x4c, 0x62, 0x25, 0x06, 0x8e, 0xa9, 0x1b, 0x2a, 0x82,
		0xc7, 0xd8, 0xb8, 0xa3, 0x49, 0xce, 0x8b, 0x47, 0xc0, 0xd0, 0x25, 0x65, 0xfa, 0x08, 0x5a, 0xcd,
		0xe6, 0x61, 0x33, 0xc7, 0xc7, 0xf0, 0x2a, 0x9b, 0xab, 0xdb, 0x39, 0x9e, 0x64, 0x3c, 0xb2, 0x10,
		0x42, 0x1d, 0xa9, 0xb9, 0x60, 0x6b, 0x8c, 0x21, 0xc1, 0xda, 0x80, 0xb5, 0x01, 0x6b, 0x43, 0x89,
		0x5e, 0x4a, 0x3f, 0xc1, 0xf8, 0xf3, 0xe5, 0x97, 0x9b, 0xd3, 0x7f, 0x5f, 0xfe, 0x76, 0x73, 0xf9,
		0x3f, 0x5f, 0xce, 0xaa, 0x1c, 0x4d, 0xba, 0x81, 0xb6, 0x5d, 0xc4, 0x63, 0x1b, 0xad, 0x7e, 0xcc,
		0x4f, 0xef, 0x9a, 0xd5, 0x8c, 0xf5, 0x55, 0x3b, 0xff, 0x73, 0xa2, 0x89, 0xfa, 0xea, 0xfb, 0xd4,
		0xdc, 0x60, 0x50, 0x58, 0x13, 0x50, 0xd0, 0x58, 0xd0, 0x58, 0xd0, 0x58, 0x4a, 0xf4, 0x42, 0xee,
		0x41, 0x8e, 0x29, 0xab, 0x37, 0x98, 0x4a, 0xaf, 0x98, 0xcc, 0x9c, 0x25, 0xfb, 0x66, 0x2f, 0x8c,
		0xef, 0x6a, 0xfc, 0x1c, 0xf6, 0x47, 0xff, 0xff, 0x2e, 0x1e, 0x83, 0xe9, 0xbf, 0x39, 0xda, 0xcd,
		0x48, 0x8c, 0x95, 0xea, 0xc5, 0x48, 0x8b, 0x3a, 0x31, 0x02, 0xc9, 0x03, 0x46, 0x19, 0x8e, 0x7d,
		0x8c, 0xab, 0x49, 0x35, 0xb6, 0x8f, 0x71, 0xca, 0x62, 0x58, 0xc7, 0x48, 0x12, 0x15, 0x75, 0x88,
		0x0a, 0x88, 0x8a, 0xb5, 0x77, 0x88, 0x3c, 0x23, 0xfc, 0x28, 0xf8, 0x51, 0x85, 0xf4, 0xa3, 0x90,
		0x67, 0x9c, 0xbf, 0x11, 0xe4, 0x19, 0xf5, 0x02, 0x86, 0xc8, 0x33, 0xe6, 0xe2, 0x18, 0x90, 0x67,
		0x5c, 0x69, 0x69, 0x20, 0xcf, 0x08, 0x6b, 0x03, 0xd6, 0x46, 0x96, 0xd6, 0x06, 0xf2, 0x8c, 0xca,
		0xea, 0x06, 0x79, 0x46, 0x23, 0x5a, 0xa7, 0x82, 0x3c, 0x23, 0x34, 0x16, 0x34, 0x16, 0x34, 0xd6,
		0x06, 0x7a, 0x41, 0x9e, 0x71, 0x89, 0x26, 0xb2, 0xcc, 0x33, 0x1a, 0xde, 0x76, 0xbd, 0x22, 0xcd,
		0x58, 0xbc, 0xed, 0xd6, 0x4a, 0xa1, 0x50, 0x2c, 0xb7, 0xe6, 0x26, 0x74, 0x2d, 0x02, 0xe7, 0x1f,
		0x41, 0x1d, 0x27, 0xe9, 0x6a, 0xe9, 0x7b, 0xad, 0x25, 0x7b, 0x91, 0x69, 0x58, 0x34, 0xb2, 0xa8,
		0x5a, 0xf8, 0xdf, 0x85, 0xaf, 0xd0, 0x6d, 0x3d, 0xbb, 0x00, 0xcd, 0xd6, 0x68, 0xb6, 0x9e, 0x27,
		0x21, 0xca, 0x98, 0xf7, 0xf1, 0x75, 0x68, 0xb5, 0x4e, 0xd1, 0x70, 0xdf, 0xea, 0x56, 0x6b, 0xd5,
		0xe9, 0x7b, 0xb1, 0x73, 0xa6, 0x4d, 0x44, 0x42, 0xbd, 0x54, 0x26, 0xbe, 0x29, 0xea, 0xa5, 0x54,
		0xce, 0x3b, 0x37, 0xf5, 0x52, 0x33, 0x1e, 0xcb, 0x41, 0xc1, 0x14, 0x46, 0x33, 0x40, 0x5a, 0x94,
		0x51, 0x5a, 0x90, 0x4b, 0xa6, 0xa8, 0x0a, 0x94, 0x49, 0x91, 0x22, 0x28, 0x8c, 0xa0, 0xf0, 0xd6,
		0x07, 0x85, 0xbf, 0x79, 0x41, 0xc8, 0x11, 0x12, 0x3e, 0xd6, 0x80, 0x41, 0x9a, 0xce, 0xbb, 0xfc,
		0xc3, 0x50, 0x32, 0xa5, 0x35, 0x97, 0xd8, 0x24, 0x86, 0x78, 0x31, 0xc5, 0x87, 0xb1, 0x15, 0x98,
		0xd3, 0x9a, 0x7b, 0xbc, 0x11, 0x87, 0x6f, 0x18, 0x61, 0xea, 0x0e, 0xfc, 0x4c, 0x04, 0x9c, 0xf7,
		0x29, 0xc1, 0x49, 0x3f, 0x6d, 0x4e, 0xe4, 0x72, 0x8c, 0x54, 0x2d, 0x1f, 0x86, 0x59, 0x20, 0x0d,
		0xf7, 0x72, 0xcc, 0xfe, 0x2d, 0xb0, 0x3f, 0xe6, 0x00, 0x17, 0x68, 0x0e, 0x70, 0x69, 0x84, 0x21,
		0xe8, 0xad, 0xd8, 0xf4, 0xc6, 0xa3, 0x1a, 0x5e, 0x65, 0x7b, 0x1f, 0x9a, 0xaa, 0x89, 0xd1, 0x86,
		0xef, 0x7a, 0x0f, 0xb6, 0xe3, 0x5a, 0xe3, 0x74, 0x28, 0xa3, 0x11, 0xcf, 0xa0, 0x81, 0xaa, 0x1f,
		0x85, 0x7b, 0x3f, 0x0e, 0x53, 0xe6, 0xce, 0x8c, 0xe7, 0xec, 0x19, 0x61, 0x8a, 0xae, 0x24, 0x82,
		0x9d, 0x35, 0x30, 0xd4, 0x98, 0xe1, 0x1a, 0x68, 0x62, 0x60, 0x36, 0xdc, 0x2a, 0xdc, 0xbd, 0x25,
		0x69, 0x1d, 0x55, 0xbd, 0x79, 0x58, 0xa0, 0xc3, 0xca, 0x8b, 0x40, 0x66, 0x90, 0x38, 0xdc, 0xb6,
		0xc7, 0xc8, 0xe6, 0xd8, 0xd9, 0xb9, 0xb2, 0xad, 0x7f, 0x4e, 0xad, 0x3f, 0x0f, 0xac, 0xe3, 0x9b,
		0xf6, 0xdc, 0x2f, 0xd7, 0xd7, 0xd6, 0x4d, 0x7b, 0xf7, 0xe9, 0x60, 0xaf, 0x55, 0x1b, 0xee, 0xfe,
		0xfc, 0xf2, 0x7e, 0x7b, 0xe4, 0x81, 0xfd, 0x8b, 0x72, 0xd5, 0xcf, 0xbb, 0xcf, 0xa3, 0x6b, 0x19,
		0xb4, 0x2d, 0x0b, 0x32, 0x4d, 0x58, 0x73, 0xc5, 0xc5, 0x28, 0x1a, 0xb4, 0x62, 0x67, 0x69, 0x07,
		0x81, 0xd7, 0x71, 0xc6, 0x25, 0x61, 0x4c, 0x8d, 0x5a, 0x31, 0x88, 0xc4, 0xb8, 0xf1, 0xdc, 0x9a,
		0xcd, 0x8b, 0xb3, 0xaf, 0xff, 0x39, 0xfb, 0x8a, 0x94, 0x09, 0x52, 0x26, 0x2a, 0x00, 0x91, 0x32,
		0xa9, 0x54, 0x85, 0x3b, 0x78, 0x10, 0xfe, 0xa4, 0xe2, 0x93, 0x21, 0x73, 0xd2, 0xd0, 0x80, 0x71,
		0xe6, 0x0e, 0x1e, 0x46, 0x0f, 0x95, 0xe7, 0xf6, 0x1f, 0xe7, 0x76, 0xe0, 0x07, 0xa1, 0xbe, 0x0c,
		0x9c, 0xc2, 0xd1, 0x97, 0x7c, 0x2a, 0x0b, 0x86, 0x21, 0xf8, 0x20, 0xf8, 0x20, 0xf8, 0xc8, 0x0b,
		0x92, 0x13, 0x85, 0x5e, 0x2d, 0xc7, 0x02, 0xab, 0xef, 0xf9, 0x0c, 0xe2, 0x6a, 0x0c, 0x45, 0x5f,
		0x58, 0xd5, 0xea, 0x87, 0x10, 0x55, 0x10, 0x55, 0x10, 0x55, 0xea, 0xdc, 0x67, 0xb9, 0x83, 0x87,
		0x5b, 0xe9, 0x8e, 0x80, 0x75, 0x2c, 0x84, 0x81, 0x40, 0x66, 0x23, 0x85, 0x18, 0x08, 0x94, 0x9f,
		0x23, 0xc0, 0x40, 0xa0, 0xc2, 0xc5, 0x9b, 0x46, 0x7a, 0x48, 0xf8, 0x0c, 0x26, 0xcb, 0x04, 0x0e,
		0x3c, 0x2c, 0x98, 0x2d, 0x30, 0x5b, 0xe0, 0x61, 0x99, 0x13, 0x58, 0xdf, 0x85, 0x1f, 0x50, 0xc7,
		0x2e, 0x2c, 0xe0, 0x6b, 0x06, 0x48, 0x5f, 0x64, 0x35, 0x20, 0xae, 0x20, 0xae, 0x20, 0xae, 0xd4,
		0xe8, 0x65, 0xe0, 0xb8, 0xe1, 0x1b, 0x06, 0x61, 0xd5, 0x84, 0x7f, 0x95, 0x8e, 0x71, 0x5f, 0x83,
		0x7f, 0x95, 0xf5, 0x11, 0x34, 0xe0, 0x5b, 0x65, 0xe6, 0x5b, 0x95, 0x66, 0x9c, 0xd4, 0x74, 0x6a,
		0xca, 0xf4, 0xdf, 0x54, 0x96, 0xd6, 0x5c, 0x4c, 0xbe, 0x72, 0xfa, 0x6f, 0x8e, 0x96, 0xd6, 0x60,
		0x0f, 0x85, 0x61, 0xe3, 0x0e, 0x4d, 0xd5, 0x19, 0x48, 0x13, 0x34, 0x55, 0xc3, 0x2f, 0x82, 0x5f,
		0x84, 0xa6, 0x6a, 0x32, 0x0c, 0x34, 0x55, 0xa7, 0x8a, 0x29, 0x3e, 0x8c, 0xad, 0xc0, 0x1c, 0x9a,
		0xaa, 0xd1, 0x54, 0x8d, 0xa6, 0x6a, 0x56, 0xef, 0xd1, 0x40, 0xf8, 0xa1, 0x82, 0xa6, 0x6a, 0x34,
		0xb9, 0xa2, 0xc9, 0xb5, 0x4c, 0xc2, 0x10, 0xf4, 0x86, 0xa6, 0x6a, 0x34, 0x55, 0xa3, 0xa9, 0x5a,
		0xe7, 0xce, 0xd0, 0x54, 0x8d, 0xa6, 0x6a, 0x34, 0x55, 0x73, 0x89, 0xd2, 0x0a, 0x9a, 0xaa, 0xd1,
		0x54, 0x5d, 0x7a, 0x8c, 0xa2, 0xc8, 0x35, 0x76, 0x96, 0x68, 0xaa, 0xde, 0x74, 0x39, 0x52, 0x26,
		0xab, 0xb1, 0x8a, 0x94, 0x89, 0x29, 0x23, 0x0a, 0x4d, 0xd5, 0x59, 0x49, 0x43, 0x34, 0x55, 0x43,
		0xf0, 0x41, 0xf0, 0x95, 0x41, 0xf0, 0x6d, 0x49, 0xc9, 0xbf, 0x77, 0x77, 0x17, 0x08, 0x06, 0x81,
		0x35, 0x85, 0x03, 0x41, 0x03, 0x41, 0x03, 0x41, 0xa3, 0x44, 0x2f, 0x03, 0xc7, 0x0d, 0x5b, 0x0d,
		0x06, 0x39, 0xf3, 0x06, 0xd5, 0xfa, 0x46, 0x43, 0x7c, 0xe8, 0x86, 0xce, 0xcf, 0x11, 0xe8, 0xad,
		0x75, 0x4d, 0xfd, 0x54, 0x10, 0x37, 0x8a, 0xa1, 0xb9, 0xef, 0xf5, 0x7a, 0x96, 0xe3, 0x86, 0xc2,
		0xff, 0x6e, 0xf7, 0x38, 0xc6, 0xba, 0xcc, 0x83, 0x83, 0x19, 0x02, 0x33, 0x04, 0x66, 0x88, 0xb2,
		0x19, 0x72, 0x58, 0x67, 0x30, 0x43, 0x8e, 0x60, 0x86, 0xc0, 0x0c, 0xd9, 0x96, 0xa6, 0xc1, 0xfa,
		0x71, 0xe3, 0xb8, 0x75, 0x54, 0x3f, 0x86, 0xf1, 0x51, 0x30, 0xe3, 0x03, 0xa3, 0xe4, 0x60, 0xb0,
		0xc0, 0x60, 0xa9, 0x60, 0x94, 0x1c, 0x46, 0xc9, 0xc1, 0x6a, 0xd9, 0x32, 0xab, 0x05, 0xa3, 0xe4,
		0x8a, 0x67, 0xb0, 0x60, 0x94, 0x1c, 0xcc, 0x16, 0x98, 0x2d, 0x25, 0x30, 0x5b, 0xb6, 0x24, 0xaf,
		0xec, 0x7b, 0x5e, 0x68, 0x75, 0x45, 0xcf, 0x7e, 0xd4, 0x17, 0x5a, 0x73, 0xb0, 0x20, 0x70, 0x20,
		0x70, 0x20, 0x70, 0x94, 0xe8, 0x05, 0x81, 0x5d, 0xb8, 0x48, 0x70, 0x91, 0x14, 0x8f, 0x00, 0x81,
		0xdd, 0x62, 0xfa, 0x49, 0x13, 0x53, 0xc1, 0x09, 0xfa, 0x5c, 0x93, 0x6c, 0x97, 0x01, 0xc2, 0x00,
		0x81, 0x01, 0x02, 0x03, 0x44, 0xd9, 0x00, 0x41, 0x81, 0x1b, 0x0c, 0x10, 0x18, 0x20, 0x0a, 0x47,
		0x80, 0x02, 0xb7, 0xa2, 0x9b, 0x22, 0x41, 0xe8, 0xdb, 0xe1, 0xa4, 0x63, 0x49, 0xcf, 0x04, 0x99,
		0x01, 0x82, 0xe9, 0x01, 0xd3, 0x03, 0xa6, 0x87, 0xb2, 0xe9, 0x81, 0x41, 0xf8, 0xb0, 0x3c, 0x60,
		0x79, 0xc8, 0x1f, 0x41, 0xbd, 0x09, 0x43, 0xa3, 0x50, 0x86, 0x06, 0xb6, 0xf6, 0xc0, 0x58, 0x81,
		0xb1, 0x02, 0x63, 0x05, 0xc6, 0x4a, 0xda, 0x3e, 0x3a, 0x8c, 0x95, 0xac, 0x8f, 0x00, 0x5b, 0x7b,
		0xb2, 0x33, 0x55, 0xca, 0xba, 0xb5, 0x87, 0xb2, 0x79, 0xa6, 0xa2, 0xb5, 0xb4, 0xe7, 0x62, 0xfc,
		0x8d, 0xa6, 0x76, 0xf6, 0xbc, 0x62, 0x3c, 0x9f, 0x91, 0x29, 0xa1, 0xbe, 0x84, 0xa4, 0xfa, 0xd1,
		0x09, 0xc2, 0xd3, 0x30, 0x54, 0x2b, 0x60, 0x1c, 0xe9, 0x80, 0xb3, 0x9e, 0x18, 0x99, 0x05, 0x81,
		0x9a, 0xe8, 0x18, 0x89, 0xae, 0xb9, 0x2b, 0xf5, 0x62, 0xa9, 0xd5, 0x73, 0xbf, 0x2b, 0x7c, 0xd1,
		0xfd, 0x65, 0xf4, 0xe0, 0xee, 0xa0, 0xd7, 0x63, 0xc5, 0x27, 0x91, 0xce, 0x35, 0xe8, 0xbb, 0xaa,
		0xb4, 0xc3, 0x89, 0x46, 0xd1, 0x72, 0xb4, 0xbc, 0x99, 0x32, 0xd7, 0x7f, 0x62, 0x03, 0x8e, 0x55,
		0x71, 0x4b, 0xc1, 0xa9, 0x04, 0x32, 0xd5, 0x91, 0xb8, 0x1e, 0x7b, 0xc9, 0x38, 0x59, 0x83, 0x0f,
		0xc9, 0x6d, 0x5c, 0x4a, 0xdb, 0xb7, 0x24, 0xb7, 0x6d, 0x49, 0x6f, 0xd7, 0x52, 0x71, 0xbe, 0xd4,
		0x9d, 0x2c, 0x55, 0x67, 0x8a, 0xec, 0x34, 0x91, 0x9d, 0x23, 0x92, 0x13, 0xa4, 0xc7, 0x21, 0xb2,
		0xdb, 0xac, 0xaa, 0xf6, 0x20, 0xfc, 0x66, 0x3d, 0x38, 0xc1, 0x83, 0x1d, 0x76, 0xbe, 0xc9, 0xe3,
		0x30, 0x1a, 0xe9, 0xb8, 0x70, 0xb9, 0xac, 0xaa, 0x51, 0x32, 0x19, 0x95, 0x7d, 0x7f, 0x8a, 0xaf,
		0x4f, 0xf7, 0xed, 0xa9, 0xbe, 0xbc, 0xb6, 0xef, 0xae, 0xed, 0xab, 0x6b, 0xf9, 0xe6, 0xbc, 0xc6,
		0x87, 0xb2, 0xaf, 0x1d, 0x9d, 0x57, 0xc7, 0x1b, 0xb8, 0xa1, 0xf0, 0x95, 0xca, 0x10, 0x08, 0x65,
		0x07, 0x44, 0xff, 0x99, 0x60, 0xdf, 0xea, 0xf8, 0xc7, 0xba, 0x51, 0x36, 0xcd, 0x60, 0x3d, 0x87,
		0xb3, 0x45, 0x89, 0x93, 0xea, 0xf8, 0xb3, 0x5c, 0x28, 0xe3, 0x4b, 0xeb, 0xb3, 0x60, 0xd1, 0x90,
		0xcb, 0xd1, 0xe6, 0x32, 0xff, 0x24, 0xd4, 0xba, 0x70, 0xed, 0xdb, 0x9e, 0xb0, 0xdc, 0xb0, 0x6f,
		0x8d, 0xb4, 0x8c, 0xba, 0x6e, 0x5a, 0x06, 0x20, 0x29, 0x8b, 0x88, 0xbd, 0x50, 0xd0, 0x6a, 0xd0,
		0x6a, 0x6c, 0x5a, 0x4d, 0xbd, 0x97, 0x48, 0xb1, 0x77, 0x88, 0x93, 0x45, 0xbb, 0x54, 0xd6, 0xec,
		0x82, 0x25, 0xc1, 0x92, 0x60, 0x49, 0x56, 0x96, 0x1c, 0x69, 0xbb, 0x60, 0x4c, 0x28, 0x96, 0xea,
		0x62, 0xe2, 0xe8, 0x51, 0x57, 0xc0, 0x00, 0xc3, 0x81, 0xe1, 0x52, 0x66, 0x38, 0xd2, 0xfe, 0x5a,
		0xca, 0x9e, 0x5a, 0xda, 0x3e, 0x5a, 0x8d, 0xc5, 0xf0, 0x9a, 0xfb, 0x65, 0x75, 0xd6, 0x78, 0x69,
		0x2f, 0xd1, 0xc9, 0xfd, 0xd6, 0xd2, 0x36, 0x05, 0x29, 0x1c, 0xcb, 0x70, 0xf2, 0x8f, 0x19, 0x93,
		0x79, 0x3d, 0x3d, 0x76, 0x68, 0x15, 0x9d, 0x1d, 0xb0, 0xb7, 0xb2, 0x10, 0x7b, 0x2b, 0x33, 0x17,
		0x0e, 0xa0, 0x93, 0x62, 0xd0, 0x49, 0xde, 0xe3, 0x67, 0xf9, 0x4d, 0x9f, 0x4a, 0xd6, 0x58, 0xa8,
		0x24, 0x4f, 0x37, 0x17, 0x51, 0xac, 0x49, 0x9d, 0xbe, 0x52, 0xc0, 0x90, 0x2c, 0x66, 0x54, 0x30,
		0x52, 0x5d, 0x9b, 0xbb, 0x95, 0xc4, 0xc1, 0xea, 0xa7, 0x8f, 0x3f, 0xdb, 0x8a, 0xe7, 0xaa, 0x8e,
		0x6e, 0xee, 0xae, 0xe7, 0xfd, 0x5f, 0xe2, 0x13, 0xbd, 0x78, 0x48, 0xb3, 0x4f, 0x26, 0x60, 0x67,
		0x7d, 0x5a, 0x78, 0xa3, 0x37, 0x27, 0xe3, 0xbd, 0xc9, 0xde, 0x8b, 0x8a, 0x7f, 0xa6, 0xec, 0x8f,
		0x29, 0xfb, 0x5f, 0x8b, 0xfe, 0xd6, 0xec, 0xce, 0x99, 0x68, 0x72, 0x53, 0x2a, 0xb7, 0x6a, 0xdf,
		0x4f, 0xbe, 0x59, 0xb2, 0x02, 0x60, 0xf2, 0x71, 0xe6, 0x0a, 0x80, 0x03, 0x13, 0x15, 0x00, 0x9b,
		0x49, 0x80, 0xea, 0xaa, 0x67, 0x5d, 0x03, 0xb0, 0x91, 0x44, 0x78, 0x04, 0xbd, 0x74, 0x15, 0x40,
		0x67, 0x76, 0x8e, 0x8a, 0x91, 0xa2, 0xe9, 0x75, 0x6a, 0xd1, 0xa1, 0x5a, 0x2e, 0xa3, 0x43, 0xf2,
		0xc4, 0x56, 0xb6, 0xf8, 0x90, 0x34, 0x31, 0x9a, 0x89, 0x10, 0xc9, 0x12, 0x69, 0x74, 0xc1, 0xad,
		0xdd, 0xf9, 0xdb, 0xbb, 0xbb, 0xa3, 0xef, 0x98, 0x78, 0x89, 0xe9, 0x2e, 0x43, 0x52, 0x44, 0x23,
		0x2d, 0x77, 0x4c, 0x6e, 0x66, 0xd1, 0x69, 0x62, 0xd1, 0x21, 0x74, 0x5d, 0x82, 0x67, 0x23, 0x7c,
		0x36, 0x06, 0x60, 0x62, 0x04, 0x75, 0x07, 0x80, 0x10, 0x59, 0xa1, 0x37, 0xa2, 0xe8, 0x4f, 0x0a,
		0xd3, 0x98, 0x10, 0xa6, 0xd9, 0x71, 0xa2, 0xd1, 0x76, 0xc3, 0xd1, 0x61, 0xc2, 0xd4, 0xd6, 0xc0,
		0xd5, 0xfe, 0xca, 0xd9, 0xc6, 0xa0, 0xd1, 0x41, 0xc2, 0xd2, 0x39, 0xc2, 0x8d, 0x5a, 0xae, 0x89,
		0x5e, 0xac, 0x38, 0x4e, 0xa9, 0x55, 0xc3, 0x54, 0x9c, 0x42, 0x81, 0x46, 0xaa, 0x5d, 0x3b, 0x1c,
		0x7b, 0xc2, 0x96, 0xd3, 0xa5, 0x6b, 0xe2, 0x79, 0x20, 0x50, 0xc2, 0x50, 0xc2, 0x25, 0x54, 0xc2,
		0x74, 0x12, 0xcf, 0x41, 0x96, 0x63, 0x3e, 0xba, 0xba, 0x1c, 0xb4, 0xad, 0x0f, 0x77, 0x9f, 0x8e,
		0x86, 0xc5, 0x8a, 0xc6, 0x9b, 0x79, 0x9e, 0x1c, 0x48, 0xe3, 0x3b, 0xdb, 0xe9, 0x0d, 0x7c, 0x61,
		0x3d, 0x78, 0x5d, 0x41, 0x17, 0xc7, 0x0b, 0x50, 0x20, 0x8f, 0x21, 0x8f, 0x4b, 0x28, 0x8f, 0x35,
		0x68, 0x7c, 0x41, 0x20, 0x13, 0x3a, 0x95, 0xab, 0x67, 0xee, 0x64, 0x7e, 0xd8, 0x30, 0x07, 0x12,
		0xc3, 0x71, 0x47, 0x66, 0xef, 0x77, 0x27, 0x7c, 0xb4, 0xfa, 0xbe, 0x77, 0xab, 0x21, 0x35, 0x62,
		0x90, 0x20, 0x39, 0x20, 0x39, 0x10, 0x4e, 0x41, 0x38, 0x05, 0xe1, 0x14, 0x84, 0x53, 0x10, 0x4e,
		0x91, 0x43, 0xdb, 0x83, 0xfd, 0xc3, 0x9a, 0xe6, 0x25, 0xe8, 0x9a, 0x78, 0x1e, 0x08, 0x94, 0x30,
		0x94, 0x30, 0x94, 0x30, 0x94, 0x30, 0x94, 0x30, 0x94, 0xf0, 0x56, 0x2b, 0xe1, 0x42, 0x8d, 0xf7,
		0x99, 0x09, 0xee, 0xfd, 0x71, 0xb9, 0xd6, 0xbe, 0x52, 0xa1, 0x4d, 0x45, 0xbe, 0xb6, 0xf0, 0x7c,
		0xfa, 0x35, 0x37, 0xa7, 0xa3, 0xaf, 0xb9, 0x99, 0x6a, 0xf1, 0x14, 0xfb, 0xd5, 0xe4, 0xc6, 0xd7,
		0xc4, 0xa4, 0xbf, 0xca, 0x28, 0x2f, 0x72, 0xdd, 0x51, 0x1d, 0x75, 0x47, 0xbc, 0x26, 0x0a, 0xea,
		0x8e, 0x50, 0x77, 0x04, 0x1b, 0x1d, 0x36, 0x3a, 0x6c, 0x74, 0xd8, 0xe8, 0xb0, 0xd1, 0x61, 0xa3,
		0x6b, 0x05, 0xca, 0x50, 0x77, 0x04, 0x25, 0x0c, 0x25, 0x6c, 0x92, 0xc4, 0x2b, 0xa8, 0x3b, 0x7a,
		0x79, 0x14, 0xd4, 0x1d, 0xad, 0x7d, 0x32, 0xd4, 0x1d, 0x41, 0x1e, 0x43, 0x1e, 0x1b, 0xa6, 0xf1,
		0x0a, 0xea, 0x8e, 0x56, 0x61, 0x14, 0x75, 0x47, 0x90, 0x1c, 0x08, 0xa7, 0x20, 0x9c, 0x82, 0x70,
		0x0a, 0xc2, 0x29, 0x08, 0xa7, 0x10, 0xd5, 0x31, 0xea, 0x8e, 0xa0, 0x84, 0xa1, 0x84, 0xa1, 0x84,
		0xa1, 0x84, 0xa1, 0x84, 0xa1, 0x84, 0x39, 0x95, 0x70, 0x91, 0xeb, 0x8e, 0x54, 0x57, 0xe6, 0xd1,
		0xca, 0x8e, 0x14, 0xd6, 0xe4, 0x15, 0x75, 0x36, 0xde, 0x22, 0x5e, 0xf9, 0x06, 0xe4, 0x2d, 0x62,
		0xd2, 0xc4, 0x82, 0xb1, 0x8e, 0xe7, 0x86, 0xbe, 0xd7, 0xeb, 0x09, 0x3f, 0x90, 0x1f, 0x32, 0x36,
		0x7f, 0x11, 0x46, 0x8d, 0x61, 0xd4, 0xd8, 0x2a, 0x72, 0x22, 0x8d, 0x1b, 0x9b, 0x5d, 0x8b, 0x91,
		0x63, 0xa9, 0x7a, 0x0b, 0x5b, 0x5e, 0xfa, 0xa7, 0x38, 0x1f, 0x6f, 0x15, 0xe1, 0xaa, 0x95, 0xef,
		0x12, 0x88, 0x17, 0x2e, 0x31, 0x5c, 0x62, 0x8a, 0x4b, 0xac, 0xca, 0x0c, 0xd1, 0x85, 0x53, 0xd3,
		0x84, 0x78, 0x58, 0xd1, 0xb2, 0x91, 0xd1, 0xbf, 0x7b, 0x99, 0xec, 0x6e, 0xa3, 0x32, 0x0a, 0x07,
		0xc3, 0x70, 0x32, 0x0e, 0x17, 0x03, 0xb1, 0x33, 0x12, 0x3b, 0x43, 0x31, 0x33, 0x96, 0xa6, 0x8b,
		0x49, 0xa4, 0x1a, 0x72, 0x0c, 0x2a, 0x46, 0x33, 0x41, 0xe8, 0x3b, 0xee, 0xbd, 0x0e, 0xc5, 0x44,
		0xd5, 0x3d, 0xd8, 0x2d, 0x4f, 0x71, 0xe6, 0xe6, 0xdc, 0x9c, 0xb9, 0xd7, 0xfb, 0x24, 0x75, 0x4f,
		0x71, 0xfa, 0xde, 0xbe, 0x7c, 0xff, 0xdc, 0x6b, 0xa5, 0x36, 0x1e, 0x42, 0x40, 0x63, 0x4f, 0xc9,
		0x70, 0x72, 0xc5, 0x38, 0x12, 0x14, 0x68, 0x59, 0x4f, 0x11, 0x10, 0x98, 0x50, 0x30, 0xa1, 0xca,
		0x63, 0x42, 0xbd, 0x50, 0xb6, 0xbe, 0x21, 0x35, 0x07, 0x4b, 0xcf, 0x9c, 0xaa, 0xc1, 0x9c, 0x82,
		0x39, 0x55, 0x1c, 0x73, 0x8a, 0xca, 0x7c, 0x11, 0x00, 0x7b, 0xf0, 0x83, 0xd2, 0x43, 0x90, 0x48,
		0x7a, 0x53, 0x78, 0x7b, 0xb9, 0xc8, 0xec, 0xe8, 0x32, 0x25, 0x27, 0x73, 0x9a, 0x60, 0x52, 0x6e,
		0x66, 0x35, 0xc6, 0xb4, 0xc6, 0x98, 0xd7, 0x10, 0x13, 0xeb, 0x31, 0xb3, 0x26, 0x53, 0xf3, 0xf9,
		0x4a, 0x31, 0x9a, 0xeb, 0x09, 0xfb, 0xce, 0x17, 0x77, 0x1c, 0x24, 0x37, 0xd3, 0x97, 0x47, 0x0c,
		0xb0, 0xbe, 0x4c, 0x9d, 0x8e, 0xd7, 0xaf, 0xa7, 0xde, 0xc3, 0xfe, 0x54, 0x8c, 0xbc, 0xca, 0xe6,
		0xf0, 0x74, 0x32, 0xdb, 0xc4, 0x68, 0x29, 0x6f, 0xf4, 0x94, 0xd9, 0xba, 0x81, 0x40, 0x85, 0x40,
		0x2d, 0x83, 0x40, 0xd5, 0xb5, 0x96, 0x5e, 0xac, 0x26, 0xc5, 0xed, 0xd2, 0xf2, 0xe6, 0x13, 0x79,
		0x13, 0xa8, 0x41, 0x3b, 0x8a, 0x9d, 0xfd, 0x4d, 0x88, 0x01, 0x93, 0xe2, 0xc0, 0x94, 0x58, 0x30,
		0x2e, 0x1e, 0x8c, 0x8b, 0x09, 0xc3, 0xe2, 0x82, 0x47, 0x6c, 0x30, 0x89, 0x0f, 0x7e, 0xbb, 0x2c,
		0x46, 0xb3, 0xa4, 0xb5, 0xdf, 0xd2, 0xca, 0xff, 0x98, 0x11, 0x26, 0x69, 0x6d, 0xf8, 0xa6, 0x1f,
		0x5e, 0xae, 0xaa, 0x30, 0xae, 0x1d, 0x97, 0xc6, 0xf1, 0x1b, 0x03, 0xb0, 0x75, 0x3b, 0x6f, 0x37,
		0x7e, 0x41, 0xde, 0x97, 0x77, 0x6f, 0xfa, 0x69, 0x9b, 0x40, 0x3a, 0x47, 0xcf, 0x73, 0xf9, 0x31,
		0xcf, 0x0a, 0x71, 0xb8, 0x57, 0x20, 0x71, 0xd2, 0x82, 0x38, 0x59, 0x4f, 0xd4, 0x58, 0xf7, 0x5d,
		0x88, 0x75, 0xdf, 0xa5, 0x17, 0xae, 0xa0, 0xc3, 0x72, 0xd0, 0x21, 0xaf, 0xaa, 0x79, 0x95, 0xaf,
		0xfb, 0xd2, 0xbf, 0x1f, 0x06, 0xe5, 0xc9, 0x95, 0x0d, 0x8a, 0x87, 0x35, 0x38, 0xb2, 0x42, 0x88,
		0x6a, 0x20, 0xaa, 0x81, 0xa8, 0x46, 0x01, 0xa3, 0x1a, 0xf6, 0xe0, 0x87, 0xd3, 0x73, 0x6c, 0xff,
		0x91, 0x4f, 0x06, 0xcc, 0xcb, 0x81, 0x26, 0x23, 0x48, 0xbd, 0x5e, 0xd3, 0x14, 0x1d, 0x11, 0x8e,
		0xde, 0xd4, 0x94, 0x04, 0x6c, 0x0c, 0x3c, 0x53, 0x2f, 0x6b, 0x22, 0x7c, 0xc6, 0xfe, 0xcb, 0x94,
		0x3c, 0xd5, 0x0a, 0x57, 0x4f, 0x6c, 0xd6, 0x47, 0x5a, 0x6b, 0x16, 0xf8, 0x4c, 0x61, 0x60, 0x1a,
		0x37, 0x30, 0x3b, 0xc2, 0x0f, 0x9d, 0x3b, 0xa7, 0x63, 0x87, 0xc2, 0x88, 0xa1, 0xb9, 0x04, 0x1f,
		0x06, 0x27, 0x0c, 0x4e, 0x18, 0x9c, 0x5b, 0x67, 0x70, 0x6a, 0xb7, 0x86, 0x24, 0xc7, 0x63, 0x4b,
		0x24, 0x8b, 0xfb, 0x9e, 0x1f, 0xf2, 0x4b, 0xe0, 0x31, 0x54, 0x26, 0x0a, 0x79, 0x27, 0xee, 0xec,
		0x41, 0x6f, 0xcc, 0x0c, 0xad, 0x56, 0xf3, 0x10, 0xe2, 0x1c, 0xe2, 0x1c, 0xe2, 0x7c, 0xfb, 0xc4,
		0xf9, 0x48, 0xa4, 0x58, 0xee, 0xe0, 0xe1, 0x56, 0x7a, 0xf4, 0x81, 0x8a, 0x18, 0x68, 0x21, 0x7c,
		0x80, 0xf0, 0x01, 0xc2, 0x07, 0xb9, 0x38, 0xd2, 0x56, 0xb3, 0x79, 0x88, 0x08, 0x02, 0x22, 0x08,
		0xeb, 0xac, 0x56, 0xdf, 0xf1, 0x7c, 0x27, 0x7c, 0x34, 0x60, 0xb9, 0xce, 0x20, 0xc3, 0xcc, 0x84,
		0x99, 0x09, 0x33, 0x73, 0xeb, 0xcc, 0xcc, 0x81, 0xe3, 0x86, 0x6f, 0x90, 0x9f, 0x82, 0x81, 0x09,
		0x03, 0xb3, 0xb4, 0x06, 0x66, 0xbd, 0x09, 0xf3, 0x12, 0xe6, 0xe5, 0x9a, 0x63, 0x0c, 0xc6, 0x46,
		0xc6, 0x64, 0x39, 0xed, 0x9d, 0xcd, 0xd9, 0x02, 0x18, 0x05, 0xa7, 0x97, 0xbf, 0x01, 0xe6, 0x26,
		0xcc, 0x4d, 0x98, 0x9b, 0x5b, 0x67, 0x6e, 0xde, 0xda, 0xc1, 0x9c, 0x14, 0xb0, 0x78, 0xda, 0xf2,
		0x97, 0xa5, 0x01, 0x47, 0x7b, 0xfe, 0x0b, 0x07, 0x47, 0xb3, 0xc1, 0x3a, 0x96, 0x73, 0x77, 0x12,
		0xdd, 0x7b, 0xb0, 0xfc, 0xc6, 0xf4, 0xf7, 0xf1, 0x24, 0xaf, 0x12, 0xe9, 0x86, 0xd0, 0xb7, 0xdd,
		0xc0, 0x4c, 0xd6, 0xec, 0x05, 0x34, 0x7f, 0xea, 0xec, 0xf2, 0xed, 0x17, 0xe8, 0x18, 0xe8, 0x18,
		0xe8, 0x98, 0xed, 0xd3, 0x31, 0xdc, 0x62, 0xa5, 0xa2, 0xb9, 0x83, 0x31, 0x11, 0x26, 0x6d, 0x37,
		0xa3, 0x41, 0x75, 0x91, 0xe9, 0x9c, 0x0a, 0xcd, 0x51, 0x9e, 0x71, 0xa7, 0x86, 0x6f, 0xb4, 0xe7,
		0x6c, 0x16, 0xe5, 0xdc, 0xeb, 0x7d, 0x96, 0x11, 0x35, 0x15, 0xd6, 0x09, 0xa0, 0xb3, 0xdb, 0x9c,
		0x7b, 0x4d, 0x1a, 0x0c, 0xca, 0x47, 0x17, 0x3a, 0x33, 0x85, 0x26, 0x8b, 0x48, 0xd8, 0x46, 0x0a,
		0xa9, 0xee, 0x35, 0x59, 0x2b, 0x05, 0xb8, 0x26, 0x0a, 0xd5, 0x31, 0x51, 0x28, 0x17, 0x2a, 0x1e,
		0x13, 0x85, 0x94, 0xcc, 0x6c, 0x4c, 0x14, 0x82, 0x07, 0x00, 0x0f, 0x00, 0x1e, 0x40, 0x5e, 0x3d,
		0x00, 0x4c, 0x14, 0x62, 0xfe, 0xc1, 0x44, 0x21, 0x99, 0x2f, 0xc0, 0x44, 0xa1, 0x15, 0x48, 0xc7,
		0x44, 0x21, 0x19, 0xcc, 0x63, 0xa2, 0x10, 0xc4, 0x49, 0x02, 0x51, 0x63, 0x92, 0x0b, 0x26, 0x0a,
		0xe5, 0x41, 0xb8, 0x82, 0x0e, 0x31, 0x51, 0xc8, 0x90, 0x47, 0x51, 0xc1, 0x44, 0x21, 0xb9, 0xb0,
		0x06, 0x26, 0x0a, 0x21, 0xaa, 0x81, 0xa8, 0xc6, 0x96, 0x46, 0x35, 0x30, 0x51, 0x08, 0x15, 0xdb,
		0xf3, 0xe0, 0x51, 0xb1, 0xbd, 0xfa, 0x48, 0x31, 0x51, 0x28, 0xdb, 0x33, 0x85, 0x81, 0x69, 0xdc,
		0xc0, 0xc4, 0x44, 0x21, 0x18, 0x9c, 0x30, 0x38, 0x61, 0x70, 0x62, 0xa2, 0x50, 0x0e, 0x64, 0xf1,
		0xa4, 0xd8, 0x4a, 0x98, 0x10, 0xc3, 0x11, 0x68, 0x48, 0x60, 0x48, 0x60, 0x48, 0xe0, 0xad, 0x93,
		0xc0, 0xb7, 0x9e, 0xd7, 0x13, 0xb6, 0x6b, 0x42, 0x04, 0xd7, 0x30, 0xd4, 0x6d, 0x03, 0xf2, 0x31,
		0xd4, 0x0d, 0xf2, 0x1c, 0xf2, 0x1c, 0xf2, 0x9c, 0x59, 0xa4, 0x60, 0xa8, 0x1b, 0x2b, 0x61, 0x22,
		0x82, 0x9b, 0x0c, 0x1f, 0x11, 0xdc, 0xcc, 0x8e, 0x14, 0x43, 0xdd, 0x8c, 0x40, 0xc3, 0x50, 0x37,
		0x29, 0x35, 0x83, 0xa1, 0x6e, 0x30, 0x33, 0x61, 0x66, 0x6e, 0xad, 0x99, 0x89, 0xa1, 0x6e, 0x30,
		0x30, 0x61, 0x60, 0x96, 0xdb, 0xc0, 0xc4, 0x50, 0x37, 0x98, 0x97, 0x6b, 0x8f, 0x11, 0x43, 0xdd,
		0x60, 0x6e, 0xc2, 0xdc, 0x84, 0xb9, 0x69, 0xde, 0xdc, 0xc4, 0x50, 0xb7, 0xa2, 0xe9, 0x06, 0x0c,
		0x75, 0x83, 0x8e, 0x81, 0x8e, 0x81, 0x8e, 0x29, 0x8e, 0x8e, 0xc1, 0x50, 0xb7, 0x4c, 0x20, 0x6c,
		0xd9, 0x50, 0x37, 0x8e, 0x21, 0x61, 0x15, 0xe3, 0x33, 0xdd, 0x2e, 0xc6, 0x77, 0x99, 0xd5, 0x48,
		0xb7, 0x57, 0x29, 0xd2, 0xd1, 0x48, 0xfc, 0x6b, 0x37, 0x3e, 0x56, 0x3f, 0x3a, 0x41, 0x78, 0x1a,
		0x86, 0x7a, 0x43, 0xab, 0xaa, 0x9f, 0x1c, 0xf7, 0xac, 0x27, 0x46, 0x92, 0x3c, 0xd0, 0xd3, 0xf3,
		0xd5, 0x4f, 0xf6, 0x8f, 0x39, 0x48, 0xb5, 0x37, 0x8d, 0x46, 0xeb, 0xa8, 0xd1, 0x38, 0x38, 0x3a,
		0x3c, 0x3a, 0x38, 0x6e, 0x36, 0x6b, 0x2d, 0x9d, 0xee, 0x8f, 0xea, 0xb9, 0xdf, 0x15, 0xbe, 0xe8,
		0xfe, 0x32, 0xc2, 0x9b, 0x3b, 0xe8, 0xf5, 0x52, 0x3d, 0x2e, 0x26, 0x76, 0x37, 0xcc, 0xe6, 0x55,
		0xad, 0xa9, 0x84, 0xe6, 0x18, 0x9b, 0xc6, 0xd2, 0xea, 0x0c, 0xa9, 0x76, 0x85, 0x22, 0x2d, 0xe8,
		0xd2, 0x80, 0x89, 0xb3, 0x27, 0x1c, 0x38, 0xff, 0x41, 0xab, 0x9d, 0xae, 0xfc, 0x19, 0x29, 0x9c,
		0x4f, 0x75, 0xfa, 0x38, 0x6a, 0xa7, 0x12, 0xd9, 0x60, 0xe3, 0xab, 0x15, 0xa9, 0x81, 0xe6, 0x67,
		0x91, 0xfd, 0x29, 0x1d, 0xbf, 0x89, 0xc3, 0x3f, 0xd2, 0xf5, 0x83, 0xd8, 0xfc, 0x1d, 0x36, 0xbf,
		0x86, 0xc9, 0x7f, 0x31, 0x2b, 0x73, 0xc8, 0x7e, 0x47, 0x74, 0xe6, 0x3d, 0x61, 0xdf, 0xd1, 0x02,
		0x57, 0x3a, 0x01, 0xaa, 0x28, 0x10, 0xf5, 0xfa, 0xf5, 0x74, 0xa0, 0xf0, 0xbe, 0x7a, 0xa8, 0xc9,
		0x8c, 0xa8, 0xa0, 0x8d, 0xdf, 0xd5, 0x1a, 0xb7, 0x4b, 0x1c, 0xaf, 0x4b, 0x1e, 0xa7, 0x0b, 0x61,
		0xb1, 0x95, 0xc2, 0x82, 0x3a, 0xbe, 0x96, 0xa6, 0x3d, 0x39, 0xb4, 0x28, 0x53, 0xd4, 0x52, 0x3b,
		0x4a, 0xc9, 0x11, 0x95, 0xe4, 0x8c, 0x42, 0x72, 0x45, 0x1d, 0xd9, 0xa3, 0x8c, 0xec, 0x51, 0x45,
		0xe6, 0x28, 0x62, 0xba, 0x4e, 0xbc, 0x76, 0x54, 0x90, 0xaf, 0x23, 0x55, 0xb3, 0x03, 0x15, 0xbe,
		0xd6, 0x6a, 0x5f, 0x8b, 0x1a, 0x37, 0x63, 0xf2, 0xb2, 0x08, 0x01, 0x31, 0x05, 0xa3, 0xe9, 0x15,
		0xe3, 0xc9, 0xcd, 0x02, 0x5a, 0x0a, 0x4a, 0x80, 0x16, 0xbe, 0xa2, 0x87, 0xab, 0x58, 0xc3, 0x53,
		0xb4, 0x70, 0x94, 0x2c, 0x32, 0x89, 0xe4, 0xcf, 0x45, 0xf6, 0x55, 0x25, 0x73, 0x9a, 0x81, 0xd0,
		0xe5, 0x48, 0x7c, 0x33, 0xc1, 0xae, 0xff, 0xc4, 0x06, 0xec, 0xab, 0x62, 0x5d, 0x0b, 0xdb, 0x12,
		0x28, 0xd6, 0x40, 0xed, 0x7a, 0x7c, 0x26, 0x63, 0x69, 0xf5, 0x5f, 0x12, 0xf0, 0x26, 0x8b, 0x2f,
		0x65, 0x3c, 0xad, 0xc1, 0x8d, 0x22, 0x4e, 0x56, 0xe3, 0x21, 0xfe, 0x94, 0x2b, 0x9e, 0xb0, 0xda,
		0xf7, 0xbd, 0x8e, 0x08, 0x02, 0x91, 0xbc, 0xc5, 0x61, 0xae, 0x2d, 0x61, 0xf6, 0xd1, 0x04, 0x4c,
		0xad, 0xf7, 0xff, 0x36, 0x9a, 0xaf, 0x32, 0xe6, 0xe9, 0x8b, 0xf9, 0xd9, 0xb1, 0x46, 0xf7, 0xb3,
		0x0e, 0x89, 0x92, 0xd6, 0xa5, 0xb2, 0xf5, 0xa8, 0x6c, 0x1d, 0x2e, 0x5a, 0x7f, 0xd3, 0x1b, 0x67,
		0xa2, 0xce, 0x4d, 0xde, 0xd0, 0xec, 0xd4, 0x36, 0xa3, 0x61, 0xe9, 0x98, 0x37, 0x21, 0x41, 0xce,
		0xd9, 0x97, 0x76, 0xee, 0x55, 0x7c, 0x13, 0x05, 0x22, 0xa0, 0xba, 0x1a, 0x64, 0x97, 0x82, 0xec,
		0x3a, 0xa8, 0x11, 0x09, 0x8f, 0x2a, 0x90, 0x75, 0xa5, 0xab, 0x7d, 0x85, 0x29, 0x55, 0x2f, 0x84,
		0x24, 0x9d, 0xf2, 0x53, 0x74, 0x8c, 0x95, 0x1d, 0x61, 0x8a, 0xe3, 0x4b, 0x20, 0x32, 0x5d, 0xbf,
		0x56, 0xdb, 0x8f, 0xd5, 0xf6, 0x5b, 0x69, 0x44, 0x68, 0xc6, 0xd4, 0x56, 0x76, 0x3b, 0x35, 0x82,
		0xc1, 0x94, 0x20, 0xf0, 0x7c, 0xf0, 0x77, 0xec, 0x40, 0xed, 0x8f, 0x08, 0x9e, 0xcb, 0xc4, 0x93,
		0x32, 0x9c, 0x54, 0x42, 0xbc, 0xa4, 0xd0, 0xae, 0x62, 0x48, 0x57, 0x39, 0x94, 0x0b, 0xc6, 0x2c,
		0x20, 0x63, 0xaa, 0x06, 0x60, 0xab, 0xb6, 0x7f, 0x1f, 0xd0, 0x53, 0x11, 0xe3, 0xab, 0xb7, 0x21,
		0x6d, 0xa9, 0x4c, 0xce, 0xdb, 0x92, 0x88, 0x50, 0x25, 0xf7, 0x74, 0x82, 0x77, 0xfa, 0x49, 0x4b,
		0x72, 0x38, 0x94, 0x18, 0x06, 0x55, 0x7d, 0x42, 0xad, 0xc2, 0x2b, 0xfd, 0x82, 0x2b, 0x23, 0x85,
		0x56, 0x7a, 0x05, 0x56, 0x66, 0x72, 0xb5, 0x9d, 0xfe, 0xc0, 0x1a, 0x04, 0xf6, 0xbd, 0x98, 0x46,
		0x0a, 0xe8, 0xb2, 0x32, 0x06, 0x09, 0x72, 0x13, 0x72, 0xb3, 0x74, 0x72, 0xb3, 0xe3, 0x0d, 0xdc,
		0x50, 0xf8, 0xad, 0x86, 0x86, 0xe8, 0x24, 0xac, 0x94, 0xd2, 0xec, 0x79, 0xd7, 0xab, 0x5d, 0x65,
		0x48, 0x92, 0xb2, 0xb4, 0xcc, 0x70, 0xf5, 0xa4, 0x73, 0xb6, 0x29, 0x0f, 0xf5, 0x8a, 0x79, 0x73,
		0x87, 0x5a, 0xde, 0x92, 0x62, 0x76, 0x6c, 0xa7, 0x94, 0x7a, 0x6d, 0xe7, 0x4a, 0x33, 0x0f, 0x02,
		0xe1, 0x73, 0xe8, 0xe5, 0x31, 0x1c, 0x68, 0x65, 0x68, 0x65, 0x68, 0x65, 0x68, 0x65, 0x68, 0x65,
		0x68, 0x65, 0x68, 0x65, 0x9a, 0x56, 0x0e, 0x9d, 0x9e, 0xf3, 0x0f, 0xad, 0x76, 0x6a, 0x51, 0x2d,
		0xcf, 0x01, 0x82, 0x5e, 0x86, 0x5e, 0x2e, 0x9d, 0x5e, 0xee, 0x0b, 0xbf, 0x23, 0xdc, 0xd0, 0xbe,
		0x17, 0x1a, 0x8a, 0xb9, 0x09, 0xc5, 0x0c, 0xc5, 0x9c, 0x57, 0xc5, 0x7c, 0x70, 0x00, 0x3d, 0x9c,
		0x85, 0x1e, 0x7e, 0x10, 0x0f, 0x9e, 0xff, 0x38, 0x71, 0x6c, 0xe9, 0x4a, 0x78, 0x01, 0x0a, 0x34,
		0x30, 0x34, 0x70, 0xe9, 0x34, 0xf0, 0xc0, 0x71, 0x43, 0xb8, 0xc5, 0xd0, 0xbe, 0x70, 0x8b, 0xa1,
		0x8e, 0x53, 0x50, 0xc7, 0x1c, 0x9e, 0xf1, 0x0a, 0x58, 0x50, 0xcd, 0x50, 0xcd, 0x70, 0x8e, 0xe1,
		0x1c, 0x43, 0x3d, 0xc3, 0x39, 0x86, 0x36, 0xde, 0x88, 0x36, 0xcc, 0xea, 0x81, 0xc6, 0x85, 0xc6,
		0x8d, 0x9f, 0x78, 0xea, 0x45, 0xaf, 0x46, 0xb8, 0xbb, 0x4f, 0x58, 0xdb, 0x4f, 0x68, 0x8c, 0x02,
		0x6f, 0x83, 0xb7, 0x11, 0xe8, 0x82, 0x25, 0x0d, 0x4b, 0x1a, 0x81, 0x2e, 0x98, 0xd6, 0x33, 0xb4,
		0x05, 0xa1, 0xed, 0x87, 0x56, 0xe8, 0x3c, 0xe8, 0x0d, 0xb8, 0x9b, 0xc1, 0x80, 0x2a, 0x86, 0x2a,
		0x2e, 0x9d, 0x2a, 0x1e, 0x51, 0x76, 0xe8, 0x74, 0xfe, 0x0e, 0x52, 0xd7, 0xc7, 0xff, 0x76, 0x27,
		0xb2, 0xac, 0xea, 0xda, 0xae, 0x17, 0x88, 0x8e, 0xe7, 0x76, 0x49, 0x13, 0x7c, 0xa1, 0xd7, 0xa1,
		0xd7, 0xa1, 0xd7, 0x0b, 0xaf, 0xd7, 0x0b, 0x35, 0x31, 0x2c, 0x1a, 0x71, 0x34, 0x7b, 0xa5, 0x3c,
		0x1a, 0x4f, 0x72, 0x74, 0xd3, 0x97, 0xd9, 0x17, 0xcd, 0x5e, 0xa9, 0x0c, 0xc1, 0x33, 0x3d, 0x21,
		0x6c, 0x3a, 0xe4, 0x6e, 0x73, 0x98, 0x42, 0xad, 0x43, 0x58, 0xbd, 0x23, 0x98, 0xa5, 0x03, 0x58,
		0xad, 0xe3, 0x37, 0xab, 0xe9, 0x69, 0x31, 0xca, 0xe3, 0x1b, 0x9d, 0x16, 0xa3, 0xb5, 0x62, 0xce,
		0x4d, 0xdb, 0x34, 0x7e, 0x8c, 0x82, 0x11, 0x9d, 0xc9, 0x69, 0x41, 0xf0, 0xcd, 0x0a, 0x84, 0xff,
		0x7d, 0x4d, 0x5f, 0xd8, 0x8b, 0xb7, 0xf1, 0xf2, 0xd9, 0x7c, 0xcc, 0x4e, 0x0b, 0x1e, 0x03, 0x2b,
		0x14, 0xfe, 0x43, 0x21, 0xe7, 0xa7, 0x45, 0x37, 0x9f, 0xd6, 0x0c, 0xb5, 0xce, 0x0c, 0xfb, 0x92,
		0x23, 0xd4, 0xa6, 0x9f, 0x67, 0x9e, 0xa0, 0x76, 0x60, 0x66, 0x82, 0x9a, 0x04, 0x29, 0x50, 0x9d,
		0xc1, 0xec, 0xa7, 0xa8, 0x6d, 0x26, 0x15, 0x1e, 0x95, 0x29, 0x3d, 0x49, 0x4d, 0xb8, 0xf6, 0x6d,
		0x8f, 0x30, 0xb5, 0x69, 0x7a, 0x9d, 0xec, 0x88, 0x9e, 0x97, 0xa5, 0x8b, 0x23, 0xdc, 0x95, 0x64,
		0x0c, 0x9b, 0x02, 0xa5, 0xea, 0x86, 0x2f, 0xf2, 0x37, 0xf1, 0x49, 0x9e, 0x92, 0xcd, 0x98, 0xde,
		0xf4, 0x71, 0x6c, 0xb7, 0x9e, 0xd7, 0x13, 0xb6, 0x4b, 0x19, 0xc7, 0x56, 0x4b, 0x71, 0x9c, 0x5a,
		0xdf, 0xf7, 0x42, 0xaf, 0xe3, 0xf5, 0xac, 0xef, 0xc2, 0x0f, 0x54, 0x3c, 0x8c, 0xf9, 0xc9, 0x99,
		0x8b, 0x10, 0xd4, 0xb9, 0xf5, 0x3f, 0x75, 0xf0, 0x2a, 0x78, 0x35, 0x3b, 0x5e, 0x15, 0xee, 0xe0,
		0x41, 0xf8, 0xaa, 0x05, 0x9f, 0x94, 0x4d, 0x9c, 0x8a, 0x9b, 0x36, 0x79, 0x78, 0xdc, 0xb7, 0x43,
		0x61, 0xf5, 0x9c, 0x07, 0x27, 0x54, 0xe7, 0xee, 0xb9, 0x6b, 0xc1, 0xa2, 0x60, 0xd1, 0xcc, 0x58,
		0x74, 0xe0, 0xb8, 0x61, 0xad, 0x45, 0xe0, 0xce, 0x96, 0xc2, 0x25, 0xb4, 0xe0, 0x3b, 0x6d, 0x4a,
		0x9c, 0x46, 0x6e, 0x49, 0x6f, 0x9f, 0x8e, 0x66, 0x70, 0x9d, 0x23, 0xcc, 0x3b, 0xa4, 0x8d, 0xc5,
		0xcb, 0x1c, 0x65, 0xad, 0x66, 0xf3, 0xb0, 0x99, 0x21, 0xda, 0x0c, 0x45, 0xab, 0xdb, 0x69, 0x8e,
		0xef, 0x15, 0xc1, 0xc8, 0x48, 0xa4, 0xaa, 0xa3, 0xc5, 0xcb, 0xa1, 0x91, 0xa0, 0x91, 0xa0, 0x91,
		0xa0, 0x91, 0xa0, 0x91, 0xa0, 0x91, 0xc8, 0x1a, 0x29, 0x74, 0x1e, 0x84, 0x37, 0x20, 0xe8, 0xa2,
		0xd9, 0x85, 0xd0, 0x42, 0xd0, 0x42, 0xd0, 0x42, 0xd0, 0x42, 0xd0, 0x42, 0xd0, 0x42, 0x84, 0x4f,
		0x64, 0x55, 0x7b, 0xf1, 0x92, 0x9d, 0xdf, 0x97, 0xca, 0xdc, 0x56, 0xe4, 0x2b, 0x0d, 0x2e, 0x82,
		0x6f, 0x17, 0x63, 0xc8, 0x37, 0x53, 0x2d, 0x46, 0x2d, 0xbd, 0x58, 0x5b, 0xf3, 0x20, 0xb3, 0x07,
		0x46, 0x69, 0xff, 0x4b, 0x5e, 0xb6, 0x7b, 0x21, 0x37, 0xcd, 0xc0, 0x36, 0xc8, 0x4d, 0xc3, 0x68,
		0x84, 0xd1, 0xb8, 0xfa, 0xe4, 0x90, 0x9b, 0x96, 0xe7, 0x56, 0xe4, 0xa6, 0xc1, 0xab, 0x59, 0xf2,
		0x2a, 0x72, 0xd3, 0x89, 0xa8, 0x41, 0x6e, 0x1a, 0x2c, 0x8a, 0x18, 0x0c, 0x62, 0x30, 0x88, 0xc1,
		0x20, 0x06, 0xc3, 0xa1, 0x8b, 0x90, 0x9b, 0x86, 0x46, 0x82, 0x46, 0x82, 0x46, 0x82, 0x46, 0x82,
		0x46, 0xca, 0x87, 0x46, 0x42, 0x6e, 0x1a, 0x5a, 0x08, 0x5a, 0x08, 0x5a, 0x08, 0x5a, 0x08, 0x5a,
		0xc8, 0x90, 0x16, 0xca, 0x7b, 0x6e, 0x5a, 0x76, 0x14, 0x85, 0x72, 0x6a, 0x5a, 0x62, 0xf4, 0x44,
		0x5e, 0x87, 0x02, 0x6c, 0x6c, 0xac, 0xa7, 0x20, 0x44, 0x6b, 0x2a, 0xc0, 0xda, 0x64, 0xbc, 0x54,
		0x12, 0x5e, 0x7a, 0x16, 0x40, 0x9d, 0x6d, 0x16, 0x40, 0x51, 0xc7, 0x00, 0xa4, 0x36, 0x01, 0xe0,
		0xd6, 0xf3, 0x24, 0x27, 0xce, 0xcd, 0xa7, 0x16, 0xa5, 0x06, 0xcc, 0x49, 0x8a, 0xf7, 0x34, 0xe6,
		0x00, 0x94, 0xb5, 0xcc, 0xc2, 0x74, 0x85, 0x85, 0xb4, 0x61, 0x48, 0x1c, 0xcf, 0xa6, 0x30, 0x8e,
		0x8d, 0x3a, 0x7e, 0x4d, 0xd1, 0x7a, 0x54, 0xb0, 0x81, 0x29, 0xd6, 0x22, 0x75, 0xc8, 0x22, 0xd1,
		0x3a, 0xd4, 0x31, 0x6f, 0x54, 0x06, 0x57, 0x52, 0xac, 0x40, 0x5d, 0x54, 0xe8, 0x8f, 0x37, 0xd3,
		0xc2, 0x0e, 0x93, 0x71, 0xd6, 0x36, 0x50, 0x37, 0xd7, 0x19, 0xf8, 0xbe, 0x70, 0x43, 0xab, 0x6b,
		0x87, 0x42, 0x4d, 0xb4, 0xc7, 0xae, 0x84, 0x84, 0x87, 0x84, 0x5f, 0xc2, 0xf7, 0x88, 0x36, 0x2c,
		0xdb, 0xed, 0xca, 0xce, 0x98, 0x7d, 0x19, 0x6f, 0x2f, 0xf1, 0xd9, 0x2f, 0x76, 0x18, 0x0a, 0xdf,
		0x95, 0x16, 0xd7, 0xd5, 0xbf, 0xae, 0x0e, 0xac, 0xe3, 0xf6, 0x53, 0x63, 0x78, 0x7d, 0x6d, 0x4d,
		0x5e, 0xd6, 0xe7, 0x5f, 0x5e, 0xce, 0x5e, 0x9c, 0xc4, 0x5e, 0xec, 0x5c, 0x5f, 0xbf, 0x1e, 0xbf,
		0xfe, 0x7f, 0xbb, 0x3f, 0xff, 0x79, 0xf5, 0xff, 0xac, 0x76, 0xec, 0x13, 0x3f, 0x6d, 0x46, 0x7e,
		0x5b, 0xe6, 0x99, 0xce, 0x2f, 0x3e, 0xfc, 0x51, 0xb8, 0x07, 0x33, 0x20, 0x97, 0xba, 0xde, 0x83,
		0xed, 0xb8, 0x96, 0xd4, 0x02, 0x91, 0x17, 0x72, 0x9b, 0xbb, 0x08, 0xd2, 0x08, 0xd2, 0x88, 0x4c,
		0x1e, 0xca, 0xb2, 0xe8, 0xa3, 0x70, 0xef, 0xc7, 0x6e, 0x7a, 0x29, 0x2c, 0xc7, 0x1a, 0x2c, 0xc7,
		0x19, 0x2a, 0xea, 0xcd, 0xc3, 0x02, 0x1a, 0x8a, 0x46, 0xb4, 0xe7, 0xce, 0xce, 0xce, 0xce, 0x95,
		0x6d, 0xfd, 0x73, 0x6a, 0xfd, 0x79, 0x60, 0x1d, 0xdf, 0xb4, 0xe7, 0x7e, 0xb9, 0xbe, 0xb6, 0x6e,
		0xda, 0xbb, 0x4f, 0x07, 0x7b, 0xad, 0xda, 0x70, 0xf7, 0xe7, 0x97, 0xf7, 0xdb, 0xd7, 0xd7, 0xaf,
		0x77, 0xff, 0x45, 0xb9, 0xea, 0xe7, 0xdd, 0xe7, 0xd1, 0xb5, 0xd9, 0xaa, 0xd5, 0xbc, 0x3e, 0xb1,
		0x01, 0x7d, 0xfb, 0xcd, 0x0b, 0x42, 0x35, 0x65, 0x1b, 0x5d, 0x01, 0x4d, 0x0b, 0x4d, 0x0b, 0x4d,
		0x0b, 0x4d, 0x0b, 0x4d, 0x0b, 0x4d, 0x0b, 0x4d, 0xbb, 0x51, 0xd3, 0xf6, 0xbc, 0x7b, 0xc7, 0xb5,
		0x6e, 0x6d, 0xd7, 0x15, 0xbe, 0xbc, 0xb6, 0x5d, 0xb8, 0x0a, 0x1a, 0x17, 0x1a, 0x77, 0x09, 0xdf,
		0xd2, 0x1b, 0x25, 0x25, 0x37, 0x48, 0xd2, 0x68, 0xfb, 0xc1, 0x0b, 0xbb, 0xca, 0xa4, 0x3d, 0x7f,
		0x11, 0x28, 0x1b, 0x94, 0x9d, 0x1d, 0x65, 0x67, 0x5b, 0xc5, 0xb1, 0xa1, 0xb2, 0x45, 0xb6, 0x80,
		0x23, 0xb9, 0x8e, 0x45, 0xae, 0x78, 0x23, 0x14, 0x3d, 0x57, 0x84, 0xd2, 0x5b, 0x1d, 0x16, 0x3f,
		0x8e, 0xc5, 0x0e, 0x58, 0xec, 0x20, 0x73, 0xe4, 0x69, 0x8a, 0x6a, 0x0c, 0xcf, 0x28, 0xef, 0xf0,
		0x8c, 0x3b, 0xbb, 0x17, 0x60, 0x7a, 0x06, 0xca, 0xda, 0x75, 0xa3, 0x1e, 0xe5, 0x9f, 0x9e, 0x81,
		0xce, 0x7a, 0xb0, 0x1a, 0x3a, 0x48, 0x24, 0x2e, 0x41, 0x07, 0x89, 0xd9, 0xd0, 0x2b, 0x21, 0x1e,
		0xad, 0x15, 0x97, 0xe6, 0x46, 0x19, 0x3a, 0x48, 0xb4, 0x75, 0x11, 0x3a, 0xeb, 0xa1, 0x91, 0xa0,
		0x91, 0xa0, 0x91, 0xa0, 0x91, 0xa0, 0x91, 0xf2, 0xa1, 0x91, 0xd0, 0x59, 0x0f, 0x2d, 0x04, 0x2d,
		0x04, 0x2d, 0x04, 0x2d, 0x04, 0x2d, 0x64, 0x48, 0x0b, 0xe5, 0xb2, 0xb3, 0x7e, 0x21, 0x7b, 0xc7,
		0x3e, 0xf8, 0xfd, 0x72, 0x0c, 0x1d, 0xb3, 0xdf, 0x91, 0xbe, 0xd2, 0x54, 0xb8, 0x48, 0x5f, 0xc1,
		0x76, 0x84, 0xed, 0x68, 0xc4, 0x76, 0x44, 0xfa, 0x0a, 0xac, 0x06, 0x56, 0x83, 0x9b, 0x06, 0x37,
		0x0d, 0x6e, 0x1a, 0xdc, 0x34, 0xa4, 0xaf, 0xa0, 0x91, 0xa0, 0x91, 0xa0, 0x91, 0xa0, 0x91, 0xa0,
		0x91, 0x0a, 0xa4, 0x91, 0x90, 0xbe, 0x82, 0x16, 0x82, 0x16, 0x82, 0x16, 0x82, 0x16, 0x82, 0x16,
		0x32, 0xa4, 0x85, 0x0a, 0x90, 0xbe, 0x62, 0x9e, 0x0d, 0xbd, 0x90, 0xbd, 0x2a, 0xf0, 0x78, 0x68,
		0x99, 0x0e, 0x3d, 0x22, 0x5a, 0xa4, 0xfb, 0x0c, 0x5f, 0xad, 0x79, 0xf0, 0xea, 0xe9, 0xe0, 0x7e,
		0xa4, 0xc7, 0x44, 0x77, 0xa5, 0x78, 0xde, 0xd0, 0x7f, 0xb8, 0x3f, 0x51, 0x7d, 0x27, 0x93, 0x87,
		0x4d, 0x6a, 0x40, 0x7c, 0x27, 0x82, 0x8e, 0xef, 0xf4, 0xa7, 0x48, 0xad, 0x9e, 0x76, 0xbb, 0x8e,
		0x7b, 0x5f, 0x19, 0x3d, 0xe2, 0xc4, 0x46, 0xa9, 0x74, 0xed, 0xd0, 0xae, 0x84, 0x5e, 0x25, 0xfc,
		0x26, 0x2a, 0x13, 0x50, 0x95, 0x07, 0xaf, 0x2b, 0x7a, 0xb9, 0xe8, 0x68, 0xec, 0x0b, 0xf7, 0xae,
		0xe7, 0xfd, 0x5f, 0x01, 0xdb, 0x19, 0x67, 0x77, 0x9e, 0x56, 0x2f, 0x63, 0xf4, 0x85, 0xd2, 0xd9,
		0x60, 0x09, 0xe4, 0xae, 0xa2, 0xa0, 0xb7, 0x9e, 0x1b, 0xda, 0x8e, 0x2b, 0xfc, 0xca, 0x9d, 0xe7,
		0x8f, 0x09, 0x69, 0x04, 0x64, 0x2d, 0xcd, 0x48, 0xd2, 0x8e, 0xb2, 0xf5, 0x4c, 0xcb, 0x2d, 0xcb,
		0x3d, 0x76, 0xa5, 0x80, 0x89, 0xe5, 0x8d, 0x34, 0x27, 0xa9, 0xd3, 0x54, 0x69, 0x76, 0x83, 0xd4,
		0x6b, 0x2f, 0x4b, 0xbd, 0xf5, 0x62, 0x5e, 0x56, 0xbc, 0x57, 0x57, 0xce, 0xdf, 0x97, 0x10, 0xe4,
		0x8b, 0xf8, 0x79, 0xb9, 0xd7, 0x39, 0xde, 0xab, 0x86, 0xa2, 0x27, 0x1e, 0x44, 0xe8, 0x3f, 0x4e,
		0xbf, 0x33, 0x76, 0xa7, 0xf3, 0x6d, 0xe0, 0x8b, 0x9f, 0x5c, 0x7a, 0xda, 0xd5, 0x34, 0x9f, 0x48,
		0xe3, 0xeb, 0x68, 0x7a, 0xde, 0xe3, 0x8b, 0xbe, 0x76, 0x15, 0x1a, 0x36, 0xd0, 0xad, 0x34, 0x9d,
		0x4a, 0xd3, 0xe5, 0xb2, 0x4b, 0xf6, 0x72, 0x77, 0x8a, 0x1a, 0x31, 0x49, 0xce, 0x55, 0xbb, 0x22,
		0x08, 0x1d, 0x77, 0x4c, 0x35, 0xd6, 0xbd, 0xef, 0x0d, 0xfa, 0xc1, 0xe6, 0x0e, 0xfd, 0x15, 0xd7,
		0xe4, 0xa3, 0x4d, 0x7f, 0xdd, 0xe1, 0xe5, 0x5d, 0xb1, 0xad, 0x3d, 0x5c, 0x43, 0xca, 0x2d, 0x76,
		0x90, 0x0a, 0x93, 0x71, 0x63, 0x97, 0x16, 0xa3, 0x7d, 0x5f, 0x86, 0x44, 0x8a, 0xaa, 0xa7, 0xa4,
		0x48, 0x88, 0xc7, 0xff, 0x92, 0xae, 0x80, 0x92, 0x9c, 0x05, 0x11, 0x3b, 0x2a, 0xe9, 0xca, 0x41,
		0x05, 0xe2, 0xca, 0x2c, 0x8c, 0xa8, 0x42, 0x74, 0xe5, 0x8b, 0x23, 0x2a, 0x10, 0xa5, 0x99, 0x40,
		0xa2, 0x2c, 0xb1, 0x46, 0x17, 0x8c, 0x05, 0x9a, 0xe5, 0x74, 0xd5, 0x91, 0x3f, 0x3b, 0xf4, 0x08,
		0xc2, 0x5e, 0x2a, 0x23, 0x0f, 0x55, 0x09, 0x5a, 0x87, 0xb0, 0xb9, 0x08, 0x5c, 0x97, 0xd0, 0xd9,
		0x08, 0x9e, 0x8d, 0xf0, 0x19, 0x19, 0x80, 0x18, 0xc5, 0x53, 0x3c, 0x7d, 0xe5, 0x08, 0x7b, 0xec,
		0xec, 0xa5, 0x67, 0x69, 0x25, 0x8a, 0xec, 0x37, 0x86, 0xe2, 0x94, 0xbc, 0x22, 0x44, 0x31, 0xde,
		0x28, 0xe1, 0x73, 0x45, 0x44, 0xb1, 0xbf, 0xec, 0xe9, 0xec, 0xc7, 0xed, 0xeb, 0xf8, 0x5b, 0xfb,
		0x4a, 0x0a, 0x72, 0xad, 0x13, 0x77, 0x39, 0xfb, 0xfe, 0x9b, 0xe8, 0xd5, 0xd4, 0xaf, 0x7b, 0xf7,
		0xf2, 0xad, 0xbf, 0x8e, 0xef, 0x23, 0xf6, 0x8e, 0x54, 0x11, 0xbe, 0x42, 0x50, 0x58, 0xc2, 0x28,
		0x9b, 0x43, 0x45, 0xa0, 0x6e, 0x57, 0x2c, 0x5c, 0x0d, 0xeb, 0x02, 0xd6, 0x45, 0xfa, 0xd6, 0xc5,
		0x1c, 0x09, 0xd2, 0x0d, 0x8c, 0x79, 0x20, 0x34, 0x1b, 0xa3, 0x06, 0x1b, 0x03, 0x36, 0x86, 0x79,
		0x1b, 0x43, 0x95, 0x3d, 0xa8, 0x9e, 0x23, 0x8f, 0x27, 0xc9, 0xc4, 0x2c, 0xda, 0x4c, 0xc3, 0xc1,
		0x3c, 0xdc, 0x4c, 0xc4, 0xc5, 0x4c, 0xec, 0x4c, 0xc5, 0xce, 0x5c, 0x06, 0x98, 0x8c, 0xc6, 0x6c,
		0x44, 0xa6, 0xd3, 0x66, 0xbe, 0x95, 0x11, 0x42, 0xbb, 0xdb, 0xf5, 0x45, 0x10, 0xe8, 0x9f, 0xfb,
		0xaa, 0x18, 0xe2, 0x0c, 0xb8, 0xe6, 0x81, 0xe9, 0xd5, 0x6e, 0xb0, 0xb1, 0x2d, 0x27, 0xfb, 0x9a,
		0x62, 0x63, 0x6e, 0x76, 0x36, 0xc6, 0xd6, 0xc6, 0xd8, 0xdb, 0x20, 0x9b, 0xeb, 0xb1, 0xbb, 0x26,
		0xdb, 0xeb, 0xfb, 0xf7, 0x89, 0xb4, 0xe7, 0xf4, 0x99, 0x38, 0x75, 0x41, 0xb9, 0x1e, 0x33, 0xc0,
		0x9a, 0x3e, 0xeb, 0x15, 0x0b, 0x45, 0xf0, 0x70, 0xc2, 0x12, 0xe6, 0xbe, 0x37, 0x18, 0x71, 0x17,
		0x8f, 0xa3, 0x30, 0xc2, 0x54, 0x5d, 0xb7, 0x21, 0x0d, 0xf8, 0xaf, 0x9d, 0x9d, 0xf1, 0x1a, 0xc8,
		0xe7, 0xab, 0x9a, 0x75, 0x3c, 0x59, 0x0d, 0xf9, 0x5c, 0x1b, 0xff, 0x33, 0x79, 0x5d, 0xbf, 0x3a,
		0xb0, 0x1a, 0xb3, 0xd7, 0xcd, 0xab, 0x03, 0xab, 0xd9, 0xde, 0xbd, 0xbe, 0x7e, 0xbd, 0xfb, 0x74,
		0x38, 0x54, 0xbf, 0xf0, 0xa7, 0x2a, 0xdb, 0xcd, 0xb7, 0x39, 0x91, 0x4b, 0x59, 0x68, 0x52, 0x7e,
		0x0c, 0xb3, 0x40, 0x1a, 0xee, 0xe5, 0x98, 0xfd, 0x5b, 0x60, 0xff, 0x09, 0x71, 0xda, 0xd6, 0xdd,
		0xa9, 0xf5, 0xbe, 0xfd, 0x54, 0xdb, 0x6b, 0x0c, 0x4f, 0x76, 0x9f, 0x8e, 0x86, 0xcb, 0x6f, 0x3e,
		0xaf, 0xfa, 0x58, 0x6d, 0xef, 0x68, 0x78, 0x92, 0xf0, 0x97, 0xd6, 0x64, 0xbd, 0xac, 0x04, 0x8c,
		0xe6, 0x70, 0x27, 0xf6, 0xd1, 0xd1, 0xfb, 0xf5, 0xa4, 0x0b, 0x1a, 0x09, 0x17, 0x1c, 0x26, 0x5d,
		0x70, 0x98, 0x70, 0x41, 0xe2, 0x2d, 0xd5, 0x13, 0x2e, 0x68, 0x0e, 0x9f, 0x63, 0x9f, 0xdf, 0x59,
		0xfd, 0xd1, 0xd6, 0x70, 0xf7, 0x39, 0xe9, 0x6f, 0x47, 0xc3, 0xe7, 0x93, 0xdd, 0xad, 0x16, 0x86,
		0xa0, 0xb7, 0x62, 0xd3, 0x1b, 0x8f, 0x6a, 0x78, 0x95, 0xed, 0x7d, 0xd0, 0xbf, 0x5f, 0x43, 0xa9,
		0x2d, 0xb8, 0xd8, 0x7d, 0xcf, 0x0f, 0xcd, 0x38, 0xef, 0x63, 0xc8, 0xf0, 0xdc, 0xe1, 0xb9, 0xc3,
		0x73, 0xcf, 0xad, 0xe7, 0xae, 0xdc, 0x13, 0xb7, 0x89, 0x53, 0x5b, 0x0c, 0xa0, 0x68, 0x3d, 0x74,
		0x29, 0x98, 0xed, 0x3a, 0x3d, 0x77, 0x86, 0x45, 0x5c, 0x0c, 0xac, 0x66, 0x8f, 0x5e, 0x22, 0x5c,
		0x86, 0x26, 0x34, 0xc3, 0x7e, 0x5a, 0x45, 0xb7, 0xd7, 0x2f, 0xab, 0xa3, 0xd2, 0xe8, 0x0d, 0xcc,
		0xe4, 0xb8, 0xb6, 0xdd, 0x02, 0x4b, 0x35, 0x69, 0x43, 0xac, 0x35, 0x8a, 0xc1, 0x31, 0x57, 0x7b,
		0x34, 0x5f, 0x44, 0x33, 0xff, 0xcb, 0xbe, 0x56, 0xae, 0xb5, 0x62, 0xac, 0x48, 0x69, 0xee, 0x8d,
		0x85, 0xbf, 0x2a, 0x55, 0x2f, 0xe9, 0x13, 0x05, 0xa5, 0x93, 0x99, 0x33, 0x01, 0x67, 0x20, 0xf1,
		0xa6, 0xdb, 0x2c, 0x8d, 0xfc, 0x78, 0x8a, 0xe6, 0x38, 0xf2, 0xe3, 0xec, 0x66, 0xf6, 0xcb, 0x3a,
		0x6d, 0x61, 0xdf, 0xf9, 0xe2, 0x4e, 0x87, 0x6c, 0x66, 0xa1, 0xdc, 0x23, 0x0d, 0x18, 0x5f, 0xa6,
		0xd2, 0xfe, 0xf5, 0xeb, 0xa9, 0x2c, 0xde, 0x5f, 0xc5, 0xeb, 0x05, 0x91, 0x77, 0x5a, 0x01, 0x0b,
		0xee, 0x40, 0x05, 0x24, 0x1d, 0x24, 0x1d, 0x24, 0x5d, 0x51, 0x24, 0xdd, 0x98, 0xd1, 0x73, 0x2c,
		0xe6, 0xe4, 0x26, 0xcc, 0x6f, 0x3c, 0x0b, 0xd9, 0x01, 0x25, 0x6b, 0x4f, 0x41, 0x57, 0xa0, 0xd5,
		0x21, 0xd0, 0x20, 0xd0, 0x50, 0xda, 0x58, 0x41, 0x69, 0x63, 0x5e, 0xd8, 0x98, 0x9b, 0x9d, 0x8d,
		0xb1, 0xb5, 0x31, 0xf6, 0x36, 0xc8, 0xe6, 0x3c, 0xe1, 0x3c, 0x94, 0x36, 0x2a, 0x3f, 0x2b, 0x4a,
		0x1b, 0x19, 0x60, 0xa2, 0xf0, 0x6e, 0xe9, 0x07, 0xa5, 0x8d, 0x28, 0x6d, 0xd4, 0x66, 0x7f, 0x94,
		0x36, 0xa2, 0xd4, 0x0c, 0xa5, 0x8d, 0x19, 0x08, 0x43, 0xd0, 0x1b, 0x4a, 0x1b, 0x51, 0xda, 0x88,
		0xd2, 0x46, 0x78, 0xee, 0xf0, 0xdc, 0xb7, 0xd6, 0x73, 0x47, 0x69, 0xa3, 0xca, 0x8d, 0xa1, 0xb4,
		0x11, 0xa5, 0x8d, 0x28, 0x6d, 0xe4, 0xb3, 0x9d, 0x2a, 0x28, 0x6d, 0x94, 0xd7, 0x69, 0xc5, 0x2d,
		0x6d, 0xd4, 0x49, 0xb5, 0x56, 0xd2, 0xaf, 0x6c, 0x94, 0x58, 0x2f, 0xc1, 0x47, 0x12, 0x66, 0x27,
		0x08, 0xfd, 0x2e, 0x1e, 0x13, 0x52, 0x6a, 0x15, 0x4d, 0x4b, 0xbd, 0xfa, 0xd1, 0x09, 0xc2, 0xd3,
		0x30, 0x24, 0x4e, 0x28, 0xfa, 0xe4, 0xb8, 0x67, 0xa3, 0x13, 0x73, 0x27, 0x32, 0x89, 0xb6, 0xa7,
		0x66, 0x0e, 0x42, 0xed, 0x4d, 0xa3, 0xd1, 0x3a, 0x6a, 0x34, 0x0e, 0x8e, 0x0e, 0x8f, 0x0e, 0x8e,
		0x9b, 0xcd, 0x5a, 0xab, 0x46, 0x90, 0xa4, 0xd5, 0x73, 0xbf, 0x2b, 0x7c, 0xd1, 0xfd, 0x65, 0x84,
		0x35, 0x77, 0xd0, 0xeb, 0x19, 0x3d, 0x1c, 0x4d, 0x8e, 0xce, 0x80, 0x93, 0xab, 0xa4, 0x72, 0x8d,
		0x14, 0x79, 0xb7, 0x8a, 0x89, 0x98, 0xda, 0x07, 0x9e, 0xf9, 0x5c, 0xcc, 0xf9, 0xc3, 0x4d, 0x73,
		0x3a, 0xa6, 0xf2, 0xe8, 0x62, 0xea, 0xc8, 0xe2, 0xbc, 0xaf, 0xee, 0xc3, 0x54, 0xcc, 0x4c, 0xa7,
		0x62, 0xd2, 0x97, 0xf7, 0xa9, 0xd7, 0x17, 0x52, 0xea, 0x09, 0x57, 0xd4, 0x0f, 0x46, 0x0c, 0x90,
		0xe6, 0xe6, 0x67, 0xa5, 0x3a, 0x40, 0x52, 0xdd, 0x1f, 0x79, 0x7c, 0x6d, 0x1d, 0x8c, 0xba, 0x05,
		0x8c, 0x8a, 0xe1, 0xf8, 0x26, 0xe2, 0xe4, 0x18, 0x5c, 0x9b, 0x42, 0x5c, 0x1b, 0xc3, 0xf1, 0xe1,
		0x0a, 0xac, 0x76, 0x05, 0x54, 0x83, 0x35, 0x66, 0x7c, 0x00, 0x85, 0x18, 0x8c, 0xe9, 0x7d, 0xa9,
		0xd3, 0x18, 0x8a, 0xa4, 0xe4, 0x55, 0x8b, 0x8b, 0xa8, 0xc7, 0x41, 0x58, 0xe2, 0x1e, 0x6a, 0x71,
		0x8e, 0xf4, 0x16, 0xca, 0x6a, 0xd2, 0xae, 0xce, 0xba, 0x59, 0x1d, 0x6a, 0x2d, 0xca, 0x2a, 0x5a,
		0x25, 0xf4, 0x52, 0x96, 0xd3, 0x2a, 0x20, 0x51, 0x7a, 0x5b, 0xed, 0xaa, 0x95, 0x8a, 0xc2, 0x0d,
		0x3c, 0x5f, 0x7a, 0xe7, 0xde, 0xe2, 0xc7, 0xb1, 0x6e, 0xaf, 0x88, 0xeb, 0xf6, 0xe6, 0xcf, 0x50,
		0x7e, 0xd3, 0xde, 0xc2, 0x55, 0x58, 0xb2, 0x87, 0x25, 0x7b, 0xf1, 0x0f, 0x62, 0xc9, 0x1e, 0xe2,
		0x08, 0x85, 0x8b, 0x23, 0xcc, 0xcb, 0x35, 0xad, 0x70, 0xc2, 0x32, 0x20, 0x44, 0x15, 0x10, 0x55,
		0x40, 0x54, 0x01, 0x51, 0x05, 0x15, 0xd7, 0x61, 0xc1, 0xbc, 0x5e, 0xf8, 0x2d, 0x95, 0x45, 0x7b,
		0x17, 0xe3, 0x2f, 0x9c, 0x7a, 0x66, 0x73, 0xbf, 0x64, 0xb0, 0x5e, 0x8f, 0x2a, 0x96, 0x35, 0xc5,
		0x31, 0xd2, 0x89, 0xb0, 0x2e, 0x38, 0xc5, 0x66, 0xf6, 0xe9, 0xc4, 0x65, 0x3e, 0x48, 0x9f, 0x87,
		0x47, 0x32, 0x30, 0x20, 0x33, 0xf0, 0xe4, 0x6a, 0xf8, 0x06, 0xe0, 0xde, 0xcc, 0x7c, 0x83, 0xa9,
		0x12, 0xd7, 0xf3, 0x0b, 0xc6, 0x40, 0xb0, 0x22, 0x13, 0x3e, 0x01, 0x56, 0x64, 0xb2, 0xc4, 0x81,
		0x98, 0x98, 0x45, 0x9b, 0x69, 0x38, 0x98, 0x87, 0x9b, 0x89, 0xb8, 0x98, 0x89, 0x9d, 0xa9, 0xd8,
		0x99, 0xcb, 0x00, 0x93, 0xd1, 0x98, 0x8d, 0xc8, 0x74, 0xda, 0xcc, 0x17, 0x01, 0x10, 0x3f, 0x3a,
		0xbd, 0x41, 0x57, 0x58, 0x77, 0x4e, 0x2f, 0x14, 0x3e, 0x5f, 0x17, 0xea, 0x12, 0x5c, 0xf4, 0xa0,
		0xa6, 0xc5, 0xbc, 0xdc, 0x4c, 0x6c, 0x8c, 0x99, 0x8d, 0x31, 0xb5, 0x41, 0xe6, 0xd6, 0x63, 0x72,
		0x4d, 0x66, 0xd7, 0x8f, 0xc2, 0xf1, 0x47, 0xe5, 0x98, 0xa2, 0x74, 0x7c, 0xf8, 0xd5, 0xe9, 0xc9,
		0x27, 0x19, 0xec, 0x89, 0x38, 0x25, 0x58, 0xee, 0x90, 0x7b, 0x90, 0x7b, 0x90, 0x7b, 0x90, 0x7b,
		0xb9, 0x37, 0x3b, 0x33, 0xed, 0x84, 0x5d, 0x93, 0xed, 0x98, 0x0f, 0xfe, 0xcd, 0xff, 0x92, 0xc9,
		0x6a, 0x8f, 0xc4, 0xb4, 0xc8, 0xe4, 0xf5, 0x97, 0xd1, 0x4d, 0xce, 0xbd, 0x2e, 0xc0, 0x3a, 0x0f,
		0x2d, 0x05, 0xc9, 0xa1, 0x18, 0x31, 0xc6, 0x1e, 0xde, 0x3a, 0xc6, 0xd8, 0xe7, 0x79, 0x8c, 0xfd,
		0x98, 0xb9, 0x31, 0xba, 0x3e, 0x95, 0x90, 0x23, 0x46, 0xd7, 0x43, 0x88, 0x21, 0xe4, 0x88, 0x90,
		0x23, 0x5c, 0x6f, 0xb8, 0xde, 0x70, 0xbd, 0x11, 0x72, 0x44, 0xc8, 0x11, 0x72, 0x0f, 0x72, 0x0f,
		0x72, 0x0f, 0x21, 0xc7, 0x3c, 0x84, 0x1c, 0x33, 0x18, 0xb9, 0xa7, 0x1a, 0x71, 0x2c, 0xdf, 0x98,
		0x3d, 0x4a, 0xb9, 0x1c, 0xc6, 0xe8, 0xe9, 0x22, 0x3f, 0x93, 0x31, 0x7a, 0x04, 0x9e, 0x4c, 0x67,
		0x78, 0x9e, 0x22, 0x17, 0x62, 0x60, 0x1e, 0xf5, 0x68, 0x33, 0xea, 0x6a, 0x99, 0x3b, 0x46, 0x0c,
		0xdb, 0xc2, 0xb0, 0x2d, 0x63, 0xc6, 0x36, 0x9a, 0x64, 0xd1, 0x24, 0x8b, 0x82, 0x78, 0x13, 0x3e,
		0x26, 0x9a, 0x64, 0x61, 0x54, 0x2c, 0x18, 0x15, 0xe6, 0x07, 0x6e, 0x25, 0x5b, 0x13, 0xb9, 0x1b,
		0xb3, 0xa5, 0x26, 0x6c, 0x31, 0x6d, 0x2b, 0x6d, 0x72, 0x35, 0x33, 0x63, 0x2b, 0x89, 0x40, 0x4b,
		0x30, 0x59, 0x4b, 0x66, 0xfa, 0x14, 0x03, 0xd6, 0xb4, 0xe6, 0x69, 0x0d, 0x6e, 0x83, 0x8e, 0xef,
		0xf4, 0x27, 0x13, 0xb7, 0x37, 0xcf, 0xd3, 0x5a, 0xf8, 0x38, 0xe6, 0x69, 0x15, 0x71, 0x9e, 0x56,
		0xf7, 0xd1, 0xb5, 0x1f, 0x9c, 0x8e, 0x25, 0x77, 0xf4, 0x31, 0x8c, 0xaf, 0xbe, 0x1c, 0x13, 0xb6,
		0x30, 0x61, 0x4b, 0x8e, 0xd4, 0xd4, 0x23, 0x09, 0x2b, 0xa1, 0x20, 0xb0, 0x80, 0xc0, 0x42, 0xfa,
		0x81, 0x05, 0x9d, 0x58, 0x02, 0xc2, 0x07, 0x08, 0x1f, 0x94, 0x3b, 0x7c, 0x40, 0x2f, 0x0e, 0xd6,
		0x29, 0x0a, 0x9e, 0x2f, 0x06, 0x1e, 0x3b, 0xd4, 0xfb, 0xb2, 0x63, 0x63, 0x08, 0x61, 0x88, 0x3d,
		0xd2, 0x34, 0x8e, 0x80, 0x65, 0x1c, 0x47, 0x80, 0x79, 0x1c, 0x90, 0x1f, 0x25, 0x9c, 0xc7, 0xa1,
		0x33, 0xb6, 0x66, 0x1d, 0xbf, 0x60, 0x32, 0x07, 0xca, 0xe4, 0xb3, 0x64, 0x37, 0x1a, 0xdb, 0x11,
		0xd9, 0x4f, 0x9b, 0x0d, 0x23, 0x00, 0x28, 0x0d, 0x4d, 0x81, 0x41, 0x4d, 0x31, 0x2a, 0x37, 0xc3,
		0x1a, 0x63, 0x5c, 0x63, 0x0c, 0x6c, 0x90, 0x91, 0xf5, 0x18, 0x5a, 0x93, 0xb1, 0xf5, 0xed, 0x74,
		0x03, 0x76, 0x3b, 0xa7, 0x1d, 0xbf, 0xd9, 0xae, 0xa7, 0xf7, 0xf8, 0xe9, 0x9f, 0xdc, 0x50, 0xab,
		0xa0, 0x52, 0xa7, 0xf7, 0x2f, 0x6e, 0xe2, 0x68, 0x16, 0x78, 0x32, 0x18, 0x39, 0xe4, 0x80, 0x19,
		0x64, 0x2a, 0x64, 0x6a, 0x0e, 0x65, 0xaa, 0xae, 0xd1, 0x14, 0x01, 0x62, 0xee, 0x31, 0x8c, 0x91,
		0x34, 0x6b, 0xaf, 0x21, 0xb3, 0x81, 0xc5, 0x6e, 0x68, 0x99, 0x10, 0x0e, 0xa6, 0x85, 0x84, 0x29,
		0x61, 0x61, 0x5c, 0x68, 0x18, 0x17, 0x1e, 0x29, 0x08, 0x11, 0x1e, 0x61, 0xc2, 0x24, 0x54, 0xf8,
		0x0d, 0xb6, 0x15, 0x96, 0x00, 0x53, 0x4f, 0x4f, 0xcc, 0x2c, 0x78, 0xf3, 0x2a, 0x1f, 0xe7, 0xc0,
		0x70, 0x06, 0x3c, 0x0e, 0xad, 0x09, 0xc7, 0x16, 0xf2, 0x17, 0xf2, 0x17, 0xf2, 0x17, 0xf2, 0x37,
		0xcf, 0xf2, 0x37, 0x53, 0xb3, 0x9c, 0xa9, 0xf7, 0xf2, 0xc5, 0x11, 0x27, 0x55, 0xf1, 0xcd, 0x17,
		0x3a, 0xed, 0xaf, 0x2c, 0x7f, 0x5a, 0xf9, 0xae, 0xb9, 0x0e, 0xcd, 0xb9, 0xc0, 0x82, 0x72, 0xdd,
		0xe0, 0xfc, 0x6d, 0xdf, 0xbc, 0x9b, 0xdc, 0xf6, 0xc6, 0x37, 0x0d, 0xf4, 0x71, 0x32, 0x44, 0x64,
		0x52, 0x0d, 0xab, 0xd3, 0xfb, 0x3c, 0x23, 0x10, 0x5a, 0xfd, 0x9e, 0x11, 0x14, 0xed, 0xbe, 0xcf,
		0x17, 0x48, 0x06, 0xfa, 0x3f, 0x23, 0xe0, 0x5a, 0x7d, 0xa0, 0xba, 0x87, 0x95, 0x6d, 0xcf, 0x36,
		0xb7, 0xbc, 0x48, 0xb9, 0x97, 0x9b, 0x53, 0x42, 0x94, 0xa3, 0xc7, 0x3b, 0x9b, 0x36, 0x63, 0x0e,
		0x32, 0x4a, 0xa9, 0xf1, 0x58, 0x9b, 0x64, 0x72, 0x51, 0xaf, 0x43, 0x8a, 0xd2, 0x6b, 0x45, 0xe5,
		0xb5, 0x2b, 0x74, 0xea, 0xa8, 0xd0, 0x41, 0x85, 0x8e, 0xf1, 0x28, 0x77, 0x75, 0x7e, 0x45, 0xbc,
		0xdd, 0xed, 0xfa, 0x22, 0x08, 0xf4, 0x2b, 0x75, 0x56, 0x01, 0xc5, 0x74, 0x5e, 0x54, 0xec, 0xe4,
		0x20, 0x9e, 0x51, 0xd4, 0xe9, 0xbc, 0x4e, 0x5f, 0x93, 0x93, 0x16, 0x94, 0xd2, 0xb1, 0x06, 0x8c,
		0xe9, 0x33, 0x5d, 0x69, 0x9d, 0x2c, 0x63, 0x2a, 0xd8, 0xe9, 0x7f, 0x6f, 0x30, 0xe0, 0x26, 0x1e,
		0xa7, 0xe1, 0xa9, 0x73, 0x08, 0x85, 0xef, 0x6a, 0xa3, 0x2b, 0x02, 0xf8, 0xd7, 0xce, 0xce, 0xd5,
		0x81, 0x75, 0xdc, 0x7e, 0xbe, 0xaa, 0x59, 0xc7, 0xed, 0xc9, 0xcb, 0xda, 0xf8, 0x9f, 0xc9, 0xeb,
		0xfa, 0xd5, 0x81, 0xd5, 0x98, 0xbd, 0x6e, 0x5e, 0x1d, 0x58, 0xcd, 0xf6, 0xee, 0xf5, 0xf5, 0xeb,
		0xdd, 0xa7, 0xc3, 0xa1, 0xfa, 0x85, 0x3f, 0xe9, 0x87, 0x0d, 0xdb, 0x1c, 0x48, 0x3c, 0xbf, 0xf8,
		0xf0, 0x07, 0x30, 0x99, 0x65, 0xb8, 0x8e, 0x97, 0x5d, 0x5b, 0xdb, 0xc6, 0xae, 0xb6, 0x75, 0x77,
		0x6a, 0xbd, 0x6f, 0x3f, 0xd5, 0xf6, 0x1a, 0xc3, 0x93, 0xdd, 0xa7, 0xa3, 0xe1, 0xf2, 0x9b, 0xcf,
		0xab, 0x3e, 0x56, 0xdb, 0x3b, 0x1a, 0x9e, 0x24, 0xfc, 0xa5, 0x35, 0x3c, 0x91, 0x84, 0xd1, 0x1c,
		0xee, 0xc4, 0x3e, 0x3a, 0x7a, 0xbf, 0x9e, 0x74, 0x41, 0x23, 0xe1, 0x82, 0xc3, 0xa4, 0x0b, 0x0e,
		0x13, 0x2e, 0x48, 0xbc, 0xa5, 0x7a, 0xc2, 0x05, 0xcd, 0xe1, 0x73, 0xec, 0xf3, 0x3b, 0xab, 0x3f,
		0xda, 0x1a, 0xee, 0x3e, 0x27, 0xfd, 0xed, 0x68, 0xf8, 0x7c, 0xb2, 0xbb, 0x15, 0xc2, 0x0b, 0x74,
		0x55, 0x4c, 0xba, 0xca, 0x28, 0xac, 0xde, 0xce, 0xf1, 0x12, 0x85, 0x79, 0x97, 0xb1, 0xef, 0xf9,
		0x21, 0xaf, 0x13, 0x3a, 0x86, 0x08, 0x0f, 0x14, 0x1e, 0x28, 0x3c, 0x50, 0x32, 0xed, 0x0c, 0x1c,
		0x37, 0xac, 0xb5, 0x18, 0xbc, 0xcf, 0x96, 0x06, 0x88, 0xaf, 0xb6, 0x7b, 0x9f, 0x0b, 0xef, 0xf3,
		0x93, 0xe3, 0x32, 0x56, 0x0b, 0xf3, 0x16, 0x09, 0xfd, 0xc7, 0xee, 0x0d, 0x04, 0x23, 0xbc, 0xf7,
		0xbe, 0xdd, 0x19, 0x89, 0xd1, 0x77, 0xce, 0xbd, 0x33, 0x49, 0x4d, 0xe6, 0xa2, 0xf8, 0xeb, 0x93,
		0xfd, 0x23, 0xf7, 0x47, 0xd0, 0x6a, 0x36, 0x0f, 0x9b, 0x39, 0x3e, 0x06, 0x58, 0x22, 0x31, 0x34,
		0x0b, 0xb7, 0xe3, 0x75, 0x1d, 0x97, 0x61, 0x8b, 0x7c, 0x04, 0x09, 0x96, 0x07, 0x2c, 0x0f, 0x58,
		0x1e, 0xf4, 0x90, 0x51, 0x57, 0xb8, 0xa1, 0x13, 0x3e, 0x32, 0x6d, 0xa7, 0xd3, 0xa9, 0x7d, 0xf9,
		0x30, 0xbd, 0x95, 0x5f, 0xec, 0x80, 0xb1, 0xed, 0xeb, 0xdd, 0xe9, 0xe5, 0xe9, 0xcd, 0xd9, 0xe7,
		0xb7, 0xe7, 0xef, 0x3e, 0x7c, 0xfe, 0xf5, 0xe6, 0xd3, 0xd9, 0xe5, 0x6f, 0xe7, 0xef, 0x74, 0xe9,
		0x71, 0xac, 0x81, 0x02, 0x96, 0x90, 0x03, 0x73, 0x79, 0xf5, 0xd9, 0xe7, 0xb7, 0x37, 0xff, 0x75,
		0x71, 0xfe, 0xf9, 0xe6, 0xc3, 0xd9, 0xe5, 0xfb, 0x6a, 0x1e, 0x4c, 0x09, 0x03, 0x0f, 0xf8, 0xe5,
		0xeb, 0xf9, 0xe5, 0xf9, 0x61, 0x59, 0x9f, 0xee, 0x8f, 0x4f, 0x1f, 0xb3, 0xee, 0x0b, 0x6b, 0xa7,
		0x2d, 0x06, 0x53, 0x31, 0x3e, 0xbe, 0x09, 0xdb, 0x0f, 0x6f, 0x85, 0x1d, 0x5a, 0x8e, 0x1b, 0x0a,
		0xff, 0xbb, 0xdd, 0xd3, 0x37, 0x43, 0x56, 0xc0, 0x84, 0x41, 0x02, 0x83, 0x04, 0x06, 0x89, 0x56,
		0x28, 0xa4, 0xd5, 0x60, 0xb0, 0x45, 0xde, 0x20, 0x14, 0x82, 0x50, 0xc8, 0x96, 0x84, 0x42, 0x78,
		0xab, 0xd0, 0x11, 0x19, 0x49, 0xdf, 0x38, 0x21, 0x8c, 0xc8, 0x5c, 0xe1, 0xcb, 0xc1, 0xf8, 0x80,
		0xf1, 0x01, 0xe3, 0x03, 0xc6, 0x07, 0x8c, 0x0f, 0x18, 0x1f, 0x30, 0x3e, 0x60, 0x7c, 0x48, 0xa2,
		0xd9, 0xf3, 0x9d, 0x7b, 0xc7, 0xb5, 0x43, 0xd1, 0xb5, 0xfe, 0xd7, 0x0b, 0xac, 0x07, 0xdb, 0xff,
		0x9b, 0x25, 0x49, 0x93, 0x00, 0x17, 0x46, 0x0a, 0x8c, 0x14, 0x18, 0x29, 0x64, 0xda, 0xe9, 0x06,
		0x9d, 0x3e, 0x83, 0x89, 0xd2, 0x84, 0x89, 0x02, 0x13, 0x65, 0x5b, 0x4a, 0x45, 0x0e, 0x61, 0x90,
		0x14, 0xc9, 0x20, 0xe9, 0xfb, 0x5e, 0xe8, 0x75, 0x3c, 0x86, 0x04, 0x4d, 0x04, 0x09, 0x46, 0x07,
		0x8c, 0x0e, 0x18, 0x1d, 0x1a, 0xb1, 0xc5, 0x92, 0xd7, 0x89, 0x5c, 0x5c, 0x7e, 0x3d, 0x3b, 0xfd,
		0x34, 0xa9, 0x2d, 0x78, 0x7b, 0xfe, 0xb1, 0xbc, 0x25, 0x22, 0xd3, 0x07, 0xfd, 0xef, 0xb3, 0x5f,
		0x2e, 0xce, 0xdf, 0xfe, 0x7e, 0x76, 0x79, 0xf3, 0xf5, 0xcb, 0xdb, 0x32, 0xd6, 0x52, 0x4c, 0x9f,
		0xf3, 0xe2, 0xe2, 0xb7, 0x12, 0x3f, 0xdd, 0xaf, 0xe5, 0x3e, 0xbc, 0x71, 0x29, 0x53, 0xb9, 0x1f,
		0xf1, 0xf2, 0xb7, 0xaf, 0x1f, 0xde, 0x73, 0x31, 0x21, 0xaa, 0x7e, 0x62, 0xe8, 0x0e, 0xec, 0x87,
		0x7e, 0x4f, 0x30, 0x96, 0xfc, 0x2c, 0x03, 0x84, 0x61, 0x09, 0xc3, 0x12, 0x86, 0x25, 0x99, 0x76,
		0x90, 0x72, 0x43, 0x3c, 0x0b, 0xf1, 0x2c, 0xc5, 0x23, 0x40, 0xca, 0xad, 0xe8, 0x11, 0xae, 0x60,
		0xd0, 0xef, 0xfb, 0x22, 0x08, 0x2c, 0x5f, 0x74, 0x07, 0x6e, 0xd7, 0x76, 0x19, 0xba, 0xb2, 0x57,
		0xc0, 0x84, 0x71, 0x02, 0xe3, 0x04, 0xc6, 0x09, 0x99, 0x76, 0x6e, 0x3d, 0xaf, 0x27, 0x6c, 0x97,
		0x23, 0xe2, 0x55, 0xc3, 0x4c, 0xd7, 0xf4, 0x67, 0xba, 0x12, 0x27, 0x86, 0xa7, 0x38, 0xcc, 0x55,
		0x7d, 0x14, 0xf8, 0x30, 0xa3, 0xad, 0xef, 0xd3, 0x51, 0xde, 0xd2, 0x45, 0xa6, 0xb4, 0xc1, 0xdd,
		0xf4, 0x41, 0xdd, 0xac, 0x83, 0xb9, 0x69, 0x83, 0xb8, 0x65, 0x51, 0x49, 0xe4, 0xa2, 0x74, 0xb9,
		0xa7, 0xaa, 0x34, 0x04, 0x38, 0x1d, 0x7e, 0x91, 0xe3, 0x94, 0xcd, 0x74, 0xbf, 0xfe, 0x13, 0x1b,
		0x8e, 0x51, 0xf5, 0xf8, 0x8c, 0x1d, 0x9b, 0xc4, 0x09, 0x19, 0x39, 0x99, 0xf5, 0xa7, 0x90, 0x8c,
		0xdb, 0x35, 0x78, 0xad, 0xf6, 0x85, 0x1f, 0x38, 0x41, 0x28, 0xdc, 0x70, 0xe9, 0x19, 0x37, 0x61,
		0xf8, 0x25, 0xd3, 0x9b, 0x04, 0x61, 0xc3, 0x69, 0xca, 0x0d, 0x93, 0x96, 0xb6, 0x69, 0x55, 0x6c,
		0x57, 0xaa, 0x8d, 0xaa, 0x6a, 0x8b, 0x92, 0x6d, 0x4e, 0xb2, 0x6d, 0xa9, 0x61, 0x43, 0xea, 0xf1,
		0xa6, 0xec, 0xb0, 0xe6, 0x24, 0x72, 0x91, 0xc7, 0xe9, 0x06, 0xba, 0x93, 0xc5, 0xb0, 0xda, 0x2c,
		0x73, 0x65, 0xd7, 0x8a, 0xe2, 0x4a, 0xe9, 0xba, 0x4e, 0x54, 0x57, 0x49, 0xdb, 0x35, 0xd2, 0x76,
		0x85, 0x18, 0x5c, 0x1f, 0x5e, 0xa3, 0x4b, 0x75, 0xf6, 0x78, 0xb5, 0x33, 0xa3, 0x0f, 0xe2, 0x3c,
		0xfe, 0xe9, 0xf5, 0x29, 0x0f, 0xe4, 0x3f, 0xc0, 0x40, 0x7e, 0x0c, 0xe4, 0x97, 0xbe, 0x4f, 0xf2,
		0x40, 0x7e, 0x8c, 0x1f, 0x42, 0x80, 0x0d, 0x01, 0xb6, 0x3c, 0x05, 0xd8, 0x30, 0x7e, 0x88, 0x00,
		0x1b, 0xe3, 0x87, 0x32, 0x7d, 0x40, 0x8c, 0x1f, 0x32, 0x24, 0x8e, 0x66, 0x3f, 0xe5, 0x2c, 0x44,
		0xea, 0x79, 0x1d, 0xbb, 0x67, 0x05, 0x63, 0x25, 0xc7, 0xb7, 0x0e, 0x68, 0x25, 0x54, 0x18, 0x25,
		0x30, 0x4a, 0x60, 0x94, 0xd0, 0x8d, 0x12, 0xec, 0x03, 0x4a, 0xc4, 0x0c, 0xf6, 0x01, 0x61, 0x1f,
		0x50, 0xf9, 0x31, 0x89, 0x7d, 0x40, 0x85, 0x65, 0x57, 0xec, 0x6d, 0xc1, 0x3e, 0x20, 0xd0, 0x15,
		0xe8, 0x8a, 0x47, 0x94, 0x97, 0xb2, 0xf6, 0x74, 0x5a, 0x0d, 0xa0, 0xe9, 0x79, 0x8e, 0xa1, 0xc0,
		0xd3, 0x84, 0xa7, 0x09, 0x4f, 0x93, 0x4c, 0x3b, 0x41, 0xe8, 0xd3, 0x93, 0x48, 0x8b, 0x26, 0x19,
		0xc6, 0x4b, 0x61, 0xbc, 0x14, 0x64, 0x12, 0x64, 0x92, 0x36, 0xed, 0x60, 0xbc, 0xd4, 0xcb, 0x8d,
		0xa0, 0x1d, 0xaf, 0x92, 0x61, 0x24, 0xa4, 0x82, 0xf1, 0x52, 0x68, 0xbe, 0x33, 0x61, 0x90, 0x60,
		0xbc, 0x14, 0x8c, 0x0e, 0x18, 0x1d, 0x79, 0x32, 0x3a, 0x30, 0x5e, 0x8a, 0xa0, 0x79, 0x30, 0x5e,
		0x2a, 0xfb, 0xe7, 0xc4, 0x78, 0xa9, 0x02, 0x3f, 0x1e, 0xc6, 0x4b, 0xa5, 0x68, 0x4a, 0x16, 0xa0,
		0xaa, 0xab, 0xec, 0xad, 0xd3, 0x49, 0x2d, 0x72, 0x49, 0x7f, 0xd8, 0x27, 0x75, 0x83, 0x54, 0x38,
		0xfa, 0x0e, 0xbf, 0x44, 0x77, 0x24, 0xf3, 0xfe, 0xcd, 0xd4, 0x10, 0x36, 0xd5, 0x48, 0xad, 0xd0,
		0xfb, 0xd4, 0x15, 0x41, 0xe8, 0xb8, 0xe3, 0x73, 0xb6, 0xee, 0x7d, 0x6f, 0xd0, 0x0f, 0xe8, 0xcd,
		0x38, 0x2b, 0x60, 0xa1, 0x31, 0xc7, 0xb4, 0xff, 0x80, 0xc6, 0x1c, 0xb2, 0x88, 0x23, 0x37, 0xe6,
		0xc4, 0x08, 0x5d, 0xdf, 0x33, 0x8f, 0x83, 0xd4, 0x73, 0xd1, 0x6b, 0x70, 0xd1, 0xe1, 0xa2, 0x17,
		0xcf, 0x45, 0xa7, 0xb2, 0x64, 0x04, 0x80, 0xd8, 0x50, 0x9a, 0x48, 0x82, 0x64, 0x93, 0x82, 0x91,
		0x29, 0xd9, 0x98, 0x93, 0x93, 0x49, 0x4d, 0x31, 0x2b, 0x37, 0xd3, 0x1a, 0x63, 0x5e, 0x63, 0x4c,
		0x6c, 0x90, 0x99, 0x79, 0x5c, 0x23, 0x4d, 0xef, 0x51, 0x9b, 0xc9, 0x23, 0x40, 0x63, 0x45, 0x69,
		0x69, 0xec, 0xa2, 0x4c, 0x24, 0xe6, 0x08, 0xf2, 0x5e, 0x2e, 0x33, 0x39, 0x5c, 0x82, 0xc0, 0x84,
		0x40, 0x30, 0x2d, 0x18, 0x4c, 0x09, 0x08, 0xe3, 0x82, 0xc2, 0xb8, 0xc0, 0x48, 0x41, 0x70, 0xf0,
		0x08, 0x10, 0xc6, 0x30, 0x54, 0x85, 0x25, 0xb0, 0x9f, 0x48, 0xbb, 0x3d, 0x61, 0xdf, 0xe9, 0x05,
		0xf9, 0x13, 0x6d, 0x81, 0x23, 0x46, 0x98, 0x5f, 0xa6, 0x61, 0x96, 0xd7, 0xaf, 0xf7, 0xe3, 0xff,
		0xc5, 0xdd, 0xf2, 0xf8, 0x5b, 0xfb, 0x91, 0xc0, 0x7b, 0x95, 0x0f, 0xf2, 0xc8, 0x56, 0x43, 0x69,
		0x06, 0xbf, 0x72, 0x11, 0x0c, 0x93, 0x3a, 0x76, 0x16, 0xf3, 0x36, 0x8b, 0x08, 0xda, 0xbb, 0x97,
		0x47, 0xf9, 0x75, 0xfc, 0x70, 0xb1, 0x77, 0x48, 0x41, 0x36, 0x3e, 0x32, 0xd4, 0x20, 0x41, 0x3e,
		0xbb, 0x86, 0xdb, 0x9e, 0x61, 0xb2, 0x63, 0xe0, 0xc8, 0xc0, 0x91, 0x29, 0x83, 0x23, 0xc3, 0x66,
		0x77, 0x18, 0xb0, 0x37, 0x38, 0xed, 0x8c, 0x79, 0xfb, 0x62, 0x22, 0xd5, 0x99, 0xec, 0x85, 0x6c,
		0xc4, 0xeb, 0x64, 0xce, 0x2e, 0x9b, 0x6c, 0xa5, 0x8e, 0xed, 0x35, 0x1a, 0x21, 0xaa, 0x43, 0xb0,
		0x42, 0xb0, 0x22, 0x42, 0x84, 0x08, 0x11, 0x22, 0x44, 0x88, 0x10, 0x21, 0x42, 0x84, 0x08, 0x11,
		0x22, 0x44, 0x88, 0x10, 0x51, 0x22, 0x44, 0x1c, 0xd6, 0x6d, 0x4e, 0x03, 0x44, 0x84, 0x6d, 0x16,
		0x8c, 0x0e, 0x4c, 0xaa, 0x79, 0xf5, 0xe9, 0x36, 0x0c, 0x4d, 0xa3, 0x85, 0xb6, 0x23, 0x23, 0x06,
		0x85, 0xbc, 0x33, 0x23, 0x0e, 0x89, 0x71, 0x87, 0x46, 0x0c, 0x38, 0x69, 0xa7, 0x06, 0xd7, 0x81,
		0x31, 0xc9, 0x97, 0xdc, 0xca, 0x95, 0xaa, 0x96, 0xff, 0x9e, 0x33, 0x49, 0x52, 0x45, 0xc5, 0x6f,
		0x6e, 0x48, 0xad, 0x00, 0xd5, 0xbf, 0x31, 0x82, 0xca, 0x43, 0x21, 0x30, 0x69, 0xca, 0x8a, 0xce,
		0x74, 0x15, 0xa2, 0xc7, 0x8b, 0x62, 0x5f, 0x14, 0xfb, 0x52, 0xa4, 0x1b, 0xd9, 0x03, 0x64, 0xf0,
		0xf4, 0x74, 0x3c, 0xba, 0x15, 0xb1, 0xf7, 0x31, 0xb3, 0xe5, 0x40, 0x64, 0x04, 0xc2, 0x0d, 0x3c,
		0xdf, 0xea, 0xfb, 0xde, 0x9d, 0xd3, 0x13, 0x1a, 0x8d, 0x03, 0xcb, 0x80, 0xd0, 0x35, 0x00, 0x41,
		0x52, 0xbe, 0xae, 0x81, 0x45, 0x2a, 0x67, 0xd8, 0x9f, 0xbb, 0x08, 0x0f, 0xfd, 0x02, 0xe8, 0x17,
		0xc8, 0x41, 0x1c, 0x18, 0xfd, 0x02, 0xe8, 0x17, 0x48, 0x93, 0x59, 0xb9, 0x99, 0xd6, 0x18, 0xf3,
		0x1a, 0x63, 0x62, 0x83, 0xcc, 0x9c, 0x8f, 0x58, 0x3b, 0x5b, 0x36, 0xf8, 0x9b, 0xb0, 0xfd, 0xf0,
		0x56, 0xd8, 0xa1, 0xe5, 0xb8, 0xa1, 0xf0, 0xbf, 0xdb, 0x3d, 0xfe, 0xbc, 0xf0, 0x8a, 0xef, 0x40,
		0x86, 0x38, 0x6f, 0xc2, 0xc2, 0x94, 0xd0, 0x30, 0x2e, 0x3c, 0x8c, 0x0b, 0x91, 0x14, 0x84, 0x09,
		0x8f, 0x50, 0x61, 0x12, 0x2e, 0xfa, 0xf1, 0x81, 0x8d, 0xb4, 0x3b, 0x70, 0xdc, 0xb0, 0xd5, 0x30,
		0x90, 0x20, 0x7e, 0xc3, 0x08, 0x92, 0x67, 0x86, 0xe1, 0xf2, 0x0f, 0x2f, 0x57, 0x55, 0xb8, 0x67,
		0x1c, 0x1a, 0x16, 0xb1, 0x31, 0xf0, 0xcc, 0x33, 0x10, 0x63, 0xf0, 0x0d, 0xcc, 0xe3, 0x33, 0xc4,
		0x6e, 0x8b, 0x47, 0x6a, 0xff, 0x28, 0xfc, 0x91, 0xf2, 0xe6, 0x1e, 0x33, 0x3f, 0xe5, 0x57, 0xf9,
		0x84, 0xd6, 0xce, 0x4b, 0xed, 0x09, 0x47, 0x3d, 0x84, 0xfd, 0xd0, 0xef, 0x09, 0x83, 0x96, 0xe8,
		0xf2, 0x17, 0xc0, 0x0c, 0x85, 0x19, 0x0a, 0x33, 0x14, 0x66, 0x28, 0xcc, 0x50, 0x98, 0xa1, 0x30,
		0x43, 0x61, 0x86, 0xc2, 0x0c, 0x85, 0x19, 0x1a, 0x65, 0x11, 0xf5, 0xc6, 0x98, 0x25, 0xdb, 0xa0,
		0xf3, 0xd0, 0x61, 0x80, 0xc2, 0x00, 0x85, 0x01, 0xba, 0xb5, 0x06, 0x68, 0x19, 0x3a, 0x65, 0xe6,
		0xe5, 0x59, 0xb0, 0xf0, 0xdb, 0xac, 0x38, 0x6b, 0xfe, 0xbd, 0x3c, 0x75, 0xcb, 0x70, 0xa8, 0x8a,
		0x41, 0xbf, 0xef, 0x8b, 0x20, 0xb0, 0x7c, 0xd1, 0x1d, 0xb8, 0x5d, 0x7b, 0xcc, 0x14, 0xdc, 0x0a,
		0x23, 0xfe, 0x1d, 0x50, 0x1b, 0x50, 0x1b, 0x50, 0x1b, 0x5b, 0xab, 0x36, 0x6e, 0x3d, 0xaf, 0x27,
		0x6c, 0xd7, 0x84, 0xda, 0xa8, 0xa1, 0x95, 0xb1, 0x24, 0xad, 0x8c, 0x4b, 0x15, 0xc4, 0x4b, 0xbf,
		0x17, 0x77, 0xcc, 0xd5, 0xc5, 0xf8, 0x39, 0xbe, 0x4c, 0x1f, 0x6b, 0xf1, 0xd7, 0x02, 0x0f, 0xb8,
		0x62, 0x75, 0x3a, 0x4d, 0x38, 0x9b, 0x18, 0x74, 0x95, 0xbd, 0x35, 0x80, 0x0a, 0xbc, 0xdc, 0xa8,
		0x88, 0x2d, 0x1e, 0x74, 0xb5, 0x20, 0x54, 0x30, 0xec, 0x0a, 0xc3, 0xae, 0x20, 0x5c, 0x21, 0x5c,
		0x59, 0x85, 0x2b, 0xca, 0x9b, 0x11, 0x9f, 0x41, 0x7c, 0x06, 0xf1, 0x99, 0x82, 0xc6, 0x67, 0x50,
		0x57, 0xc2, 0x49, 0x97, 0xa8, 0x2b, 0x49, 0x86, 0x8f, 0xba, 0x92, 0xcc, 0x8e, 0x14, 0x75, 0x25,
		0x69, 0x40, 0x43, 0x79, 0xb3, 0x8a, 0x27, 0x8a, 0xf2, 0x66, 0x98, 0xa1, 0x30, 0x43, 0x61, 0x86,
		0xc2, 0x0c, 0x85, 0x19, 0x0a, 0x33, 0x14, 0x66, 0x28, 0xcc, 0x50, 0x98, 0xa1, 0x71, 0x33, 0x14,
		0xe5, 0xcd, 0x30, 0x40, 0x61, 0x80, 0xc2, 0x00, 0x35, 0x6e, 0x80, 0xa2, 0xbc, 0xb9, 0xe8, 0xaa,
		0x02, 0xe5, 0xcd, 0x50, 0x1b, 0x50, 0x1b, 0x50, 0x1b, 0xa9, 0xaa, 0x0d, 0x94, 0x37, 0x9b, 0x3d,
		0xc2, 0x6d, 0x28, 0x6f, 0x2e, 0xea, 0x8e, 0x96, 0xb5, 0xd5, 0xcd, 0xdb, 0xb7, 0x9d, 0x85, 0xc1,
		0x9b, 0xc4, 0x86, 0x96, 0xd4, 0x0e, 0xad, 0xc8, 0x1b, 0x5a, 0xd6, 0xcb, 0x93, 0x02, 0xed, 0x66,
		0x59, 0x27, 0x41, 0xb0, 0x95, 0x25, 0x27, 0xe4, 0x55, 0x80, 0x95, 0x2c, 0x8b, 0x74, 0x94, 0x8b,
		0xe5, 0x0a, 0xa4, 0xba, 0x6d, 0xad, 0x3a, 0x6d, 0xed, 0x45, 0x0a, 0x75, 0x2c, 0x52, 0xc0, 0x22,
		0x05, 0xe9, 0xfb, 0x24, 0x2f, 0x52, 0x18, 0xc9, 0x82, 0xae, 0xe3, 0xde, 0xeb, 0xaf, 0x50, 0x88,
		0x20, 0xe9, 0x2d, 0x4f, 0x38, 0xc0, 0xf2, 0x04, 0xf6, 0xa0, 0x09, 0x96, 0x27, 0x18, 0xb7, 0x60,
		0xb5, 0x83, 0x1a, 0x11, 0xed, 0x38, 0x5d, 0xe1, 0x86, 0x4e, 0xf8, 0xa8, 0x17, 0xff, 0x8e, 0xf4,
		0x8f, 0x8e, 0x4f, 0xf0, 0x61, 0x7a, 0x2b, 0xbf, 0xd8, 0x01, 0x63, 0xdb, 0xd3, 0xbb, 0xd3, 0xcb,
		0xd3, 0x9b, 0xb3, 0xcf, 0x6f, 0xcf, 0xdf, 0x7d, 0xf8, 0xfc, 0xeb, 0xcd, 0xa7, 0xb3, 0xcb, 0xdf,
		0xce, 0xdf, 0xe9, 0xd2, 0xe3, 0x38, 0xa9, 0x1d, 0xb0, 0x54, 0x83, 0x30, 0x47, 0xa9, 0xcf, 0x3e,
		0xbf, 0xbd, 0xf9, 0xaf, 0x8b, 0xf3, 0xcf, 0x37, 0x1f, 0xce, 0x2e, 0xdf, 0x57, 0xf3, 0x10, 0x9c,
		0x37, 0xf0, 0x80, 0x5f, 0xbe, 0x9e, 0x5f, 0x9e, 0x1f, 0x96, 0xf5, 0xe9, 0xfe, 0xf8, 0xf4, 0x31,
		0xeb, 0xbe, 0xa8, 0x76, 0xda, 0x62, 0xf0, 0x55, 0x0a, 0x47, 0x57, 0x75, 0xba, 0xfa, 0x66, 0x07,
		0x7d, 0x01, 0x2f, 0x0c, 0x0e, 0x18, 0x1c, 0x30, 0x38, 0x18, 0xaa, 0x3d, 0x19, 0xaa, 0x3b, 0x99,
		0xaa, 0x39, 0x19, 0x52, 0x12, 0x9c, 0xd5, 0x9a, 0xdc, 0x89, 0x64, 0xe6, 0x6a, 0x4c, 0x13, 0x75,
		0x79, 0x1c, 0xc5, 0x03, 0x9c, 0xd5, 0x95, 0xa6, 0x8e, 0xc0, 0x5c, 0xf5, 0xa4, 0x91, 0x53, 0xc9,
		0x28, 0xf5, 0xd3, 0xce, 0xb1, 0xf1, 0xd1, 0xf3, 0x3a, 0x76, 0xcf, 0x0a, 0xc6, 0x0a, 0xcf, 0xb2,
		0xbb, 0x5d, 0x5f, 0x04, 0x81, 0xbe, 0x39, 0xb2, 0x12, 0x2a, 0x0c, 0x14, 0x18, 0x28, 0x30, 0x50,
		0xe8, 0x26, 0x7e, 0x5f, 0x93, 0x93, 0x16, 0x02, 0x22, 0xc7, 0x1a, 0x30, 0xa6, 0xcf, 0x94, 0xb9,
		0x91, 0xf2, 0x82, 0x99, 0xef, 0x0d, 0x06, 0xdc, 0xc4, 0x70, 0xf4, 0x86, 0x67, 0xfc, 0x4f, 0x28,
		0x7c, 0x97, 0xad, 0x43, 0xa7, 0xfa, 0xd7, 0xce, 0xce, 0xd5, 0x81, 0x75, 0xdc, 0x7e, 0xbe, 0xaa,
		0x59, 0xc7, 0xed, 0xc9, 0xcb, 0xda, 0xf8, 0x9f, 0xc9, 0xeb, 0xfa, 0xd5, 0x81, 0xd5, 0x98, 0xbd,
		0x6e, 0x5e, 0x1d, 0x58, 0xcd, 0xf6, 0xee, 0xf5, 0xf5, 0xeb, 0xdd, 0xa7, 0xc3, 0xa1, 0xfa, 0x85,
		0x3f, 0xe9, 0x7b, 0xfc, 0x6d, 0x0e, 0x24, 0x9e, 0x5f, 0x7c, 0xf8, 0x03, 0x98, 0xcc, 0xb2, 0xe8,
		0x89, 0x97, 0x5d, 0x5b, 0xdb, 0xc6, 0xae, 0xb6, 0x75, 0x77, 0x6a, 0xbd, 0x6f, 0x3f, 0xd5, 0xf6,
		0x1a, 0xc3, 0x93, 0xdd, 0xa7, 0xa3, 0xe1, 0xf2, 0x9b, 0xcf, 0xab, 0x3e, 0x56, 0xdb, 0x3b, 0x1a,
		0x9e, 0x24, 0xfc, 0xa5, 0x35, 0x3c, 0x91, 0x84, 0xd1, 0x1c, 0xee, 0xc4, 0x3e, 0x3a, 0x7a, 0xbf,
		0x9e, 0x74, 0x41, 0x23, 0xe1, 0x82, 0xc3, 0xa4, 0x0b, 0x0e, 0x13, 0x2e, 0x48, 0xbc, 0xa5, 0x7a,
		0xc2, 0x05, 0xcd, 0xe1, 0x73, 0xec, 0xf3, 0x3b, 0xab, 0x3f, 0xda, 0x1a, 0xee, 0x3e, 0x27, 0xfd,
		0xed, 0x68, 0xf8, 0x7c, 0xb2, 0xbb, 0x15, 0xc2, 0x0b, 0x74, 0x55, 0x4c, 0xba, 0x82, 0x27, 0x1a,
		0xa3, 0xe8, 0x69, 0x65, 0x8e, 0xa6, 0xe7, 0x39, 0x86, 0x02, 0x4f, 0x13, 0x9e, 0x26, 0x3c, 0x4d,
		0x32, 0xed, 0x04, 0xa1, 0x4f, 0xaf, 0x60, 0x59, 0x34, 0xc9, 0x72, 0x2c, 0x6f, 0x3c, 0xdf, 0xb9,
		0x77, 0x5c, 0x3b, 0x14, 0x5d, 0xeb, 0x7f, 0xbd, 0xc0, 0x7a, 0xb0, 0xfd, 0xbf, 0x59, 0x2a, 0x80,
		0x12, 0xe0, 0x42, 0x26, 0x41, 0x26, 0x41, 0x26, 0x91, 0x69, 0xa7, 0x1b, 0x74, 0xfa, 0x0c, 0x12,
		0xa9, 0x89, 0xe4, 0x1c, 0xab, 0x80, 0x89, 0x81, 0x43, 0x72, 0x2e, 0x37, 0x47, 0xd0, 0x3a, 0x44,
		0x2a, 0xae, 0x48, 0x0e, 0x50, 0xdf, 0xf7, 0x42, 0xaf, 0xe3, 0xf5, 0xf4, 0x4d, 0x90, 0x08, 0x12,
		0x8c, 0x0e, 0x18, 0x1d, 0x30, 0x3a, 0xe8, 0x91, 0xea, 0xb2, 0x17, 0x21, 0x5f, 0x5c, 0x7e, 0x3d,
		0x3b, 0xfd, 0x34, 0x29, 0x5c, 0x7d, 0x7b, 0xfe, 0xb1, 0xbc, 0xf5, 0xc7, 0xd3, 0x07, 0xfd, 0xef,
		0xb3, 0x5f, 0x2e, 0xce, 0xdf, 0xfe, 0x7e, 0x76, 0x79, 0xf3, 0xf5, 0xcb, 0xdb, 0x32, 0x16, 0xea,
		0x4e, 0x9f, 0xf3, 0xe2, 0xe2, 0xb7, 0x12, 0x3f, 0xdd, 0xaf, 0xe5, 0x3e, 0xbc, 0x71, 0x9d, 0x7c,
		0xb9, 0x1f, 0xf1, 0xf2, 0xb7, 0xaf, 0x1f, 0xde, 0x73, 0x31, 0x61, 0xd9, 0x4b, 0xca, 0xd1, 0x0c,
		0xbc, 0xdc, 0x0c, 0x4c, 0x1c, 0x4e, 0x91, 0x7a, 0x0b, 0xb0, 0xfa, 0xbc, 0x09, 0x85, 0xce, 0xdf,
		0x57, 0x8c, 0xe4, 0x30, 0x9b, 0x17, 0xa1, 0x90, 0x3d, 0xa1, 0xcd, 0x85, 0xa0, 0xcf, 0x81, 0x60,
		0x9d, 0xfb, 0x40, 0x9b, 0xf3, 0x20, 0x8b, 0x4c, 0x22, 0x4f, 0x65, 0xc1, 0x4b, 0x55, 0xa5, 0xfe,
		0xf1, 0x34, 0xb9, 0x47, 0x8e, 0x6f, 0x36, 0x73, 0xc1, 0xfa, 0x4f, 0x6c, 0x38, 0x52, 0xd5, 0xa3,
		0x34, 0x79, 0x84, 0x12, 0x47, 0x65, 0xea, 0x88, 0xd6, 0x9f, 0x45, 0x32, 0x86, 0x57, 0xff, 0x25,
		0x01, 0xe7, 0xb2, 0xb8, 0x66, 0xc0, 0xf1, 0x1a, 0x54, 0xea, 0xa2, 0x70, 0x35, 0xaa, 0xe2, 0x88,
		0x58, 0x7c, 0x67, 0x09, 0x25, 0x9b, 0x50, 0x41, 0x42, 0xc1, 0x8a, 0x87, 0x56, 0x7f, 0xd8, 0xc5,
		0xc7, 0x7b, 0x79, 0x88, 0xc9, 0xab, 0xe9, 0x63, 0x24, 0xdd, 0x7e, 0xd5, 0x09, 0xde, 0xdb, 0x7f,
		0x8b, 0xaf, 0x9e, 0x17, 0x8f, 0x54, 0x2c, 0x3f, 0x52, 0x75, 0xfe, 0x4f, 0x0b, 0x77, 0xf9, 0x4e,
		0x7c, 0x77, 0x3a, 0x53, 0xb5, 0x3a, 0x7c, 0x35, 0xfc, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01,
		0x00, 0x00, 0xff, 0xff, 0x86, 0x67, 0x57, 0x37, 0x2d, 0x65, 0x16, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/components/component/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS)(0)),
	},
	"/components/component/state/temperature/alarm-severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/components/component/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT)(0)),
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT)(0)),
	},
	"/interfaces/interface/config/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus)(0)),
	},
	"/interfaces/interface/state/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus)(0)),
	},
	"/messages/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/messages/debug-entries/debug-service/config/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/messages/debug-entries/debug-service/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/messages/debug-entries/debug-service/state/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/messages/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/sample/container-val/enum-val": []reflect.Type{
		reflect.TypeOf((E_Sample_Sample_ContainerVal_EnumVal)(0)),
	},
	"/system/aaa/accounting/config/accounting-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/record": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/events/event/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/record": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/state/accounting-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/config/authentication-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/state/authentication-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/users/user/config/role": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authentication/users/user/state/role": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authorization/config/authorization-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/config/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/state/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/state/authorization-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/alarms/alarm/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/system/alarms/alarm/state/type-id": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID)(0)),
	},
	"/system/cpus/cpu/index": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/cpus/cpu/state/index": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/grpc-server/config/listen-addresses": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses)(0)),
	},
	"/system/grpc-server/state/listen-addresses": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses)(0)),
	},
	"/system/logging/console/selectors/selector/config/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/state/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/messages/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/system/messages/debug-entries/debug-service/config/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/system/messages/debug-entries/debug-service/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/system/messages/debug-entries/debug-service/state/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/system/messages/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/config/key-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/state/key-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/servers/server/config/association-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/ntp/servers/server/state/association-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/openflow/agent/config/failure-mode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigOpenflow_FailureMode)(0)),
	},
	"/system/openflow/agent/state/failure-mode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigOpenflow_FailureMode)(0)),
	},
	"/system/openflow/controllers/controller/connections/connection/config/transport": []reflect.Type{
		reflect.TypeOf((E_OpenconfigOpenflow_Transport)(0)),
	},
	"/system/openflow/controllers/controller/connections/connection/state/transport": []reflect.Type{
		reflect.TypeOf((E_OpenconfigOpenflow_Transport)(0)),
	},
	"/system/ssh-server/config/protocol-version": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/system/ssh-server/state/protocol-version": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/encoding": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD)(0)),
	},
	"/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_STREAM_PROTOCOL)(0)),
	},
	"/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/encoding": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD)(0)),
	},
	"/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_STREAM_PROTOCOL)(0)),
	},
	"/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state/encoding": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD)(0)),
	},
	"/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_STREAM_PROTOCOL)(0)),
	},
}

